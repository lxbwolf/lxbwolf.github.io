<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>邮件 on Xiaobin&#39;s Blog</title>
        <link>http://lxb.wiki/tags/%E9%82%AE%E4%BB%B6/</link>
        <description>Recent content in 邮件 on Xiaobin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 01 Sep 2018 22:26:49 +0000</lastBuildDate><atom:link href="http://lxb.wiki/tags/%E9%82%AE%E4%BB%B6/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>Go 发送邮件</title>
        <link>http://lxb.wiki/c296dcc8/</link>
        <pubDate>Sat, 01 Sep 2018 22:26:49 +0000</pubDate>
        
        <guid>http://lxb.wiki/c296dcc8/</guid>
        <description>&lt;p&gt;需要引入 smtp包 mail.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;bytes&amp;quot;
    &amp;quot;encoding/base64&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/smtp&amp;quot;
    &amp;quot;strings&amp;quot;
)

const const_smtp_server = &amp;quot;server-ip:port&amp;quot;

//const const_email_content_type = &amp;quot;Content-Type: text/plain; charset=UTF-8&amp;quot;
const const_email_content_type = &amp;quot;Content-Type: text/html; charset=UTF-8&amp;quot;
const const_boundary = &amp;quot;THIS_IS_THE_BOUNDARY_FOR_EMAIL_BY_LXB&amp;quot;

func SendEmail(sender string, receivers []string, subject string, content string, attach_files []string) error {

    var buf bytes.Buffer
    buf.WriteString(&amp;quot;To: &amp;quot;)
    buf.WriteString(strings.Join(receivers, &amp;quot;,&amp;quot;))
    buf.WriteString(&amp;quot;\r\nFrom: &amp;quot;)
    //nickname := strings.Split(sender,&amp;quot;@&amp;quot;)[0]
    //buf.WriteString(nickname)
    buf.WriteString(&amp;quot;&amp;lt;&amp;quot;)
    buf.WriteString(sender)
    buf.WriteString(&amp;quot;&amp;gt;&amp;quot;)
    buf.WriteString(&amp;quot;\r\nSubject: &amp;quot;)
    buf.WriteString(subject)
    buf.WriteString(&amp;quot;\r\nContent-Type: multipart/mixed; boundary=&amp;quot;)
    buf.WriteString(const_boundary)
    buf.WriteString(&amp;quot;\r\n--&amp;quot;)
    buf.WriteString(const_boundary)
    buf.WriteString(&amp;quot;\r\n&amp;quot;)
    buf.WriteString(const_email_content_type)
    buf.WriteString(&amp;quot;\r\n\r\n&amp;quot;)
    buf.WriteString(content)
    buf.WriteString(&amp;quot;\r\n\r\n--&amp;quot;)
    buf.WriteString(const_boundary)
    buf.WriteString(&amp;quot;\r\n&amp;quot;)

    for _, filepath := range attach_files {
        // 第一个附件
        filedepts := strings.Split(filepath, &amp;quot;/&amp;quot;)
        filename := filedepts[len(filedepts)-1]
        buf.WriteString(&amp;quot;Content-Type: application/octet-stream\r\n&amp;quot;)
        buf.WriteString(&amp;quot;Content-Description: 附件\r\n&amp;quot;)
        buf.WriteString(&amp;quot;Content-Transfer-Encoding: base64\r\n&amp;quot;)
        buf.WriteString(&amp;quot;Content-Disposition: attachment; filename=\&amp;quot;&amp;quot; + filename + &amp;quot;\&amp;quot;\r\n\r\n&amp;quot;)
        //读取并编码文件内容
        attaData, err := ioutil.ReadFile(filepath)
        if err != nil {
            print(err)
            return err
        }
        b := make([]byte, base64.StdEncoding.EncodedLen(len(attaData)))
        base64.StdEncoding.Encode(b, attaData)
        buf.Write(b)
        buf.WriteString(fmt.Sprintf(&amp;quot;\r\n--%s\r\n&amp;quot;, const_boundary))
    }

    fmt.Println(buf.String())
    err := smtp.SendMail(const_smtp_server, nil, sender, receivers, buf.Bytes())

    fmt.Println(&amp;quot;send mail err:&amp;quot;, err)
    return err
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;main.go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    //&amp;quot;flag&amp;quot;
    //&amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
)

func main() {

    //var task string

    //flag.StringVar(&amp;amp;task, &amp;quot;t&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;task id&amp;quot;)
    //flag.Parse()

    //if task == &amp;quot;&amp;quot; {
    //  fmt.Println(&amp;quot;task is required.&amp;quot;)
    //  flag.Usage()
    //  os.Exit(2)
    //}

    testStr := os.Args[1]

    cont := &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p align=\&amp;quot;center\&amp;quot;&amp;gt;表: 1&amp;lt;/p&amp;gt;&amp;lt;table align=\&amp;quot;center\&amp;quot; border=\&amp;quot;1\&amp;quot; cellpadding=\&amp;quot;10\&amp;quot;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;任务ID&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;列1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;列2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;列3&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;quot; + testStr + &amp;quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;quot; + testStr + &amp;quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;quot; + testStr + &amp;quot;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;quot; + testStr + &amp;quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;

    sender := &amp;quot;&amp;quot;
    rcvs := []string{}
    sbj := &amp;quot;test email&amp;quot;
    //  cont := &amp;quot;This is content&amp;quot;
    file := []string{}

    SendEmail(sender, rcvs, sbj, cont, file)

}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>邮件发送原理</title>
        <link>http://lxb.wiki/b0248f59/</link>
        <pubDate>Thu, 08 Jun 2017 10:34:08 +0000</pubDate>
        
        <guid>http://lxb.wiki/b0248f59/</guid>
        <description>&lt;p&gt;SMTP(Simple Mail Transfer Protocol)是电子邮件从客户机传输到服务器或从某一个服务器传输到另一个服务器使用的传输协议。SMTP 是请求/响应协议，命令和响应都是基于 ASCII 文本，并以 CR 和 LF 符结束。响应包括一个表示返回状态的三位数字代码。在 TCP 协议 25 端口监听连接请求。其命令如下：&lt;/p&gt;
&lt;p&gt;SMTP命令&lt;/p&gt;
&lt;p&gt;命令说明&lt;/p&gt;
&lt;p&gt;HELO ＜domain＞＜CRLF＞&lt;/p&gt;
&lt;p&gt;识别发送方到接收SMTP的一个HELO命令&lt;/p&gt;
&lt;p&gt;AUTH LOGIN&lt;/p&gt;
&lt;p&gt;登陆服务器的命令。在这条命令之后，要发送用Base64编码后的用户名与密码进行登陆&lt;/p&gt;
&lt;p&gt;MAIL FROM:＜reverse-path＞＜CRLF＞&lt;/p&gt;
&lt;p&gt;＜reverse-path＞为发送者地址。此命令告诉接收方一个新邮件发送的开始，并对所有的状态和缓冲区进行初始化。此命令开始一个邮件传输处理，最终完成将邮件数据传送到一个或多个邮箱中&lt;/p&gt;
&lt;p&gt;RCPT TO:＜forward-path＞＜CRLF＞&lt;/p&gt;
&lt;p&gt;＜forward-path＞标识各个邮件接收者的地址&lt;/p&gt;
&lt;p&gt;DATA ＜CRLF＞&lt;/p&gt;
&lt;p&gt;接收SMTP将把其后的行为看作邮件数据去处理，以＜CRLF＞.＜CRLF＞标识数据的结尾&lt;/p&gt;
&lt;p&gt;REST ＜CRLF＞&lt;/p&gt;
&lt;p&gt;退出/复位当前的邮件传输&lt;/p&gt;
&lt;p&gt;NOOP ＜CRLF＞&lt;/p&gt;
&lt;p&gt;要求接收SMTP仅做OK应答。（用于测试）&lt;/p&gt;
&lt;p&gt;QUIT ＜CRLF＞&lt;/p&gt;
&lt;p&gt;要求接收SMTP返回一个OK应答并关闭传输。&lt;/p&gt;
&lt;p&gt;VRFY ＜string＞ ＜CRLF＞&lt;/p&gt;
&lt;p&gt;验证指定的邮箱是否存在，由于安全因素，服务器多禁止此命令。&lt;/p&gt;
&lt;p&gt;EXPN ＜string＞ ＜CRLF＞&lt;/p&gt;
&lt;p&gt;验证给定的邮箱列表是否存在，扩充邮箱列表，也常禁止使用。&lt;/p&gt;
&lt;p&gt;HELP ＜CRLF＞&lt;/p&gt;
&lt;p&gt;查询服务器支持什么命令&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;邮件交互图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A-&amp;gt;B: 1. 建立TCP连接(host:port, 默认port为25)
B-&amp;gt;A: 220. Anti-spam GT for Coremail System
Note over A: 
A-&amp;gt;B: 2. 向服务器标识用户身份(HELO host\r\/n)
B-&amp;gt;A: 250 OK
Note over A: 
A-&amp;gt;B: 3. 登录服务器(AUTH LOGIN\r\/n)
B-&amp;gt;A: 334. username: (这里是解密后的信息)
A-&amp;gt;B: &amp;lt;my_username&amp;gt;(要用Base64加密)
B-&amp;gt;A: 334. password: (这里是解密后的信息)
A-&amp;gt;B: &amp;lt;my_password&amp;gt;(要用Base64加密)
B-&amp;gt;A: 235. Authentication successful
Note over A: 
A-&amp;gt;B: 4. 指定发信者(MAIL FROM: &amp;lt;my_sender@gmail.com&amp;gt;\r\/n)
B-&amp;gt;A: 250. Mail OK
Note over A: 
A-&amp;gt;B: 5. 指定收信者(RCPT TO: &amp;lt;my_receiver@gmail.com&amp;gt;\r\/n)
B-&amp;gt;A: 250. Mail OK
Note over A: 
A-&amp;gt;B: 6. 发送数据(DATA\r\/n)
B-&amp;gt;A: 354. End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
Note over A: 
A-&amp;gt;B: 7. to: &amp;lt;my_receiver@gmail.com\r\/nsubject:&amp;lt;my_subject&amp;gt;\r\/nSome Context\r\/n.\r\/n&amp;gt;
B-&amp;gt;A: 250. Mail OK
Note over A: 
A-&amp;gt;B: 8. QUIT\r\/n
B-&amp;gt;A: 221. Bye
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;因markdown里不能打出&amp;quot;\n&amp;quot;, 因此使用&amp;quot;\/n&amp;quot; 代替&amp;quot;\n&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;SMTP发信操作及返回码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[crazywill@localhost crazywill]$ telnet smtp.163.com 25 #telnet登录25端口
Trying 202.108.5.81...
Connected to smtp.163.com.
Escape character is &#39;^]&#39;.
220 163.com Coremail SMTP(Anti Spam) System
EHLO smtp.163.com # 握手 :)
250-mail
250-PIPELINING
250-AUTH LOGIN PLAIN
250-AUTH=LOGIN PLAIN
250 8BITMIME
AUTH LOGIN # 开始认证登录
334 dXNlcm5hbWU6
crazywill
334 UGFzc3dvcmQ6
mypassword
535 Error: authentication failed # 直接用户名密码不能登录
AUTH LOGIN
334 dXNlcm5hbWU6
Y3Jhenl3aWxs
334 UGFzc3dvcmQ6
bXlwYXNzd29yZA==
235 Authentication successful # 使用Base64编码则成功登录
MAIL FROM:&amp;lt;test@163.com&amp;gt; # 邮件发送方
553 You are not authorized to send mail, authentication is required # 不可伪造发送邮件 
MAIL FROM:&amp;lt;crazywill@163.com&amp;gt; # 邮件发送方
250 Mail OK
RCPT TO:&amp;lt;crazywill@163.com&amp;gt; # 邮件的接收方，若有多个收件人，则重复这一语句多次。
250 Mail OK
DATA # 邮件体内容
354 Please start mail input.
TO: crazywill@163.com # 此处的TO，FROM，等内容，可以随便造假 :) 可以骗人但骗不了懂得查看邮件源码的。
FROM: cccc@163.com
SUBJECT: test by telnet/smtp 

test, just a test. # 邮件正文内容，与Header部分空一行开始写
. # 邮件写完，以一个句点加回车结果。
250 Mail OK queued as smtp10,wKjADQ2ApxRnnqBE0CWaEw==.38326S3 # 返回250 表示发送成功。
NOOP # 空语句，不执行任何操作，一般用来保持和服务器连接，不要掉线
250 OK
QUIT # 退出
221 Closing connection. Good bye.
Connection closed by foreign host.
[crazywill@localhost crazywill]$
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;参考资料: &lt;a class=&#34;link&#34; href=&#34;http://www.cnblogs.com/FengYan/archive/2013/01/01/2840982.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用c++发邮件&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/lishuhuakai/article/details/27503503&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;电子邮件发送的原理以及简易实现&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/lishuhuakai/article/details/27852009&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;邮件正文及其附件的发送的C++实现&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/zbird1988/article/details/11592137&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++通过SMTP发送邮件总结&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/zbird1988/article/details/11592137&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++实现向多人发送邮件&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
