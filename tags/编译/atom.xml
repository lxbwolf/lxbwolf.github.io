<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>编译 on Xiaobin&#39;s Notes</title>
        <link>https://lxb.wiki/tags/%E7%BC%96%E8%AF%91/</link>
        <description>Recent content in 编译 on Xiaobin&#39;s Notes</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Feb 2023 22:31:55 +0800</lastBuildDate><atom:link href="https://lxb.wiki/tags/%E7%BC%96%E8%AF%91/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>编译原理一</title>
        <link>https://lxb.wiki/a66c6839/</link>
        <pubDate>Fri, 24 Feb 2023 22:31:55 +0800</pubDate>
        
        <guid>https://lxb.wiki/a66c6839/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;什么是编译原理&#34;&gt;什么是编译原理&lt;/h2&gt;
&lt;p&gt;编译原理是介绍如何将高级程序设计语言转换成计算机硬件能识别的机器语言，以便计算机进行处理&lt;/p&gt;
&lt;h2 id=&#34;编译与计算机程序设计语言的关系&#34;&gt;编译与计算机程序设计语言的关系&lt;/h2&gt;
&lt;p&gt;日常开发过程中我们使用的语言一般都是高级语法比如 JAVA、Python、PHP、JavaScript等等，但是计算机只能识别0、1这样的机器码。那么这些高级语言是如何翻译成机器能识别的0、1等呢？这就用的了&lt;strong&gt;编译&lt;/strong&gt;，首先我们通过下面这幅图看下编译与计算机程序语言的关系，有助于我们直观的了解编译的作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242238073.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;注意：每种机器都对应一种汇编语言&lt;/p&gt;
&lt;h3 id=&#34;程序设计语言的转换方式&#34;&gt;程序设计语言的转换方式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;翻译&lt;/strong&gt;：指把某种语言的源程序，&lt;strong&gt;在不改变语义的条件下&lt;/strong&gt;，转换成另一种语言程序即目标语言程序&lt;/p&gt;
&lt;p&gt;真正的实现有两种方式，编译及解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译&lt;/strong&gt;：专指由高级语言转换为低级语言，&lt;strong&gt;整个程序翻译&lt;/strong&gt;。常用的例如： c、c++，delphi,Fortran、Pascal、Ada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解释&lt;/strong&gt;：接受某种高级语言的一个语句输入，进行解释并控制计算机执行，马上得到这个句子的执行结果，然后再接受下一个语句。类似口译，&lt;strong&gt;一句一句进行解释&lt;/strong&gt;。常用的例如：python 解释以源程序作为输入，&lt;strong&gt;不产生目标程序&lt;/strong&gt;，一边解释一边执行。&lt;strong&gt;优点&lt;/strong&gt;：直观易懂，结构简单，易于实现人机对话。&lt;strong&gt;缺点&lt;/strong&gt;：效率低(不产生目标程序，每次都需要重新执行，速度慢)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编译的转换过程&#34;&gt;编译的转换过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编译-&amp;gt;运行&lt;/li&gt;
&lt;li&gt;编译-&amp;gt;汇编-&amp;gt;运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242240217.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译器在语言处理系统中的位置&#34;&gt;编译器在语言处理系统中的位置&lt;/h2&gt;
&lt;p&gt;了解了编译与程序设计语言的关系，那么我们接下来再来看下编译器在语言处理系统中所处位置，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242243681.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译系统的结构&#34;&gt;编译系统的结构&lt;/h2&gt;
&lt;p&gt;那么机器是如何把高级语言翻译为汇编语言程序或机器语言程序的呢？&lt;/p&gt;
&lt;p&gt;我们先来看下人工进行英文翻译的例子，这里引用的哈工大编译原理中的图示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242245950.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;图中的&lt;strong&gt;中间表示很重要主要起到了一个桥梁的作用&lt;/strong&gt;，比如图中的中间表示可以使用各种语言表示。&lt;/p&gt;
&lt;p&gt;根据上图可以看出要进行语义分析首先需要划分句子成分，那么我们是如何划分句子成分的呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先通过&lt;strong&gt;词法分析分析出句子中各个单词的词性或者词类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接下来通过&lt;strong&gt;语法分析识别出句子中的各类短语从而获得句子的结构&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后进行&lt;strong&gt;语义分析根据句子结构分析出句子中各个短语在句子中充当什么成分&lt;/strong&gt;，从而确定各个名词性成分同各个核心谓语动词间的关系语意关系&lt;/li&gt;
&lt;li&gt;最后给出中间表示形式  &lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242246694.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;  &lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242250835.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt; 实际上编译器在工作的时候也是经过了以上几个步骤，我们成为&lt;strong&gt;阶段(计算机的逻辑组织方式，在实现过程中多个阶段可能会被组合在一起实现)&lt;/strong&gt;，可以分为两大部分：&lt;strong&gt;分析源语言、生成目标代码&lt;/strong&gt;,在编译器中他们分别对应编译器的前端和后端两个部分。编译器的结构如下图   &lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242248147.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt; 了解了编译器的结构，让我们从编译器的前端开始讲起，看看词法分析、语法分析、语义分析等各个阶段都做了什么。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;词法分析扫描&#34;&gt;词法分析(扫描)&lt;/h3&gt;
&lt;p&gt;编译的第一个阶段，从左到右逐行扫描源程序的字符，识别出各个&lt;strong&gt;单词&lt;/strong&gt;(是高级语言中有是在意义的最小语法单元，由字符构成)，&lt;strong&gt;确定单词的类型&lt;/strong&gt;。将识别的单词转换成统一的机内表示即&lt;strong&gt;词法单元 简称Token&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;token:&amp;lt;种别码，属性值&amp;gt;token: &amp;lt;种别码，属性值&amp;gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;单词类型&lt;/th&gt;
&lt;th&gt;种别&lt;/th&gt;
&lt;th&gt;种别码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;关键字&lt;/td&gt;
&lt;td&gt;program、if、else、then&amp;hellip;&lt;/td&gt;
&lt;td&gt;一词一码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;标识符&lt;/td&gt;
&lt;td&gt;变量名、数组名、记录名、过程名&amp;hellip;&lt;/td&gt;
&lt;td&gt;多词一码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;常量&lt;/td&gt;
&lt;td&gt;整型、浮点型、字符型、布尔型&amp;hellip;&lt;/td&gt;
&lt;td&gt;一型一码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;运算符&lt;/td&gt;
&lt;td&gt;算术（+ - * / ++ &amp;ndash;）&lt;!-- raw HTML omitted --&gt;关系（&amp;gt; &amp;lt; == != &amp;gt;= &amp;lt;=） &lt;!-- raw HTML omitted --&gt;逻辑（&amp;amp; | ~）&lt;/td&gt;
&lt;td&gt;一词一码&lt;!-- raw HTML omitted --&gt;或&lt;!-- raw HTML omitted --&gt;一型一码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;界限符&lt;/td&gt;
&lt;td&gt;; ( ) = { }&lt;/td&gt;
&lt;td&gt;一词一码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;名字解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一词一码&lt;/strong&gt;：例如，关键字是唯一的且事先可以确定，为每个关键字分配一个种别码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多词一码&lt;/strong&gt;：例如，所有的标示符统一作为一类单词分配同一个种别码，为了区分不同的标示符，用token的第二个分量“属性值”存放不同标示符具体的字面值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一型一码&lt;/strong&gt;：不同类型的常量他们的构成方式是不同的，例如，我们为每种类型的常量分配一个种别码，为了区分同一类型下的不同常量，也用token的第二个分量“属性值”存放每个常量具体的值 下面图中是一个词法分析后得到的token序列的例子&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242300575.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;描述词法规则的有效工具是&lt;strong&gt;正规式&lt;/strong&gt;和&lt;strong&gt;有限自动机&lt;/strong&gt;。&lt;strong&gt;正规式&lt;/strong&gt;:用来确定单词是否和程序语言规范。&lt;strong&gt;有限自动机&lt;/strong&gt;：通过有限自动机进行单词和正规式比较&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法分析parsing&#34;&gt;语法分析(parsing)&lt;/h3&gt;
&lt;h4 id=&#34;语法分析的定义&#34;&gt;语法分析的定义&lt;/h4&gt;
&lt;p&gt;语法分析器从词法分析器输出的&lt;strong&gt;token序列中识别出各类短语，并构造语法分析树&lt;/strong&gt;(parse tree),语法分析树描述了&lt;strong&gt;句子的语法结构&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;语法分析的规则&#34;&gt;语法分析的规则&lt;/h4&gt;
&lt;p&gt;即&lt;strong&gt;语法规则&lt;/strong&gt;又称&lt;strong&gt;文法&lt;/strong&gt;，规定了单词如何构成短语、句子、过程和程序。&lt;/p&gt;
&lt;p&gt;语法规则的标示如下，含义是A定义为B或者C&lt;/p&gt;
&lt;p&gt;BNF:A::=B∣CBNF:A::=B|C&lt;/p&gt;
&lt;p&gt;&amp;lt;句子&amp;gt;::=&amp;lt;主&amp;gt;&amp;lt;谓&amp;gt;&amp;lt;宾&amp;gt;&amp;lt;句子&amp;gt;::=&amp;lt;主&amp;gt;&amp;lt;谓&amp;gt;&amp;lt;宾&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;主&amp;gt;::=&amp;lt;定&amp;gt;&amp;lt;名&amp;gt;&amp;lt;主&amp;gt;::=&amp;lt;定&amp;gt;&amp;lt;名&amp;gt;&lt;/p&gt;
&lt;p&gt;来看下赋值语句的语法规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A::=V=E&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E::=T|E+T&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T::=F|T*F&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F::=V|(E)|C&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V::=标示符&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C::=常数&lt;/strong&gt; &lt;strong&gt;即由标示符或者常数的表达式进行加减乘除运算&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;语法分析的方法&#34;&gt;语法分析的方法&lt;/h4&gt;
&lt;p&gt;推导(derive)和归约(reduce)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推导&lt;/strong&gt;：最左推导、最右推导&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;归约&lt;/strong&gt;：最右归约、最左归约,推导的逆过程就是归约&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最右推导、最左归约：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242302837.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最左推导、最右归约：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242303370.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;语法树&#34;&gt;语法树&lt;/h4&gt;
&lt;p&gt;计算机通过&lt;strong&gt;语法树&lt;/strong&gt;来进行分析，即语法分析过程也可以用一颗倒着的树来标示，这颗树叫&lt;strong&gt;语法树&lt;/strong&gt;。正确的语法树叶子节点数必须是表达式的符号，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242303395.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;赋值语句的分析树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242304331.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;变量声明语句的分析树：&lt;/p&gt;
&lt;p&gt;首先看下变量声明语句的文法(&lt;strong&gt;文法是由一系列规则构成的&lt;/strong&gt;)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;D&amp;gt; -&amp;gt; &amp;lt;T&amp;gt; &amp;lt;IDS&amp;gt;;
&amp;lt;T&amp;gt; -&amp;gt; int | real | char | bool
&amp;lt;IDS&amp;gt; -&amp;gt; id | &amp;lt;IDS&amp;gt;, id
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242305150.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;语义分析&#34;&gt;语义分析&lt;/h3&gt;
&lt;p&gt;语义的任务主要有两个&lt;/p&gt;
&lt;h4 id=&#34;一-收集标识符的属性信息&#34;&gt;一. 收集标识符的属性信息&lt;/h4&gt;
&lt;h4 id=&#34;二-语义检查&#34;&gt;二. 语义检查&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;变量或过程&lt;strong&gt;未经声明就使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;变量或过程名&lt;strong&gt;重复声明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;运算分量&lt;strong&gt;类型不匹配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作符与操作数之间的类型不匹配&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组下标&lt;/strong&gt;不是整数&lt;/li&gt;
&lt;li&gt;对&lt;strong&gt;非数组变量&lt;/strong&gt;使用数组访问操作符&lt;/li&gt;
&lt;li&gt;对&lt;strong&gt;非过程名&lt;/strong&gt;使用过程调用操作符&lt;/li&gt;
&lt;li&gt;过程调用的**参数类型或数目不匹配 **&lt;/li&gt;
&lt;li&gt;函数&lt;strong&gt;返回类型&lt;/strong&gt;有误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中间代码生成&#34;&gt;中间代码生成&lt;/h3&gt;
&lt;p&gt;通常和语义分析一起实现。对语法分析识别出的各类语法范畴，分析他的含义，进行初步翻译，产生介于源代码和目标代码质检的一种代码&lt;/p&gt;
&lt;h4 id=&#34;常用的中间代码表示形式&#34;&gt;常用的中间代码表示形式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;三地址码&lt;/strong&gt; (Three-address Code)：三地址码由类似于汇编语言的指令序列组成，每个指令最多有三个操作数(operand)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语法结构树/语法树&lt;/strong&gt; (Syntax Trees)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逆波兰式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三地址指令的表示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;四元式&lt;/strong&gt; (Quadruples)，(op, y, z, x)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三元式&lt;/strong&gt; (Triples)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;间接三元式&lt;/strong&gt;(Indirect triples)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242305150.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;下面图中展示了一个中间代码生成的例子 &lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242308231.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码优化&#34;&gt;代码优化&lt;/h3&gt;
&lt;p&gt;对前面生成的中间代码进行加工变换，以便在最后极端产生更为高效的目标代码 ，&lt;strong&gt;需要遵循等价变换的原则&lt;/strong&gt;，优化的方面包括：公共子表达式的提取、合并已知量、删除无用语句、循环优化。&lt;/p&gt;
&lt;h3 id=&#34;目标代码生成&#34;&gt;目标代码生成&lt;/h3&gt;
&lt;p&gt;把经过优化的中间代码转化成特定机器上的低级语言&lt;/p&gt;
&lt;p&gt;目标代码的形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;绝对指令代码：可立即执行的目标代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;汇编指令代码：汇编语言程序，需要经过汇编陈旭汇编后才能运行&lt;/li&gt;
&lt;li&gt;可重定位指令代码：先将各目标模块连接起来，确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;h4 id=&#34;出错处理&#34;&gt;出错处理&lt;/h4&gt;
&lt;p&gt;如果源程序有错误，编译程序应设法发现错误并报告给用户。由专门的出错处理程序来完成。 错误类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法错误：在词法分析和语法分析阶段检测出来&lt;/li&gt;
&lt;li&gt;语义错误：一般在语义分析阶段检测&lt;/li&gt;
&lt;li&gt;逻辑错误：不可检测，比如死循环，一般不处理因为没办法在编译阶段检测出来&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;遍&#34;&gt;遍&lt;/h4&gt;
&lt;p&gt;指对源程序或源程序的中间结果从头到尾扫描一次，并做有关的加工处理，生成新的中间结果或目标代码。&lt;strong&gt;遍与阶段的含义毫无关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多遍扫描： &lt;strong&gt;优点&lt;/strong&gt;：节省内存空间，提高目标代码的质量，使编译的逻辑结构清晰。&lt;strong&gt;缺点&lt;/strong&gt;：编译时间长。在内存许可的情况下还是遍数尽可能少较好 &lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/202310242309680.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译程序生成&#34;&gt;编译程序生成&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;直接用机器语言编写编译程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用汇编语言编写编译程序&lt;/strong&gt;，编译程序核心部分常用汇编语言编写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用高级语言编写编译程序&lt;/strong&gt;，这也是普遍采用的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自编译&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译工具&lt;/strong&gt; LEX（语法分析）与YACC(用于自动生成LALR分析表)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移植&lt;/strong&gt;(同种语言的编译程序在不同类型的机器之 间移植) 在某机器上为某种语言构造编译程序要掌握以下三方面:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;源语言&lt;/li&gt;
&lt;li&gt;目标语言&lt;/li&gt;
&lt;li&gt;编译方法&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
