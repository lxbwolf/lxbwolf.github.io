<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>nginx on Xiaobin&#39;s Blog</title>
        <link>https://lxb.wiki/tags/nginx/</link>
        <description>Recent content in nginx on Xiaobin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 02 Jun 2018 22:35:47 +0000</lastBuildDate><atom:link href="https://lxb.wiki/tags/nginx/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>nginx 配置中的rewrite</title>
        <link>https://lxb.wiki/389c639/</link>
        <pubDate>Sat, 02 Jun 2018 22:35:47 +0000</pubDate>
        
        <guid>https://lxb.wiki/389c639/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rewrite regex replacement flag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;flag有如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;last&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;break 中止 rewrite, 不再继续匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redirect 返回临时重定向的 HTTP 状态302&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;permanet 返回永久重定向的 HTTP 状态301&lt;/p&gt;
&lt;p&gt;last 和 break 的不同:&lt;br&gt;
break 是终止当前location 的 rewrite 检测, 且不再进行 location 匹配;&lt;br&gt;
last是终止当前location的rewrite检测,但会继续重试location匹配并处理区块中的rewrite规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;下面是可以用来判断的表达式:
&lt;code&gt;-f&lt;/code&gt; 和&lt;code&gt;!-f&lt;/code&gt; 判断是否存在文件
&lt;code&gt;-d&lt;/code&gt; 和&lt;code&gt;!-d&lt;/code&gt; 判断是否存在目录
&lt;code&gt;-e&lt;/code&gt; 和&lt;code&gt;!-e&lt;/code&gt; 判断是否存在文件或目录
&lt;code&gt;-x&lt;/code&gt; 和&lt;code&gt;!-x&lt;/code&gt; 判断文件是否可执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.下面是可以用作判断的全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$args 等于请求行中的参数&lt;/li&gt;
&lt;li&gt;$content_length 请求头中的&lt;code&gt;Content-length&lt;/code&gt; 字段&lt;/li&gt;
&lt;li&gt;$content_type 请求头中的&lt;code&gt;Content-Type&lt;/code&gt; 字段&lt;/li&gt;
&lt;li&gt;$document_root 当前请求在&lt;code&gt;root&lt;/code&gt; 指令中指定的值&lt;/li&gt;
&lt;li&gt;$host 请求主机头字段, 否则为服务器名称&lt;/li&gt;
&lt;li&gt;$http_user_agent 客户端&lt;code&gt;agent&lt;/code&gt; 信息&lt;/li&gt;
&lt;li&gt;$http_cookie 客户端&lt;code&gt;cookie&lt;/code&gt; 信息&lt;/li&gt;
&lt;li&gt;$limit_rate 这个变量可以限制连接速率&lt;/li&gt;
&lt;li&gt;$request_body_file 客户端请求主题信息的临时文件名&lt;/li&gt;
&lt;li&gt;$request_method #客户端请求的动作，通常为GET或POST。&lt;/li&gt;
&lt;li&gt;$remote_addr #客户端的IP地址。&lt;/li&gt;
&lt;li&gt;$remote_port #客户端的端口。&lt;/li&gt;
&lt;li&gt;$remote_user #已经经过Auth Basic Module验证的用户名。&lt;/li&gt;
&lt;li&gt;$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$query_string&lt;/code&gt; #与$args相同。&lt;/li&gt;
&lt;li&gt;$scheme #HTTP方法（如http，https）。&lt;/li&gt;
&lt;li&gt;$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。&lt;/li&gt;
&lt;li&gt;$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。&lt;/li&gt;
&lt;li&gt;$server_name #服务器名称。&lt;/li&gt;
&lt;li&gt;$server_port #请求到达服务器的端口号。&lt;/li&gt;
&lt;li&gt;$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_uri&lt;/code&gt; #与&lt;code&gt;$uri&lt;/code&gt;相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;http://localhost:88/test1/test2/test.php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$host: &lt;span style=&#34;color:#e6db74&#34;&gt;localhost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$server_post: &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$request_uri: &lt;span style=&#34;color:#e6db74&#34;&gt;http://localhost:88/test1/test2/test.php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$document_uri: &lt;span style=&#34;color:#e6db74&#34;&gt;/test1/test2/test.php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$document_root: &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/nginx/html&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(在nginx.conf里配置的)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$request_filename: &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/share/nginx/html/test1/test2/test.php&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(在nginx.conf里配置的)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;详例:&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;多目录转成参数&lt;/em&gt;&lt;br&gt;
&lt;code&gt;abc.domain.com/sort/2&lt;/code&gt; =&amp;gt; &lt;code&gt;abc.domain.com/index.php?act=sort&amp;amp;name=abc&amp;amp;id=2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;$host ~&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(.*)\.domain\.com)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;set&lt;/span&gt; $sub_name $1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;rewrite&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^/sort\/(\d+)\/?&lt;/span&gt;$ &lt;span style=&#34;color:#e6db74&#34;&gt;/index.php?act=sort&amp;amp;cid=&lt;/span&gt;$sub_name&amp;amp;id=$1 &lt;span style=&#34;color:#e6db74&#34;&gt;last&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;目录对换&lt;/em&gt;&lt;br&gt;
&lt;code&gt;/123456/xxxx&lt;/code&gt; =&amp;gt; &lt;code&gt;/xxxx?id=123456&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rewrite&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^/(\d+)\/(.+)/&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;$2?id=$1 &lt;span style=&#34;color:#e6db74&#34;&gt;last&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rewrite&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^/\/(\d+)\/(\w+)\/?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;$2?id=$1 &lt;span style=&#34;color:#e6db74&#34;&gt;last&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;如果使用IE浏览器, 则重定向到/nginx-ie 目录下&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;$http_user_agent ~ &lt;span style=&#34;color:#e6db74&#34;&gt;MSIE)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;rewrite&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^(.*)&lt;/span&gt;$ &lt;span style=&#34;color:#e6db74&#34;&gt;/nginx-ie/&lt;/span&gt;$1 &lt;span style=&#34;color:#e6db74&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;目录自动加 /&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;(-d&lt;/span&gt; $request_filename&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;rewrite&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^/(.*)([^/])&lt;/span&gt;$ &lt;span style=&#34;color:#e6db74&#34;&gt;http://&lt;/span&gt;$host/$1$2/ &lt;span style=&#34;color:#e6db74&#34;&gt;permanent&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;禁止htaccess&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;/\.ht&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;deny&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;all&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;禁止多个目录&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;^/(cron|templates)/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;deny&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;all&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;禁止以/data开头的文件&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;可以禁止/data/下多级目录下.log.txt等请求&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;^/data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;deny&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;all&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;禁止单个目录&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;不能禁止.log.txt能请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/searchword/cron/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;deny&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;all&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;禁止单个文件&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;/data/sql/data.sql&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;deny&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;all&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;给 favicon.ico和 robots.txt设置过期时间;&lt;/em&gt;&lt;br&gt;
这里为 favicon.ico为99 天,robots.txt 为 7 天并不记录 404 错误日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;(favicon.ico)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;2.&lt;/span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;log_not_found&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;3.&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;expires&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;99d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;4.&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;5.&lt;/span&gt;          &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;(robots.txt)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;8.&lt;/span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;log_not_found&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;9.&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;expires&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;7d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;10.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;11.&lt;/span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;设定某个文件的过期时间;这里为600秒，并不记录访问日志&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     location ^~ /html/scripts/loadhead_1.js {
2.                      access_log   off;
3.                      root /opt/lampp/htdocs/web;
4.     expires 600;
5.     break;
6.            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;文件反盗链并设置过期时间&lt;/em&gt;&lt;br&gt;
这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求&lt;br&gt;
“rewrite ^/ &lt;a class=&#34;link&#34; href=&#34;http://leech.c1gstudio.com/leech.gif;&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://leech.c1gstudio.com/leech.gif;&lt;/a&gt;”显示一张防盗链图片&lt;br&gt;
“access_log off;”不记录访问日志，减轻压力&lt;br&gt;
“expires 3d”所有文件3天的浏览器缓存&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     location ~* ^.+\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ {
2.     valid_referers none blocked *.c1gstudio.com *.c1gstudio.net localhost 208.97.167.194;
3.     if ($invalid_referer) {
4.         rewrite ^/ http://leech.c1gstudio.com/leech.gif;
5.         return 412;
6.         break;
7.     }
8.                      access_log   off;
9.                      root /opt/lampp/htdocs/web;
10. expires 3d;
11. break;
12.      }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;只充许固定ip访问网站，并加上密码&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     root  /opt/htdocs/www;
2.     allow   208.97.167.194;
3.     allow   222.33.1.2;
4.     allow   231.152.49.4;
5.     deny    all;
6.     auth_basic &amp;quot;C1G_ADMIN&amp;quot;;
7.     auth_basic_user_file htpasswd;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;将多级目录下的文件转成一个文件，增强seo效果&lt;/em&gt;&lt;br&gt;
&lt;code&gt;/job-123-456-789.html&lt;/code&gt; 指向 &lt;code&gt;/job/123/456/789.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)\.html$ /job/$1/$2/jobshow_$3.html last;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;将根目录下某个文件夹指向2级目录&lt;/em&gt;&lt;br&gt;
如&lt;code&gt;/shanghaijob/&lt;/code&gt; 指向 &lt;code&gt;/area/shanghai/&lt;/code&gt; 如果你将last改成permanent，那么浏览器地址栏显是 &lt;code&gt;/location/shanghai/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面例子有个问题是访问/shanghai 时将不会匹配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     rewrite ^/([0-9a-z]+)job$ /area/$1/ last;
2.     rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样/shanghai 也可以访问了，但页面中的相对链接无法使用， 如&lt;code&gt;./list_1.html&lt;/code&gt;真实地址是&lt;code&gt;/area /shanghia/list_1.html&lt;/code&gt;会变成&lt;code&gt;/list_1.html&lt;/code&gt;,导至无法访问。&lt;br&gt;
那我加上自动跳转也是不行咯 &lt;code&gt;(-d $request_filename)&lt;/code&gt;它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     if (-d $request_filename){
2.     rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
3.     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;知道原因后就好办了，让我手动跳转吧&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     rewrite ^/([0-9a-z]+)job$ /$1job/ permanent;
2.     rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;文件和目录不存在的时候重定向：&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     if (!-e $request_filename) {
2.     proxy_pass http://127.0.0.1;
3.     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;域名跳转&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     server
2.          {
3.                  listen       80;
4.                  server_name  jump.c1gstudio.com;
5.                  index index.html index.htm index.php;
6.                  root  /opt/lampp/htdocs/www;
7.                  rewrite ^/ http://www.c1gstudio.com/;
8.                  access_log  off;
9.          }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;多域名转向&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     server_name  www.c1gstudio.com www.c1gstudio.net;
2.                  index index.html index.htm index.php;
3.                  root  /opt/lampp/htdocs;
4.     if ($host ~ &amp;quot;c1gstudio\.net&amp;quot;) {
5.     rewrite ^(.*) http://www.c1gstudio.com$1 permanent;
6.     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;三级域名跳转&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     if ($http_host ~* &amp;quot;^(.*)\.i\.c1gstudio\.com$&amp;quot;) {
2.     rewrite ^(.*) http://top.yingjiesheng.com$1;
3.     break;
4.     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;域名镜向&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     server
2.          {
3.                  listen       80;
4.                  server_name  mirror.c1gstudio.com;
5.                  index index.html index.htm index.php;
6.                  root  /opt/lampp/htdocs/www;
7.                  rewrite ^/(.*) http://www.c1gstudio.com/$1 last;
8.                  access_log  off;
9.          }
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>nginx配置中的location</title>
        <link>https://lxb.wiki/a209000e/</link>
        <pubDate>Sat, 02 Jun 2018 22:30:30 +0000</pubDate>
        
        <guid>https://lxb.wiki/a209000e/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;location [=|~|~*|^~] /uri/ {...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上下文: &lt;code&gt;server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此命令随URL 不同而接受不同的结构. 可以配置使用常规字符串和正则表达式. 若使用正则表达式, 则必须使用&lt;code&gt;~*&lt;/code&gt;前缀(选择不区分大小写的匹配) 或&lt;code&gt;~&lt;/code&gt;前缀(区分大小写的匹配)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; 表示&lt;code&gt;uri&lt;/code&gt; 以某个常规字符串开头, 理解为匹配url 路径即可. nginx 不对url 做编码, 因此请求为&lt;code&gt;/static/%20%/aa&lt;/code&gt; 可以被规则&lt;code&gt;^~ /static/ /aa&lt;/code&gt; (有空格) 匹配到.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; 表示区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~*&lt;/code&gt; 表示不区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!~&lt;/code&gt; 和 &lt;code&gt;!~*&lt;/code&gt; 分别为区分大小写不匹配 和 不区分大小写不匹配 的正则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; 通用匹配, 任何请求都会匹配到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个&lt;code&gt;location&lt;/code&gt; 配置的情况下, 匹配顺序为:&lt;/p&gt;
&lt;p&gt;先匹配&lt;code&gt;=&lt;/code&gt;, 其次匹配&lt;code&gt;^~&lt;/code&gt;, 再匹配按文件中顺序的正则匹配, 最后匹配&lt;code&gt;/&lt;/code&gt;. 当有匹配成功的时候, 停止匹配, 按当前匹配规则处理请求.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例1:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则A
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/login&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则B
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/static&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则C
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;\.(gif|jpg|png|js|css)$&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则D
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;\.png&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则E
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;\.xhtml&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则F
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!~*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;\.xhtml&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则G
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 规则H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;产生效果如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问&lt;code&gt;/&lt;/code&gt; 根目录, 如&lt;code&gt;http://localhost/&lt;/code&gt; 将匹配规则A&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/login&lt;/code&gt; 将匹配规则B; &lt;code&gt;http://localhost/register&lt;/code&gt; 将匹配规则H&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/static/a.html&lt;/code&gt; 将匹配规则C&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/a.png&lt;/code&gt; 讲匹配规则D 和规则E, 但规则D 顺序优先, 规则E 不起作用&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/static/c.png&lt;/code&gt; 优先匹配到规则C&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/a.PNG&lt;/code&gt; 将匹配规则E&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/a.xhtml&lt;/code&gt; 不会匹配到规则F 和规则G, &lt;code&gt;http://localhost/a.XHTML&lt;/code&gt; 不会匹配到规则G&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;http://localhost/category/id/1111&lt;/code&gt; 匹配到规则H, 因为以上规则都不匹配, 这个时候应该是nginx 转发给后端应用服务器, 如FastCGI(php), tomcat(jsp), nginx 作为反向代理服务器存在.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以实际使用中, 通常有至少三个匹配规则定义, 如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 第一个必选规则 直接匹配网站根, 通过域名访问网站首页比较频繁, 使用这个会加速处理; 这里直接转发给后端应用服务器了, 也可以是一个静态首页
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://tomcat:8080/index&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 第二个必选规则 处理静态文件请求, 这是nginx 作为http 服务器的强项. 有如下两种配置模式, 目录匹配或后缀匹配, 任选其一或搭配使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/static/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/webroot/static/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;\.(gif|jpg|jpeg|png|css|js|ico)&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/webroot/res/&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 第三个必选规则 通用规则, 用来转发动态请求到后端应用服务器. 非静态文件请求就默认是动态请求. 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://tomcat:8080/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>nginx 寻找index 原理</title>
        <link>https://lxb.wiki/ab14d5fa/</link>
        <pubDate>Fri, 01 Jun 2018 22:32:04 +0000</pubDate>
        
        <guid>https://lxb.wiki/ab14d5fa/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;1. nginx 是怎么找index.php 文件的&lt;/strong&gt;&lt;br&gt;
当nginx发现需要&lt;code&gt;/web/echo/index.php&lt;/code&gt; 文件时, 就会向内核发起 IO 系统调用(因为要跟硬件打交道, 这里的硬件是指硬盘, 通常需要靠内核来操作, 而内核提供的这些功能是通过系统调用来实现的), 告诉内核, 我需要这个文件, 内核从&lt;code&gt;/&lt;/code&gt; 开始找到&lt;code&gt;web&lt;/code&gt; 目录, 再在&lt;code&gt;web&lt;/code&gt; 目录下找到&lt;code&gt;echo&lt;/code&gt; 目录, 最后在&lt;code&gt;echo&lt;/code&gt; 目录下找到&lt;code&gt;index.php&lt;/code&gt; 文件, 于是把这个&lt;code&gt;index.php&lt;/code&gt; 从硬盘上读取到内核自身的内存空间, 然后再把这个文件复制到nginx进程所在的内存空间, 于是 nginx就得到了自己想要的文件了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 寻找文件在文件系统层面是怎么操作的&lt;/strong&gt;&lt;br&gt;
如, nginx 需要得到&lt;code&gt;/web/echo/index.php&lt;/code&gt; 这个文件 每个分区(像ext3 等文件系统, block块是文件存储的最小单元, 默认是4096字节) 都是包含元数据区和数据区, 每个文件在元数据区都有元数据条目(一般是128字节大小), 每个条目都有一个编号, 称之为 inode(index node), 这个inode 里包含 文件类型, 权限, 连接次数, 属主和数组的 ID&amp;amp;时间戳, 这个文件占据了哪些磁盘块也就是块的编号(block, 每个文件可以占用多个 block, 且 block 不一定是连续的, 每个 block 都有编号), 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201207010354.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;目录其实也是普通文件, 也需要占用磁盘块, 目录不是一个容器. 默认创建的目录大小为4096字节, 即只需要占用一个磁盘块, 但这是不确定的. 所以要找到目录也是需要到元数据区里找到对应的条目, 只要找到对应的inode就可以找到目录所占用的磁盘块. 目录里存着一张表(映射表), 里面放着 目录或文件的名称和对应的inode号, 如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件名称(只是字符串)&lt;/td&gt;
&lt;td&gt;inode 号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.txt&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;假如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/           在数据区占据1, 2号 block, &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; 其实也是一个目录, 里面有两个目录, web 和 &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;web         占据5号 block, 是目录, 里面有2个目录 echo 和 data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo        占据11号 block, 是目录, 里面有一个文件 index.php
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index.php   占据15, 16号 block, 是文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其在文件系统中分布如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201207010430.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那么内核究竟是怎么找到&lt;code&gt;index.php&lt;/code&gt; 这个文件的呢? 内核拿到 nginx 的 IO 系统调用要获取&lt;code&gt;/web/echo/index.php&lt;/code&gt; 这个文件请求之后,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 内核读取元数据区 / 的inode, 从 inode 里读取 / 所对应的数据块的编号, 然后在数据区找到其对应的块(1, 2号块), 读取1号块上的映射表找到 web 这个名称在元数据区对应的 inode 号
2. 内核读取 web 对应的 inode(3号), 从中得到 web 在数据区对应的块是5号块, 于是到数据区找到5号块, 从中读取映射表, 知道 echo 对应的 inode 是5号, 于是到元数据区找到5号 inode
3. 内核读取5号 inode, 得到 echo 在数据区对应的事11号块, 于是到数据区读取11号块得到映射表, 得到index.php 对应的 inode 事9号
4. 内核到元数据区读取9号 inode, 得到 index.php 对应的事15号和16号数据块, 于是就到数据区域找到15 16号块, 读取其中的内容, 得到 index.php 的完整内容
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
