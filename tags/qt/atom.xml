<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>qt on Xiaobin&#39;s Blog</title>
        <link>https://lxb.wiki/tags/qt/</link>
        <description>Recent content in qt on Xiaobin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 22 May 2018 11:12:38 +0000</lastBuildDate><atom:link href="https://lxb.wiki/tags/qt/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>qt 同步方式发送post 请求</title>
        <link>https://lxb.wiki/c57f4e3b/</link>
        <pubDate>Tue, 22 May 2018 11:12:38 +0000</pubDate>
        
        <guid>https://lxb.wiki/c57f4e3b/</guid>
        <description>&lt;p&gt;不成功的方式: 1. QNetworkReply的isFinished()函数, 通过while循环判断reply是否已经结束, 结束后再调用readAll()读取响应信息, 结果与判断isRunning() 方式结果一样, 都会进入死循环, 没有响应. 2. QNetworkReply继承自QIODevice, 尝试调用QIODevice的waitForReadyRead()方法, 结果不阻塞, 直接返回&lt;/p&gt;
&lt;p&gt;成功的方式: 使用QEventLoop来阻塞运行, 知道信号发出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QNetworkReply *reply = _manager-&amp;gt;post(QNetworkRequest(QUrl(SERVER_URL)), data);
QByteArray responseData;
QEventLoop eventLoop;
connect(_manager, SIGNAL(finished(QNetworkReply*)), &amp;amp;eventLoop, SLOT(quit()));
eventLoop.exec();       //block until finish
responseData = reply-&amp;gt;readAll();
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>qt 程序打包</title>
        <link>https://lxb.wiki/7e8574d1/</link>
        <pubDate>Thu, 03 May 2018 23:03:09 +0000</pubDate>
        
        <guid>https://lxb.wiki/7e8574d1/</guid>
        <description>&lt;h6 id=&#34;设置程序图标&#34;&gt;设置程序图标&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;把ico文件放到源文件目录下, 命名为&amp;quot;test.ico&amp;quot;&lt;/li&gt;
&lt;li&gt;创建一个&lt;code&gt;myico.rc&lt;/code&gt; 文件, 输入如下内容 &lt;code&gt;IDI_ICON1 ICON DISCARDABLE &amp;quot;test.ico&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在pro文件写入 &lt;code&gt;RC_FILE = myico.rc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行qmake, 编译&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;编译-打包&#34;&gt;编译, 打包&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;选择release编译运行&lt;/li&gt;
&lt;li&gt;将生成的exe文件放到某个路径下, 如 &lt;code&gt;Desktop/Test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在cmd里, 进入到exe存放路径, 使用wendeployqt工具拷贝exe运行需要的dll&lt;/li&gt;
&lt;li&gt;使用Inno Setup Compiler生成安装文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;inno-setup-工具使用注意事项&#34;&gt;Inno Setup 工具使用注意事项&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;添加主执行文件外的其他应用程序文件夹下的文件时, 需要编辑一次, 重新指定目标子文件夹&lt;/li&gt;
&lt;li&gt;编译脚本为&lt;code&gt;*.iss&lt;/code&gt; 文件, 编译后默认在源exe的Base 目录下生成Output文件夹, 指定的setup.exe文件生成在Output 文件夹下&lt;/li&gt;
&lt;li&gt;Inno Setup 工具基础版不支持中文. 如需显示中文, 需要找汉化版&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Qt 工程的几种文件</title>
        <link>https://lxb.wiki/924904f6/</link>
        <pubDate>Fri, 20 Apr 2018 22:25:51 +0000</pubDate>
        
        <guid>https://lxb.wiki/924904f6/</guid>
        <description>&lt;h4 id=&#34;pro&#34;&gt;&lt;code&gt;*.pro&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;qmake的工程(project)文件 例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATE = app
CONFIG += QT
QT += core gui

TARGET = somename

SOURCES += main.cpp \
          widget.cpp
HEADERS += widget.h
FORMS += widget.ui
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;前三行是qmake的默认值, 都可以省略&lt;/li&gt;
&lt;li&gt;TARGET 行指定工程名, 也可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pri&#34;&gt;&lt;code&gt;*.pri&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;include 文件 接上面的例子, 我们可以将源文件的设置独立处理, 放到somename.pri文件内:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SOURCES += main.cpp \
          widget.cpp
HEADERS += widget.h
FORMS += widget.ui
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时, pro 文件就可以简化为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATE = app
CONFIG += QT
QT += core gui

TARGET = somename
include(somename.pri)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;prf&#34;&gt;&lt;code&gt;*.prf&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;特性(feature) 文件 和pri文件类似, prf文件也是要被包含进pro文件. 只是它更隐蔽.&lt;/p&gt;
&lt;p&gt;在上面的例子中, 其实已经用到了prf, 就是 &lt;code&gt;CONFIG += QT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当在CONFIG 中指定一个值时, qmake就会尝试去加载相应的feature文件: - Qt安装目录下的&lt;code&gt;mkspecs/features/qt.prf&lt;/code&gt; - features 文件的文件名必须小写&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;win32:CONFIG += console // 为win32程序添加控制台
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把该文件命名为&lt;code&gt;a.prf&lt;/code&gt;, 放到前面提到的目录中, 然后在pro文件内添加 &lt;code&gt;CONFIG += a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;也可以使用load命令来加载prf文件 &lt;code&gt;load(a)&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Qt UI 编码规范</title>
        <link>https://lxb.wiki/9c64b54d/</link>
        <pubDate>Mon, 02 Apr 2018 11:27:52 +0000</pubDate>
        
        <guid>https://lxb.wiki/9c64b54d/</guid>
        <description>&lt;h5 id=&#34;变量声明&#34;&gt;变量声明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每行只声明一个变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免使用短的/无意义的命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当一个变量被用到时再声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Wrong
int a, b;
char* c, * d;

// Correct
int height;
int width;
char* nameOfOne;
char* nameOfOther;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;变量命名&#34;&gt;变量命名&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量名/函数名采用驼峰命名法(lowerCaseCamel), 首字母缩写词出现的命名中, 缩写也用驼峰命名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Wrong 
short Cntr;
char ITEM_DELIM = &#39;&#39;;

void myXMLStreamReader();

// Correct
short counter;
char itemDelimiter = &#39;&#39;;

void myXmlStreamReader();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;空行空格&#34;&gt;空行/空格&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用一个且仅用一个空行在适当的地方划分代码块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在关键词和小括号之间总是只用一个空格符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Wrong
if(foo)
{
}

// Correct
if (foo)
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;指针引用&#34;&gt;指针/引用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在类型名和&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;&amp;amp;&lt;/code&gt;之间没有空格, 在&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;&amp;amp;&lt;/code&gt;与变量名之间有一个空格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char* someValue;
const QString&amp;amp; myString;
const char* const WOR = &amp;quot;hello&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;符号与空格&#34;&gt;符号与空格&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;二元操作符左右两边都有一个空格&lt;/li&gt;
&lt;li&gt;一元操作符与变量之间不留空格&lt;/li&gt;
&lt;li&gt;逗号左右没有空格, 右边一个空格&lt;/li&gt;
&lt;li&gt;分号左边没有空格; 分号作为语句的结束符, 右边一般不再有内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;号右边没有空格&lt;/li&gt;
&lt;li&gt;左引号的左边和右引号的各一个空格, 左引号的右边和右引号的左边没有空格&lt;/li&gt;
&lt;li&gt;如果右引号右边是右括号, 它们之间没有空格&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;cast&#34;&gt;cast&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免C语言的cast, 尽量用C++的cast(static_cast, const_cast, reinterpret_cast). reinterpret_cast 和 C风格的cast用起来都是危险的，但至少 reinterpret_cast 不会把const修饰符去掉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;涉及到QObjects或重构自己的代码时，不要使用dynamic_cast,而是用qobject_cast，例如在引进一个类型的方法时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用构造函数去cast简单类型,例如：用int(myFloat)代替(int)myFloat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Wrong
char* blockOfMemory = (char* ) malloc(data.size());

// Correct
char *blockOfMemory = reinterpret_cast&amp;lt;char *&amp;gt;(malloc(data.size()));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;语句&#34;&gt;语句&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;不要在一行写多条语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;括号&#34;&gt;括号&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个大括号单独一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不论条件语句的执行部分有几行, 必须使用大括号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小括号用来给语句分组&lt;/p&gt;
&lt;p&gt;// Wrong
if (address.isEmpty()) {
return false;
}&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 10; +&amp;lsquo;&amp;lsquo;i) {
qDebug(&amp;quot;%i&amp;quot;, i);
}&lt;/p&gt;
&lt;p&gt;// Correct
if (address.isEmpty())
{
return false;
}
else
{
return true;
}&lt;/p&gt;
&lt;p&gt;for (int i = 0; i &amp;lt; 10;i)
{
qDebug(&amp;quot;%i&amp;quot;, i);
}&lt;/p&gt;
&lt;p&gt;// Wrong
if (a &amp;amp;&amp;amp; b || c)&lt;/p&gt;
&lt;p&gt;// Correct
if ((a &amp;amp;&amp;amp; b) || c)&lt;/p&gt;
&lt;p&gt;// Wrong
a + b &amp;amp; c&lt;/p&gt;
&lt;p&gt;// Correct
(a + b) &amp;amp; c&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;switch语句&#34;&gt;switch语句&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;case缩进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除enum外, 每组case最后都要加default;&lt;/p&gt;
&lt;p&gt;switch (myEnum)
{
case Value1:
doSomething();
break;
case Value2:
case Value3:
doSomethingElse();
// fall through
break;
default:
defaultHandling();
break;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;goto&#34;&gt;goto&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;禁止使用goto&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;换行&#34;&gt;换行&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每行代码不多于120字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逗号在行尾. 操作符在新行的开头位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;换行时尽量避免行与行之间看起来参差不齐&lt;/p&gt;
&lt;p&gt;// Wrong
if (longExpression +
otherLongExpression +
otherOtherLongExpression) {
}&lt;/p&gt;
&lt;p&gt;// Correct
if (longExpression
+ otherLongExpression
+ otherOtherLongExpression) {
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;c特性&#34;&gt;&lt;code&gt;C++&lt;/code&gt;特性&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;不要使用异常处理&lt;/li&gt;
&lt;li&gt;不要使用运行时类型识别&lt;/li&gt;
&lt;li&gt;理智地使用模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;qt源码中的规范&#34;&gt;Qt源码中的规范&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;所有代码都是ascii，使用者如果不确定的话，只可能是7字节&lt;/li&gt;
&lt;li&gt;每一个QObject的子类都必须有Q_OBJECT宏，即使这个类没用到信号或槽。否则qobject_cast将不能使用&lt;/li&gt;
&lt;li&gt;在connect语句中，使信号和槽的参数规范化（参看 QMetaObject::normalizedSignature），可以加快信号/槽的查找速度。可以使用qtrepotools/util/normalize规范已有代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;包含头文件顺序&#34;&gt;包含头文件顺序&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;源文件对应的头文件&lt;/li&gt;
&lt;li&gt;&amp;lt;分隔&amp;gt;&lt;/li&gt;
&lt;li&gt;C系统文件&lt;/li&gt;
&lt;li&gt;&amp;lt;分隔&amp;gt;&lt;/li&gt;
&lt;li&gt;C++系统文件&lt;/li&gt;
&lt;li&gt;&amp;lt;分隔&amp;gt;&lt;/li&gt;
&lt;li&gt;Qt库文件&lt;/li&gt;
&lt;li&gt;&amp;lt;分隔&amp;gt;&lt;/li&gt;
&lt;li&gt;其他目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每组文件按字母升序排列&lt;/p&gt;
&lt;h5 id=&#34;编译器平台&#34;&gt;编译器/平台&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用三目运算符 ？时要特别小心，如果每次的返回值的类型可能不一样的话，一些编译器会在运行时生成冲突的代码（此时编译器甚至不会报错） &lt;code&gt;QString s; return condition ? s : &amp;quot;nothing&amp;quot;; // crash at runtime - QString vs. const char *&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要特别小心对齐问题。无论何时，当一个指针被cast后的对齐数是增加的时候，它都可能会崩溃。例如一个const char 被cast成了cons int，当cast之后的数字不得不在2或4个字节之间对齐时，指针就会在机器上崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任何需要需要执行构造函数或相关代码进行初始化的实例，都不能用作库代码中的全局实例。因为当构造函数或代码将要运行的时候，该实例还没有被定义（在第一次调用该实例时，在加载库时，在执行main()之前） &lt;code&gt;// global scope static const QString x; // Wrong - default constructor needs to be run to initialize x static const QString y = &amp;quot;Hello&amp;quot;; // Wrong - constructor that takes a const char * has to be run QString z; // super wrong static const int i = foo(); // wrong - call time of foo() undefined, might not be called at all&lt;/code&gt; 可以使用下面方法: &lt;code&gt;// global scope static const char x[] = &amp;quot;someText&amp;quot;; // Works - no constructor must be run, x set at compile time static int y = 7; // Works - y will be set at compile time static MyStruct s = {1, 2, 3}; // Works - will be initialized statically, no code being run static QString *ptr = 0; // Pointers to objects are ok - no code needed to be run to initialize ptr&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Q_GLOBAL_STATIC定义全局实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Q_GLOBAL_STATIC(QString, s)

void foo()
{
 s()-&amp;gt;append(&amp;quot;moo&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char型变量是有符号的还是无符号的取决于它运行环境的架构。如果你明确地想使用一个signed或unsinged char，就使用signed char或unsigned char。以下代码运行在把char默认为无符号的平台上时，其条件判断恒为真 &lt;code&gt;char c; // c can&#39;t be negative if it is unsigned /********/ /*******/ if (c &amp;gt; 0) { … } // WRONG - condition is always true on platforms where the default is unsigned&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免64位的枚举值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌入式应用系统二进制接口将所有的枚举类型的值硬编码成32位int值&lt;/li&gt;
&lt;li&gt;微软的编译器不支持64位的枚举值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;编程偏好&#34;&gt;编程偏好&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用枚举值定义常量而非用const int或defines
&lt;ul&gt;
&lt;li&gt;枚举值会在编译时被编译器用实际值替换掉，因而运行时得出结果的速度更快&lt;/li&gt;
&lt;li&gt;defines不是命名空间安全的（并且看起来很丑）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当重新实现一个虚方法时，在Qt5中，用 Q_DECL_OVERRIDE宏在函数声明之后，分号之前注解它&lt;/li&gt;
&lt;li&gt;不要把const-iterator和none-const iterator搞混 &lt;code&gt;for (Container::const_iterator it = c.begin(); it != c.end(); ++it) // Wrong for (Container::const_iterator it = c.cbegin(); it != c.cend(); ++it) // Right&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;命名空间&#34;&gt;命名空间&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;除跟UI直接交互的类外, 其他类必须处在命名空间内&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;float值&#34;&gt;float值&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用qFuzzyCompare去和delta比较其值&lt;/li&gt;
&lt;li&gt;用qIsNull去判断float值是不是二进制0，而不是和0.0比较 &lt;code&gt;[static] bool qFuzzyCompare(double p1, double p2) // Instead of comparing with 0.0 qFuzzyCompare(0.0,1.0e-200); // This will return false // Compare adding 1 to both values will fix the problem qFuzzyCompare(1 + 0.0, 1 + 1.0e-200); // This will return true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;类的成员命名&#34;&gt;类的成员命名&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;成员变量一般为名词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数成员一般为动词/动词+名词，但是当动词为get时，get常常省略。当返回值为Bool型变量时，函数名一般以前缀’is’开头&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public:
    void setColor(const QColor&amp;amp; c);
    QColor color() const;
    void setDirty(bool b);
    bool isDirty() const;

private Q_SLOTS:
    void onParentChanged();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;构造函数&#34;&gt;构造函数&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;为了使构造函数被错误使用的可能性降到最小，每一个构造函数（除了拷贝构函数）都应该检查自己是否需要加上explicit 符号&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;注意代码陷阱&#34;&gt;注意代码陷阱&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;不要为了图方便少些一些代码。因为代码是一次书写，后期不止一次地要去理解。例如 &lt;code&gt;QSlider *slider = new QSlider(12, 18, 3, 13, Qt::Vertical, 0, &amp;quot;volume&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改成下面的方式会更容易理解 &lt;code&gt;QSlider *slider = new QSlider(Qt::Vertical); slider-&amp;gt;setRange(12, 18); slider-&amp;gt;setPageStep(3); slider-&amp;gt;setValue(13); slider-&amp;gt;setObjectName(&amp;quot;volume&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;参考资料&#34;&gt;参考资料&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.qt.io/Qt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.qt.io/Qt&lt;/a&gt;_Contribution_Guidelines&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.qt.io/Qt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.qt.io/Qt&lt;/a&gt;_Coding_Style&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.qt.io/Coding_Conventions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.qt.io/Coding_Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://community.kde.org/Policies/Library&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://community.kde.org/Policies/Library&lt;/a&gt;_Code_Policy&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.qt.io/UI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.qt.io/UI&lt;/a&gt;_Text_Conventions&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.qt.io/API&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.qt.io/API&lt;/a&gt;_Design_Principles&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://doc.qt.io/qt-5/qml-codingconventions.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://doc.qt.io/qt-5/qml-codingconventions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.github.io/styleguide/cppguide.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://google.github.io/styleguide/cppguide.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>qt 的 pro 文件</title>
        <link>https://lxb.wiki/8304997e/</link>
        <pubDate>Wed, 21 Mar 2018 09:49:25 +0000</pubDate>
        
        <guid>https://lxb.wiki/8304997e/</guid>
        <description>&lt;h4 id=&#34;注释&#34;&gt;注释&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;#&lt;/code&gt; 进行行注释&lt;/p&gt;
&lt;h4 id=&#34;模板&#34;&gt;模板&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TEMPLATE = app&lt;/code&gt; 告诉&lt;code&gt;qmake&lt;/code&gt;为这个应用程序生成哪种&lt;code&gt;makefile&lt;/code&gt;. - app 默认值. 生成app的makefile - lib 生成一个库的makefile - vcapp 生成一个应用程序的&lt;code&gt;VisualStudio&lt;/code&gt;项目文件 - vclib 生成一个库的&lt;code&gt;VisualStudio&lt;/code&gt; 项目文件 - subdirs 生成&lt;code&gt;makefile&lt;/code&gt;文件编译&lt;code&gt;subdirs&lt;/code&gt;指定的子文件夹&lt;/p&gt;
&lt;h4 id=&#34;应用程序目录&#34;&gt;应用程序目录&lt;/h4&gt;
&lt;p&gt;指定生成的应用程序放置的目录 &lt;code&gt;DESTDIR += ../bin&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;配置信息&#34;&gt;配置信息&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;COFNIG&lt;/code&gt; 用来告诉&lt;code&gt;qmake&lt;/code&gt; 关于应用程序的配置信息 &lt;code&gt;CONFIG += qt warn_on release&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;ui目录&#34;&gt;ui目录&lt;/h4&gt;
&lt;p&gt;指定uic命令将&lt;code&gt;.ui&lt;/code&gt;文件转化成的&lt;code&gt;ui_*.h&lt;/code&gt;文件的存放目录 &lt;code&gt;UI_DIR += forms&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;rcc目录&#34;&gt;rcc目录&lt;/h4&gt;
&lt;p&gt;指定rcc命令将&lt;code&gt;.qrc&lt;/code&gt;文件转换成的&lt;code&gt;qrc_*.h&lt;/code&gt;文件的存放目录 &lt;code&gt;RCC_DIR += ../tmp&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;moc目录&#34;&gt;moc目录&lt;/h4&gt;
&lt;p&gt;指定moc命令将&lt;strong&gt;含Q_OBJECT的头文件转换成标准&lt;code&gt;.h&lt;/code&gt;文件的存放目录&lt;/strong&gt; &lt;code&gt;MOC_DIR += ../tmp&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;目标文件目录&#34;&gt;目标文件目录&lt;/h4&gt;
&lt;p&gt;指定目标文件(obj)的存放目录 &lt;code&gt;OBJECTS_DIR += ../tmp&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;依赖相关路径&#34;&gt;依赖相关路径&lt;/h4&gt;
&lt;p&gt;程序编译时依赖的相关路径 &lt;code&gt;DEPENDPATH += . forms include qrc sources&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;头文件包含路径&#34;&gt;头文件包含路径&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;INCLUDEPATH += .&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;qmake时产生的信息&#34;&gt;qmake时产生的信息&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;message($$(PATH))&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;源文件编码方式&#34;&gt;源文件编码方式&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CODECFORSRC = GBK&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;工程中包含的头文件&#34;&gt;工程中包含的头文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HEADERS += include/aa.h&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;工程中包含的ui文件&#34;&gt;工程中包含的&lt;code&gt;.ui&lt;/code&gt;文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;FORMS += forms/aa.ui&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;工程中包含的源文件&#34;&gt;工程中包含的源文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SOURCES += sources/main.cpp sources/aa.cpp&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;工程中包含的资源文件&#34;&gt;工程中包含的资源文件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;RESOURCES += qrc/aa.qrc
LIBS += -LfolderPath
Release: LIBS += -LfolderReleasePath
Debug: LIBS += -LfolderDebugPath
DEFINES += XX_XX_XXX // 定义编译选项, 在.h文件中就可以用 #ifdefine XX_XX_XXX
RC_FIELS = xxx.icns
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;平台相关性处理&#34;&gt;平台相关性处理&lt;/h4&gt;
&lt;p&gt;根据qmake所运行的平台来使用相应的作用域来进行处理.&lt;/p&gt;
&lt;p&gt;为Windows平台添加的依赖平台的文件示例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;win32{
SOURCES += hello_win.cpp
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;生成makefile&#34;&gt;生成Makefile&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;qmake -oMakefile hello.pro&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于VisualStudio用户, qmake也可以生成&lt;code&gt;.dsp&lt;/code&gt;文件 &lt;code&gt;qmake -tvcapp -o hello.dsp hello.pro&lt;/code&gt;&lt;/p&gt;
&lt;h6 id=&#34;pro文件实例&#34;&gt;pro文件实例&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATE = app #模块配置
LANGUAGE = C++ #C++语言

CONFIG += qt warn_on debug release

#引入的lib文件,用于引入动态链接库
LIBS += qaxcontainer.lib

#头文件包含路径
INCLUDEPATH += ../../qtcompnent/qtchklisten/inc ../../qtcompnent/qtclearfile/inc ../../validator/inc/validerrcode ../../qtcompnent/qtdir/inc ../inc ../../utillib/inc/xmlapi ../../utillib/inc/util ../../xercesc ../../qtcompnent/qteditor/inc ../../qtcompnent/qtfunreview/inc ../../qtcompnent/qttable/inc ../../qtcompnent/qtversion/inc ../../qtcompnent/qtini/inc ../../icdtool/icdservices/inc ../../icdtool/dataset/inc ../../icdtool/doi/inc ../../icdtool/reportcontrol/inc ../../icdtool/GSEconctrol/inc ../../icdtool/inputs/inc ../../icdtool/SMVconctrol/inc ../../icdtool/logcontrol/inc ../../scdpreview/inc/scdpreviewtoollib ../../scdpreview/form ../../icdtool/sclcontrol/inc ../../icdtool/log/inc ../../icdtool/settingcontrol/inc ../../qtcompnent/qteditor/inc ../../qtcompnent/qttreeview/inc ../../qtcompnent/qttabwidget/inc ../../communication/inc ../../qtcompnent/qtabout/inc ../iedmanage/inc ../ldmanage/inc ../foriecrun/inc ../../qtcompnent/validset/inc

#工程中包含的头文件
HEADERS += ../inc/exportstable.h /
../inc/maintabwidget.h /
../inc/outputtab.h /
../inc/strutil.h /
../inc/treeeditview.h /
../inc/MainForm.h /
../inc/recenfileini.h /
../inc/ExportCIDFunction.h

#工程中包含的源文件
SOURCES += ../src/main.cpp /
../src/exportstable.cpp /
../src/maintabwidget.cpp /
../src/outputtab.cpp /
../src/treeeditview.cpp /
../src/MainForm.cpp /
../src/recenfileini.cpp /
../src/ExportCIDFunction.cpp

#工程中包含的.ui设计文件
FORMS = ../form/scdmainform.ui /
../form/exportiedform.ui /
../form/Exportsedform.ui /
../form/Importsedform.ui /
../form/formiminputs.ui

#图像文件

IMAGES = images/substation.png /
images/communication.png /
images/autocom.png /
images/reportcfg.png /
images/comcfg.png /
images/filetrans.png /
images/review.png /
images/setting.png

#工程中包含的资源文件
RESOURCES = Scintilla.qrc

#CONFIG -= release
CONFIG -= debug


RC_FILE = scdtool.rc


BINLIB = ../../bin ../../xercesc/lib

UI_HEADERS_DIR = ../inc # .ui文件转会为**.h 存放的目录
UI_SOURCES_DIR = ../src # .ui文件转会为**.cpp 存放的目录
QMAKE_LIBDIR = $${BINLIB}

release {
TARGET = scdtool #指定生成的应用程序名
OBJECTS_DIR = ../../obj/scdtool/release #指定目标文件(obj)的存放目录
}
debug {
TARGET = scdtool_d #指定生成的应用程序名
OBJECTS_DIR = ../../obj/scdtool/debug #指定目标文件(obj)的存放目录
}

MOC_DIR = $${OBJECTS_DIR}
DESTDIR = ../../bin #指定生成的应用程序放置的目录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;补充: &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Braveliu/p/5107550.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cnblogs&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
