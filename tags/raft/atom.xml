<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>raft on Xiaobin&#39;s Notes</title>
        <link>https://lxb.wiki/tags/raft/</link>
        <description>Recent content in raft on Xiaobin&#39;s Notes</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 06 Feb 2021 20:36:12 +0000</lastBuildDate><atom:link href="https://lxb.wiki/tags/raft/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>raft 算法</title>
        <link>https://lxb.wiki/3d118e3a/</link>
        <pubDate>Sat, 06 Feb 2021 20:36:12 +0000</pubDate>
        
        <guid>https://lxb.wiki/3d118e3a/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;拜占庭将军问题&#34;&gt;拜占庭将军问题&lt;/h1&gt;
&lt;p&gt;拜占庭将军问题是 Leslie Lamport 在 &lt;a class=&#34;link&#34; href=&#34;https://web.archive.org/web/20170205142845/http://lamport.azurewebsites.net/pubs/byz.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Byzantine Generals Problem&lt;/a&gt; 论文中提出的分布式领域的容错问题，它是分布式领域中最复杂、最严格的容错模型。&lt;/p&gt;
&lt;p&gt;在该模型下，系统不会对集群中的节点做任何的限制，它们可以向其他节点发送随机数据、错误数据，也可以选择不响应其他节点的请求，这些无法预测的行为使得容错这一问题变得更加复杂。&lt;/p&gt;
&lt;p&gt;拜占庭将军问题描述了一个如下的场景，有一组将军分别指挥一部分军队，每一个将军都不知道其它将军是否是可靠的，也不知道其他将军传递的信息是否可靠，但是它们需要通过投票选择是否要进攻或者撤退：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204025.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在这一节中，黄色代表状态未知，绿色代表进攻，蓝色代表撤退，最后红色代表当前将军的信息不可靠。&lt;/p&gt;
&lt;p&gt;在这时，无论将军是否可靠，只要所有的将军达成了统一的方案，选择进攻或者撤退其实就是没有任何问题的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204121.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上述的情况不会对当前的战局有太多的影响，也不会造成损失，但是如果其中的一个将军告诉其中一部分将军选择进攻、另一部分选择撤退，就会出现非常严重的问题了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204149.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;由于将军的队伍中出了一个叛徒或者信息在传递的过程中被拦截，会导致一部分将军会选择进攻，剩下的一部分会选择撤退，它们都认为自己的选择是大多数人的选择，这时就出现了严重的不一致问题。&lt;/p&gt;
&lt;p&gt;拜占庭将军问题是对分布式系统容错的最高要求，然而这不是日常工作中使用的大多数分布式系统中会面对的问题，我们遇到更多的还是节点故障宕机或者不响应等情况，这就大大简化了系统对容错的要求；不过类似 Bitcoin、Ethereum 等分布式系统确实需要考虑拜占庭容错的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	拜占庭将军问题是分布式领域最复杂、最严格的容错模型。但在日常工作中使用的分布式系统面对的问题不会那么复杂，更多的是计算机故障挂掉了，或者网络通信问题而没法传递信息，这种情况不考虑计算机之间互相发送恶意信息，极大简化了系统对容错的要求，最主要的是达到一致性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以将拜占庭将军问题根据常见的工作上的问题进行简化：&lt;strong&gt;假设将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成一致性决定？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于这个简化后的问题，有许多解决方案，第一个被证明的共识算法是 Paxos，由拜占庭将军问题的作者 Leslie Lamport 在1990年提出，最初以论文难懂而出名，后来这哥们在2001重新发了一篇简单版的论文 &lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com?t=%5Bhttps%3A%2F%2Flamport.azurewebsites.net%2Fpubs%2Fpaxos-simple.pdf%5D%28https%3A%2F%2Flamport.azurewebsites.net%2Fpubs%2Fpaxos-simple.pdf%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Paxos Made Simple&lt;/a&gt;，然而还是挺难懂的。&lt;/p&gt;
&lt;p&gt;因为 Paxos 难懂，难实现，所以斯坦福大学的教授在2014年发表了新的分布式协议 Raft。与 Paxos 相比，Raft 有着基本相同运行效率，但是更容易理解，也更容易被用在系统开发上。&lt;/p&gt;
&lt;h1 id=&#34;针对简化版拜占庭将军问题raft-解决方案类比&#34;&gt;针对简化版拜占庭将军问题，Raft 解决方案类比&lt;/h1&gt;
&lt;p&gt;我们还是用拜占庭将军的例子来帮助理解 Raft。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	假设将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成一致性决定？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Raft 的解决方案大概可以理解成 先在所有将军中选出一个大将军，所有的决定由大将军来做。&lt;strong&gt;选举环节&lt;/strong&gt;：比如说现在一共有3个将军 A, B, C，每个将军都有一个&lt;strong&gt;随机时间&lt;/strong&gt;的倒计时器，倒计时一结束，这个将军就会把自己当成大将军候选人，然后派信使去问其他几个将军，能不能选我为总将军？假设现在将军A倒计时结束了，他派信使传递选举投票的信息给将军B和C，如果将军B和C还没把自己当成候选人（倒计时还没有结束），并且没有把选举票投给其他，他们把票投给将军A，信使在回到将军A时，将军A知道自己收到了足够的票数，成为了大将军。在这之后，是否要进攻就由大将军决定，然后派信使去通知另外两个将军，如果在一段时间后还没有收到回复（可能信使被暗杀），那就再重派一个信使，直到收到回复。&lt;/p&gt;
&lt;p&gt;故事先讲到这里，希望不做技术方面的朋友可以大概能理解 Raft 的原理，下面从比较技术的角度讲讲 Raft 的原理。&lt;/p&gt;
&lt;h2 id=&#34;1-raft-节点状态&#34;&gt;1. Raft 节点状态&lt;/h2&gt;
&lt;p&gt;从拜占庭将军的故事映射到分布式系统上，每个将军相当于一个分布式网络节点，每个节点有&lt;strong&gt;三种状态：Follower，Candidate，Leader&lt;/strong&gt;，状态之间是互相转换的，可以参考下图，具体的后面说。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204532.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;每个节点上都有一个倒计时器 (Election Timeout)，时间随机在 150ms 到 300ms 之间。有几种情况会重设 Timeout：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到选举的请求&lt;/li&gt;
&lt;li&gt;收到 Leader 的 Heartbeat (后面会讲到)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Raft 运行过程中，最主要进行两个活动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选主 Leader Election&lt;/li&gt;
&lt;li&gt;复制日志 Log Replication&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-选主-leader-election&#34;&gt;2. 选主 Leader Election&lt;/h2&gt;
&lt;h3 id=&#34;21-正常情况下选主&#34;&gt;2.1 正常情况下选主&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204600.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;假设现在有如图5个节点，5个节点一开始的状态都是 Follower。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204614.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在一个节点倒计时结束 (Timeout) 后，这个节点的状态变成 Candidate 开始选举，它给其他几个节点发送选举请求 (RequestVote)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204652.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其他四个节点都返回成功，这个节点的状态由 Candidate 变成了 Leader，并在每个一小段时间后，就给所有的 Follower 发送一个 Heartbeat 以保持所有节点的状态，Follower 收到 Leader 的 Heartbeat 后重设 Timeout。&lt;/p&gt;
&lt;p&gt;这是最简单的选主情况，&lt;strong&gt;只要有超过一半的节点投支持票了，Candidate 才会被选举为 Leader&lt;/strong&gt;，5个节点的情况下，3个节点 (包括 Candidate 本身) 投了支持就行。&lt;/p&gt;
&lt;h3 id=&#34;22-leader-出故障情况下的选主&#34;&gt;2.2 Leader 出故障情况下的选主&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204743.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一开始已经有一个 Leader，所有节点正常运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204807.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Leader 出故障挂掉了，其他四个 Follower 将进行重新选主。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204831.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204909.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226204929.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;4个节点的选主过程和5个节点的类似，在选出一个新的 Leader 后，原来的 Leader 恢复了又重新加入了，这个时候怎么处理？在 Raft 里，第几轮选举是有记录的，重新加入的 Leader 是第一轮选举 (Term 1) 选出来的，而现在的 Leader 则是 Term 2，所有原来的 Leader 会自觉降级为 Follower&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205008.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-多个-candidate-情况下的选主&#34;&gt;2.3 多个 Candidate 情况下的选主&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205055.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;假设一开始有4个节点，都还是 Follower。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205115.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;有两个 Follower 同时 Timeout，都变成了 Candidate 开始选举，分别给一个 Follower 发送了投票请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205141.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个 Follower 分别返回了ok，这时两个 Candidate 都只有2票，要3票才能被选成 Leader。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205210.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个 Candidate 会分别给另外一个还没有给自己投票的 Follower 发送投票请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205227.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;但是因为 Follower 在这一轮选举中，都已经投完票了，所以都拒绝了他们的请求。所以在 Term 2 没有 Leader 被选出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205242.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这时，两个节点的状态是 Candidate，两个是 Follower，但是他们的倒计时器仍然在运行，最先 Timeout 的那个节点会进行发起新一轮 Term 3 的投票。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205257.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个 Follower 在 Term 3 还没投过票，所以返回 OK，这时 Candidate 一共有三票，被选为了 Leader。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205319.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果 Leader Heartbeat 的时间晚于另外一个 Candidate timeout 的时间，另外一个 Candidate 仍然会发送选举请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205340.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个 Follower 已经投完票了，拒绝了这个 Candidate 的投票请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205354.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Leader 进行 Heartbeat， Candidate 收到后状态自动转为 Follower，完成选主。&lt;/p&gt;
&lt;p&gt;以上是 Raft 最重要活动之一选主的介绍，以及在不同情况下如何进行选主。&lt;/p&gt;
&lt;h2 id=&#34;3-复制日志-log-replication&#34;&gt;3. 复制日志 Log Replication&lt;/h2&gt;
&lt;h3 id=&#34;31-正常情况下复制日志&#34;&gt;3.1 正常情况下复制日志&lt;/h3&gt;
&lt;p&gt;Raft 在实际应用场景中的一致性更多的是体现在不同节点之间的数据一致性，客户端发送请求到任何一个节点都能收到一致的返回，当一个节点出故障后，其他节点仍然能以已有的数据正常进行。在选主之后的复制日志就是为了达到这个目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205420.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一开始，Leader 和 两个 Follower 都没有任何数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205438.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;客户端发送请求给 Leader，储存数据 “sally”，Leader 先将数据写在本地日志，这时候数据还是 &lt;strong&gt;Uncommitted&lt;/strong&gt; (还没最终确认，红色表示)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205539.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Leader 给两个 Follower 发送 AppendEntries 请求，数据在 Follower 上没有冲突，则将数据暂时写在本地日志，Follower 的数据也还是 Uncommitted。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205616.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Follower 将数据写到本地后，返回 OK。Leader 收到后成功返回，&lt;strong&gt;只要收到的成功的返回数量超过半数 (包含Leader)&lt;/strong&gt;，Leader 将数据 “sally” 的状态改成 Committed。( 这个时候 Leader 就可以返回给客户端了)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205634.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Leader 再次给 Follower 发送 AppendEntries 请求，收到请求后，Follower 将本地日志里 Uncommitted 数据改成 Committed。这样就完成了一整个复制日志的过程，三个节点的数据是一致的，&lt;/p&gt;
&lt;h3 id=&#34;32-network-partition-情况下进行复制日志&#34;&gt;3.2 Network Partition 情况下进行复制日志&lt;/h3&gt;
&lt;p&gt;在 Network Partition 的情况下，部分节点之间没办法互相通信，Raft 也能保证在这种情况下数据的一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205655.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一开始有 5 个节点处于同一网络状态下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205712.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Network Partition 将节点分成两边，一边有两个节点，一边三个节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205803.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个节点这边已经有 Leader 了，来自客户端的数据 “bob” 通过 Leader 同步到 Follower。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205819.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;因为只有两个节点，少于3个节点，所以 “bob” 的状态仍是 Uncommitted。所以在这里，&lt;strong&gt;服务器会返回错误给客户端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205832.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;另外一个 Partition 有三个节点，进行重新选主。客户端数据 “tom” 发到新的 Leader，通过和上节网络状态下相似的过程，同步到另外两个 Follower。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205851.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226205919.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226210105.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;因为这个 Partition 有3个节点，超过半数，所以数据 “tom” 都 Commit 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226210129.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;网络状态恢复，5个节点再次处于同一个网络状态下。但是这里出现了数据冲突 “bob&amp;quot; 和 “tom&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226210159.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;三个节点的 Leader 广播 AppendEntries&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226210245.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个节点 Partition 的 Leader 自动降级为 Follower，因为这个 Partition 的数据 “bob” 没有 Commit，返回给客户端的是错误，客户端知道请求没有成功，所以 Follower 在收到 AppendEntries 请求时，可以把 “bob“ 删除，然后同步 ”tom”，通过这么一个过程，就完成了在 Network Partition 情况下的复制日志，保证了数据的一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210226210329.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小总结&#34;&gt;小总结&lt;/h2&gt;
&lt;p&gt;Raft 是能够实现分布式系统强一致性的算法，每个系统节点有三种状态 Follower，Candidate，Leader。实现 Raft 算法两个最重要的事是：选主和复制日志&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;
Raft 官网：&lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com?t=https%3A%2F%2Fraft.github.io%2F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://raft.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Raft 原理动画 (推荐看看)：&lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com?t=http%3A%2F%2Fthesecretlivesofdata.com%2Fraft%2F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Raft 算法解析图片来源：&lt;a class=&#34;link&#34; href=&#34;https://link.jianshu.com?t=http%3A%2F%2Fwww.infoq.com%2Fcn%2Farticles%2Fcoreos-analyse-etcd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.infoq.com/cn/articles/coreos-analyse-etcd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分布式一致性与共识算法 &lt;a class=&#34;link&#34; href=&#34;https://draveness.me/consensus/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://draveness.me/consensus/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;共识算法：Raft &lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/8e4bbe7e276c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/8e4bbe7e276c&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
