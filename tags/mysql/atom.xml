<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mysql on Xiaobin&#39;s Blog</title>
        <link>http://lxb.wiki/tags/mysql/</link>
        <description>Recent content in mysql on Xiaobin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 02 Aug 2021 23:20:12 +0000</lastBuildDate><atom:link href="http://lxb.wiki/tags/mysql/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>MySQL的四种事务隔离级别</title>
        <link>http://lxb.wiki/689978a2/</link>
        <pubDate>Mon, 02 Aug 2021 23:20:12 +0000</pubDate>
        
        <guid>http://lxb.wiki/689978a2/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;一事务的基本要素acid&#34;&gt;一、事务的基本要素（ACID）&lt;/h1&gt;
&lt;p&gt;　　1、原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。&lt;/p&gt;
&lt;p&gt;　　 2、一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。&lt;/p&gt;
&lt;p&gt;　　 3、隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。&lt;/p&gt;
&lt;p&gt;　　 4、持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。&lt;/p&gt;
&lt;h1 id=&#34;二事务的并发问题&#34;&gt;二、事务的并发问题&lt;/h1&gt;
&lt;p&gt;　　1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据&lt;/p&gt;
&lt;p&gt;　　2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。&lt;/p&gt;
&lt;p&gt;　　3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。&lt;/p&gt;
&lt;p&gt;　　小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表&lt;/p&gt;
&lt;h1 id=&#34;三mysql事务隔离级别&#34;&gt;三、MySQL事务隔离级别&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;事务隔离级别&lt;/th&gt;
&lt;th&gt;脏读&lt;/th&gt;
&lt;th&gt;不可重复读&lt;/th&gt;
&lt;th&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交（read-uncommitted）&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不可重复读（read-committed）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可重复读（repeatable-read）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;串行化（serializable）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;mysql默认的事务隔离级别为repeatable-read&lt;/p&gt;
&lt;h1 id=&#34;四用例子说明各个隔离级别的情况&#34;&gt;四、用例子说明各个隔离级别的情况&lt;/h1&gt;
&lt;h2 id=&#34;1读未提交&#34;&gt;1、读未提交：&lt;/h2&gt;
&lt;p&gt;　　　　（1）打开一个客户端A，并设置当前事务模式为read uncommitted（未提交读），查询表account的初始值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132329.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132440.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（3）这时，虽然客户端B的事务还没提交，但是客户端A就可以查询到B已经更新的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132511.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（4）一旦客户端B的事务因为某种原因回滚，所有的操作都将会被撤销，那客户端A查询到的数据其实就是脏数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132642.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（5）在客户端A执行更新语句update account set balance = balance - 50 where id =1，lilei的balance没有变成350，居然是400，是不是很奇怪，数据不一致啊，如果你这么想就太天真 了，在应用程序中，我们会用400-50=350，并不知道其他会话回滚了，要想解决这个问题可以采用读已提交的隔离级别&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132722.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2读已提交&#34;&gt;2、读已提交&lt;/h2&gt;
&lt;p&gt;（1）打开一个客户端A，并设置当前事务模式为read committed（读已提交），查询表account的所有记录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226132916.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133127.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（3）这时，客户端B的事务还没提交，客户端A不能查询到B已经更新的数据，解决了脏读问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133227.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（4）客户端B的事务提交&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133253.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（5）客户端A执行与上一步相同的查询，结果 与上一步不一致，即产生了不可重复读的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133509.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;3可重复读&#34;&gt;3、可重复读&lt;/h2&gt;
&lt;p&gt;（1）打开一个客户端A，并设置当前事务模式为repeatable read，查询表account的所有记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133541.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（2）在客户端A的事务提交之前，打开另一个客户端B，更新表account并提交&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133617.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（3）在客户端A查询表account的所有记录，与步骤（1）查询结果一致，没有出现不可重复读的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133720.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（4）在客户端A，接着执行update balance = balance - 50 where id = 1，balance没有变成400-50=350，lilei的balance值用的是步骤（2）中的350来算的，所以是300，数据的一致性倒是没有被破坏。可重复读的隔离级别下使用了MVCC机制，select操作不会更新版本号，是快照读（历史版本）；insert、update和delete会更新版本号，是当前读（当前版本）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133747.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（5）重新打开客户端B，插入一条新数据后提交&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133806.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;（6）在客户端A查询表account的所有记录，没有 查出 新增数据，所以没有出现幻读&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226133936.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;4串行化&#34;&gt;4.串行化&lt;/h2&gt;
&lt;p&gt;（1）打开一个客户端A，并设置当前事务模式为serializable，查询表account的初始值：&lt;/p&gt;
&lt;p&gt;（2）打开一个客户端B，并设置当前事务模式为serializable，插入一条记录报错，表被锁了插入失败，mysql中事务隔离级别为serializable时会锁表，因此不会出现幻读的情况，这种隔离级别并发性极低，开发中很少会用到。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、事务隔离级别为读提交时，写数据只会锁住相应的行&lt;/p&gt;
&lt;p&gt;　　2、事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果****检索条件****没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。&lt;/p&gt;
&lt;p&gt;　　3、事务隔离级别为串行化时，读写数据都会锁住整张表&lt;/p&gt;
&lt;p&gt;　　4、隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。&lt;/p&gt;
&lt;p&gt;　　5、MYSQL MVCC实现机制参考链接：https://blog.csdn.net/whoamiyang/article/details/51901888&lt;/p&gt;
&lt;p&gt;　　 6、关于next-key 锁可以参考链接：https://blog.csdn.net/bigtree_3721/article/details/73731377&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于 &lt;a class=&#34;link&#34; href=&#34;#%e5%be%85%e9%aa%8c%e8%af%81&#34; &gt;四、3、可重复的的第(6)步&lt;/a&gt;， 待验证&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【译】备忘单：提升你的 MariaDB 和 MySQL 数据库技能</title>
        <link>http://lxb.wiki/3641869e/</link>
        <pubDate>Sun, 13 Dec 2020 22:07:00 +0000</pubDate>
        
        <guid>http://lxb.wiki/3641869e/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;阅读本文并下载我们的免费备忘单，去使用开源的数据库吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210103221458.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当你写一个程序或配置一个服务时，你最终都要持久化存储信息。有时候，你只需要一个 INI 或者 &lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/sysadmin/yaml-tips&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YAML&lt;/a&gt; 配置文件就够了。而有时候，一个自定义格式的 XML 或者 JSON 或其他类似的文件会更好。&lt;/p&gt;
&lt;p&gt;但也有时候你需要校验输入、快速查询信息、关联数据、通常还要熟练地处理你的用户的请求。这就是设计数据库的目的，而 &lt;a class=&#34;link&#34; href=&#34;https://mariadb.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MariaDB&lt;/a&gt;（由 &lt;a class=&#34;link&#34; href=&#34;https://www.mysql.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL&lt;/a&gt; 的原始开发人员开发的一个分支） 是一个极佳的选项。在本文中我使用的是 MariaDB，但这些信息同样适用于 MySQL。&lt;/p&gt;
&lt;p&gt;通过编程语言与数据库进行交互是很普遍的。正因如此，出现了大量 Java、Python、Lua、PHP、Ruby、C++ 和其他语言的 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/SQL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SQL&lt;/a&gt; 库。然而，在使用这些库之前，理解数据库引擎做了什么以及为什么选择数据库是重要的对我们会很有帮助。本文介绍 MariaDB 和 &lt;code&gt;mysql&lt;/code&gt; 命令来帮助你熟悉数据库处理数据的基本原理。&lt;/p&gt;
&lt;p&gt;如果你还没有安装 MariaDB，请查阅我的文章 &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/20/10/install-mariadb-and-mysql-linux&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在 Linux 上安装 MariaDB&lt;/a&gt;。如果你没有使用 Linux，请参照 MariaDB &lt;a class=&#34;link&#34; href=&#34;https://mariadb.org/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载页面&lt;/a&gt;提供的指导方法。&lt;/p&gt;
&lt;h3 id=&#34;与-mariadb-交互&#34;&gt;与 MariaDB 交互&lt;/h3&gt;
&lt;p&gt;你可以使用 &lt;code&gt;mysql&lt;/code&gt; 命令与 MariaDB 进行交互。首先使用子命令 &lt;code&gt;ping&lt;/code&gt; 确认你的服务是运行着的，在提示后输入密码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mysqladmin -u root -p ping
Enter password:
mysqld is alive
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了易于读者理解，打开一个交互式的 MariaDB 会话：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.
Commands end with ; or \g.
[...]
Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help.
Type &amp;#39;\c&amp;#39; to clear the current input statement.

MariaDB [(none)]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在是在一个 MariaDB 子 shell 中，提示符是 MariaDB 提示符。普通的 Bash 命令在这里不能使用，只能用 MariaDB 命令。输入 &lt;code&gt;help&lt;/code&gt; （或 &lt;code&gt;?&lt;/code&gt;）查看命令列表。这些是你的 MariaDB shell 的管理命令，使用它们可以定制你的 shell，但它们不属于 SQL 语言。&lt;/p&gt;
&lt;h3 id=&#34;学习-sql-基本知识&#34;&gt;学习 SQL 基本知识&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://publications.opengroup.org/c449&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;结构化查询语言&lt;/a&gt;是基于它们的能力定义的：一种通过有规则且一致的语法来查询数据库中的内容以得到有用的结果的方法。SQL 看起来像是普通的英文语句，有一点点生硬。例如，如果你登入数据库服务器，想查看有哪些库，输入 &lt;code&gt;SHOW DATABASES;&lt;/code&gt; 并回车就能看到结果。&lt;/p&gt;
&lt;p&gt;SQL 命令以分号作为结尾。如果你忘记输入分号，MariaDB 会认为你是想在下一行继续输入你的查询命令，在下一行你可以继续输入命令也可以输入分号结束命令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MariaDB [(NONE)]&amp;gt; SHOW DATABASES;
+--------------------+
| DATABASE           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 ROWS IN SET (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的例子显示当前有四个数据库：&lt;code&gt;information_schema&lt;/code&gt;、&lt;code&gt;mysql&lt;/code&gt;、&lt;code&gt;performance_schema&lt;/code&gt; 和 &lt;code&gt;test&lt;/code&gt;。你必须指定 MariaDB 使用哪个库，才能对该库使用查询语句。指定数据库的命令是 &lt;code&gt;use&lt;/code&gt;。当你选择了一个库后，MariaDB 提示框会切换为选择的库。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MariaDB [(NONE)]&amp;gt; USE test;
MariaDB [(test)]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;显示数据库的表&#34;&gt;显示数据库的表&lt;/h4&gt;
&lt;p&gt;数据库里有&lt;em&gt;表&lt;/em&gt;，与电子表格类似：有一系列的行（在数据库中称为&lt;em&gt;记录&lt;/em&gt;）和列。一个行和一个列唯一确定一个&lt;em&gt;字段&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;查看一个数据库中可用的表（可以理解为多表单电子表格中的一页），使用 SQL 关键字 &lt;code&gt;SHOW&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MariaDB [(test)]&amp;gt; SHOW TABLES;
empty SET
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;test&lt;/code&gt; 数据库是空的，所以使用 &lt;code&gt;use&lt;/code&gt; 命令切换到 &lt;code&gt;mysql&lt;/code&gt; 数据库：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MariaDB [(test)]&amp;gt; USE mysql;
MariaDB [(mysql)]&amp;gt; SHOW TABLES;

+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| column_stats              |
| columns_priv              |
| db                        |
[...]
| time_zone_transition_type |
| transaction_registry      |
| USER                      |
+---------------------------+
31 ROWS IN SET (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个数据库中有很多表！&lt;code&gt;mysql&lt;/code&gt; 数据库是这个 MariaDB 实例的系统管理数据库。它里面包含重要数据，比如用来管理数据库权限的用户结构。这个数据库很重要，你不需要经常直接与它交互，但是使用 SQL 脚本来操作它却很常见。当你学习 MariaDB 时理解 &lt;code&gt;mysql&lt;/code&gt; 数据库很有用，因为它有助于说明一些基本的 SQL 命令。&lt;/p&gt;
&lt;h4 id=&#34;检查一个表&#34;&gt;检查一个表&lt;/h4&gt;
&lt;p&gt;这个实例的 &lt;code&gt;mysql&lt;/code&gt; 数据库的最后一个表名为 &lt;code&gt;USER&lt;/code&gt;。这个表包含了可以访问这个数据库的用户。当前里面只有一个 root 用户，但是你可以添加不同权限的用户，赋予它们查看、更新或创建数据的权限。你可以查看一个表的列首来了解一个  MariaDB 用户的所有属性：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; SHOW COLUMNS IN USER;
MariaDB [mysql]&amp;gt; SHOW COLUMNS IN USER;
+-------------+---------------+------+-----+----------+
| FIELD       | TYPE          | NULL | KEY | DEFAULT  |
+-------------+---------------+------+-----+----------+
| Host        | CHAR(60)      | NO   | PRI |          |
| USER        | CHAR(80)      | NO   | PRI |          |
| Password    | CHAR(41)      | NO   |     |          |
| Select_priv | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
| Insert_priv | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
| Update_priv | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
| Delete_priv | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
| Create_priv | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
| Drop_priv   | enum(&amp;#39;N&amp;#39;,&amp;#39;Y&amp;#39;) | NO   |     | N        |
[...]
47 ROWS IN SET (0.001 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建一个新的用户&#34;&gt;创建一个新的用户&lt;/h4&gt;
&lt;p&gt;不论你是否需要一个普通的账号来管理数据库或者为计算机配置数据库（例如安装 WordPress、Drupal 或 Joomla时），在 MariaDB 中多建一个用户账号是很普遍的。你可以通过向 &lt;code&gt;mysql&lt;/code&gt; 数据库的 &lt;code&gt;USER&lt;/code&gt; 表中添加一个用户或使用 SQL 关键字 &lt;code&gt;CREATE&lt;/code&gt; 来提示 MariaDB 创建一个 MariaDB 用户。使用 &lt;code&gt;CREATE&lt;/code&gt; 来创建新用户会默认执行一些有用的方法，因此你不需要手动生成所有的信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; CREATE USER &amp;#39;tux&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;really_secure_password&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;查看表的字段&#34;&gt;查看表的字段&lt;/h4&gt;
&lt;p&gt;你可以使用 &lt;code&gt;SELECT&lt;/code&gt; 关键字来查看数据库表的字段和值。这本例中，你创建了一个名为 &lt;code&gt;tux&lt;/code&gt; 的用户，因此查询 &lt;code&gt;USER&lt;/code&gt; 表中的列：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; SELECT USER,host FROM USER;
+------+------------+
| USER | host       |
+------+------------+
| root | localhost  |
[...]
| tux  | localhost  |
+------+------------+
7 ROWS IN SET (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;为一个用户赋予权限&#34;&gt;为一个用户赋予权限&lt;/h4&gt;
&lt;p&gt;通过查看 &lt;code&gt;USER&lt;/code&gt; 表列出的信息，你可以看到用户的状态。例如，新用户 &lt;code&gt;tux&lt;/code&gt; 对这个数据库没有任何权限。使用 &lt;code&gt;WHERE&lt;/code&gt; 语句你可以只查 &lt;code&gt;tux&lt;/code&gt; 那一条记录。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; SELECT USER,select_priv,insert_priv,update_priv FROM USER WHERE USER=&amp;#39;tux&amp;#39;;
+------+-------------+-------------+-------------+
| USER | select_priv | insert_priv | update_priv |
+------+-------------+-------------+-------------+
| tux  | N           | N           | N           |
+------+-------------+-------------+-------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;GRANT&lt;/code&gt; 命令修改用户的权限：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; GRANT SELECT ON *.* TO &amp;#39;tux&amp;#39;@&amp;#39;localhost&amp;#39;;
&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证你的修改：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; SELECT USER,select_priv,insert_priv,update_priv FROM USER WHERE USER=&amp;#39;tux&amp;#39;;
+------+-------------+-------------+-------------+
| USER | select_priv | insert_priv | update_priv |
+------+-------------+-------------+-------------+
| tux  | Y           | N           | N           |
+------+-------------+-------------+-------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;tux&lt;/code&gt; 用户现在有了从所有表中查询记录的权限。&lt;/p&gt;
&lt;h3 id=&#34;创建自定义的数据库&#34;&gt;创建自定义的数据库&lt;/h3&gt;
&lt;p&gt;到目前为止，你一直在与默认的数据库进行交互。除了用户管理，大部分人很少会与默认的数据库进行交互。通常，你会用自定义的数据来填充创建的数据库。&lt;/p&gt;
&lt;h4 id=&#34;创建一个-mariadb-数据库&#34;&gt;创建一个 MariaDB 数据库&lt;/h4&gt;
&lt;p&gt;你可能已经可以自己在 MariaDB 中创建新数据库了。创建数据库跟新建用户差不多。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; CREATE DATABASE example;
Query OK, 1 ROW affected (0.000 sec)
&amp;gt; SHOW DATABASES;
+--------------------+
| DATABASE           |
+--------------------+
| example            |
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;use&lt;/code&gt; 命令来把这个新建的数据库作为当前使用的库：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; USE example;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建一个表&#34;&gt;创建一个表&lt;/h4&gt;
&lt;p&gt;创建表比创建数据库要复杂，因为你必须定义列首。MariaDB 提供了很多方便的函数，可以用于创建列，引入数据类型定义，自增选项，对空值的约束，自动时间戳等等。&lt;/p&gt;
&lt;p&gt;下面是用来描述一系列用户的一个简单的表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; CREATE TABLE IF NOT EXISTS member (
    -&amp;gt; id INT AUTO_INCREMENT PRIMARY KEY,
    -&amp;gt; name VARCHAR(128) NOT NULL,
    -&amp;gt; startdate TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
Query OK, 0 ROWS affected (0.030 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个表通过使用一个自动递增的方法来唯一标识每一行。表示用户名字的字段不能为空（或 &lt;code&gt;null&lt;/code&gt;），每一行被创建时会自动生成时间戳。&lt;/p&gt;
&lt;p&gt;使用 SQL 关键字 &lt;code&gt;INSERT&lt;/code&gt; 向这个表填充一些示例数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; INSERT INTO member (name) VALUES (&amp;#39;Alice&amp;#39;);
Query OK, 1 ROW affected (0.011 sec)
&amp;gt; INSERT INTO member (name) VALUES (&amp;#39;Bob&amp;#39;);
Query OK, 1 ROW affected (0.011 sec)
&amp;gt; INSERT INTO member (name) VALUES (&amp;#39;Carol&amp;#39;);
Query OK, 1 ROW affected (0.011 sec)
&amp;gt; INSERT INTO member (name) VALUES (&amp;#39;David&amp;#39;);
Query OK, 1 ROW affected (0.011 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证一下表里的数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; SELECT * FROM member;
+----+-------+---------------------+
| id | name  | startdate           |
+----+-------+---------------------+
|  1 | Alice | 2020-10-03 15:25:06 |
|  2 | Bob   | 2020-10-03 15:26:43 |
|  3 | Carol | 2020-10-03 15:26:46 |
|  4 | David | 2020-10-03 15:26:51 |
+----+-------+---------------------+
4 ROWS IN SET (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;同时增加多行数据&#34;&gt;同时增加多行数据&lt;/h4&gt;
&lt;p&gt;再创建一个表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; CREATE TABLE IF NOT EXISTS linux (
    -&amp;gt; id INT AUTO_INCREMENT PRIMARY KEY,
    -&amp;gt; distro VARCHAR(128) NOT NULL);
Query OK, 0 ROWS affected (0.030 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;填充一些示例数据，这次使用 &lt;code&gt;VALUES&lt;/code&gt; 快捷方式，这样你可以一次添加多行数据。&lt;code&gt;VALUES&lt;/code&gt; 关键字需要一个用括号包围的列表作为参数，也可以用逗号分隔的多个列表作为参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; INSERT INTO linux (distro)
 -&amp;gt; VALUES (&amp;#39;Slackware&amp;#39;), (&amp;#39;RHEL&amp;#39;),(&amp;#39;Fedora&amp;#39;),(&amp;#39;Debian&amp;#39;);
Query OK, 4 ROWS affected (0.011 sec)
Records: 4  Duplicates: 0  Warnings: 0
&amp;gt; SELECT * FROM linux;
+----+-----------+
| id | distro    |
+----+-----------+
|  1 | Slackware |
|  2 | RHEL      |
|  3 | Fedora    |
|  4 | Debian    |
+----+-----------+
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;关联多个表&#34;&gt;关联多个表&lt;/h3&gt;
&lt;p&gt;现在你有两个表，之间没有关联。两个表的数据是独立的，但是你可能需要表一中的一个值来识别表二的记录。&lt;/p&gt;
&lt;p&gt;你可以在表一中新增一列对应表二中的值。因为两个表都有唯一的标识符（自动递增的 &lt;code&gt;id&lt;/code&gt; 字段），关联的它们的最简单的方式是，使用表一中的 &lt;code&gt;id&lt;/code&gt; 字段作为表二的查询条件。&lt;/p&gt;
&lt;p&gt;在表一中创建一列用来表示表二中的一个值：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; ALTER TABLE member ADD COLUMN (os INT);
Query OK, 0 ROWS affected (0.012 sec)
Records: 0  Duplicates: 0  Warnings: 0
&amp;gt; DESCRIBE member;
DESCRIBE member;
+-----------+--------------+------+-----+---------+------+
| FIELD     | TYPE         | NULL | KEY | DEFAULT | Extra|
+-----------+--------------+------+-----+---------+------+
| id        | INT(11)      | NO   | PRI | NULL    | auto_|
| name      | VARCHAR(128) | NO   |     | NULL    |      |
| startdate | TIMESTAMP    | NO   |     | cur[...]|      |
| os        | INT(11)      | YES  |     | NULL    |      |
+-----------+--------------+------+-----+---------+------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把 &lt;code&gt;linux&lt;/code&gt; 表中的唯一 ID 分配给每个成员。因为记录已经存在，使用 &lt;code&gt;UPDATE&lt;/code&gt; 关键字而不是 &lt;code&gt;INSERT&lt;/code&gt;。尤其是当你想查询某行然后再更新某列值时。语法上，表达方式有点倒装，先更新后查询：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; UPDATE member SET os=1 WHERE name=&amp;#39;Alice&amp;#39;;
Query OK, 1 ROW affected (0.007 sec)
ROWS matched: 1  Changed: 1  Warnings: 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要填充数据，请对其他名字重复执行这个过程。为了数据的多样性，在四行记录中分配三个不同的值。&lt;/p&gt;
&lt;h4 id=&#34;连接表&#34;&gt;连接表&lt;/h4&gt;
&lt;p&gt;现在这两个表彼此有了关联，你可以使用 SQL 来展示关联的数据。数据库中有很多种连接方式，你可以尽请尝试。下面的例子是关联 &lt;code&gt;member&lt;/code&gt; 表中 &lt;code&gt;os&lt;/code&gt; 字段和 &lt;code&gt;linux&lt;/code&gt; 表中 &lt;code&gt;id&lt;/code&gt; 字段：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT * FROM member JOIN linux ON member.os=linux.id;
+----+-------+---------------------+------+----+-----------+
| id | name  | startdate           | os   | id | distro    |
+----+-------+---------------------+------+----+-----------+
|  1 | Alice | 2020-10-03 15:25:06 |    1 |  1 | Slackware |
|  2 | Bob   | 2020-10-03 15:26:43 |    3 |  3 | Fedora    |
|  4 | David | 2020-10-03 15:26:51 |    3 |  3 | Fedora    |
|  3 | Carol | 2020-10-03 15:26:46 |    4 |  4 | Debian    |
+----+-------+---------------------+------+----+-----------+
4 ROWS IN SET (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连接 &lt;code&gt;os&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 字段。&lt;/p&gt;
&lt;p&gt;在图形化的应用中，你可以想象 &lt;code&gt;os&lt;/code&gt; 字段可以在下拉菜单中设置，值的来源是 &lt;code&gt;linux&lt;/code&gt; 表中的 &lt;code&gt;distro&lt;/code&gt; 字段。通过使用多个表中独立却有关联的数据，你可以保证数据的一致性和有效性，使用 SQL 你可以动态地关联它们。&lt;/p&gt;
&lt;h3 id=&#34;下载-mariadb-和-mysql-备忘单&#34;&gt;下载 MariaDB 和 MySQL 备忘单&lt;/h3&gt;
&lt;p&gt;MariaDB 是企业级的数据库。它是健壮、强大、高效的数据库引擎。学习它是你向管理 web 应用和编写语言库迈出的伟大的一步。你可以&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/downloads/mariadb-mysql-cheat-sheet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载 MariaDB 和 MySQL 备忘单&lt;/a&gt;，在你使用 MariaDB 时可以快速参考。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;via: &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/20/10/mariadb-mysql-cheat-sheet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opensource.com/article/20/10/mariadb-mysql-cheat-sheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/users/seth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Seth Kenlon&lt;/a&gt;
选题：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lujun9972&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lujun9972&lt;/a&gt;
译者：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lxbwolf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lxbwolf&lt;/a&gt;
校对：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文由 &lt;a class=&#34;link&#34; href=&#34;https://github.com/LCTT/TranslateProject&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCTT&lt;/a&gt; 原创编译，&lt;a class=&#34;link&#34; href=&#34;https://linux.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;
</description>
        </item>
        <item>
        <title>mysqldump: Got error: 1044: Access denied for user</title>
        <link>http://lxb.wiki/a333bc04/</link>
        <pubDate>Sat, 27 Apr 2019 11:24:27 +0000</pubDate>
        
        <guid>http://lxb.wiki/a333bc04/</guid>
        <description>&lt;p&gt;&lt;code&gt;mysqldump -u username -p dbname &amp;gt; dbname.sql&lt;/code&gt; mysqldump: Got error: 1044: Access denied for user XXX to database XXX when using LOCK TABLES 解决方法: &lt;code&gt;mysqldump -u dbuser -ppass db --skip-lock-tables &amp;gt; db.sql&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>分布式数据库系统(DDBS)</title>
        <link>http://lxb.wiki/728c18a3/</link>
        <pubDate>Wed, 10 Apr 2019 14:00:41 +0000</pubDate>
        
        <guid>http://lxb.wiki/728c18a3/</guid>
        <description>&lt;p&gt;业务规模较小时，使用单机mysql作存储。但伴随业务发展，存储容量和并发能力会有瓶颈。&lt;/p&gt;
&lt;p&gt;首先，假设单机的硬盘为1.8T，也可以挂更大容量硬盘，但仍有限。&lt;/p&gt;
&lt;p&gt;其次，单机的读写并发能力有限，假设峰值写入qps1000，峰值读取qps3000，网卡对读取时流量也有要求，单次访问的读取量不应过大。&lt;/p&gt;
&lt;p&gt;单机的链接数也有限。&lt;/p&gt;
&lt;p&gt;那么，当使用单机mysql的业务发展，受到以上瓶颈时，一般的思路会是什么呢？一台机器不行，用两台呢，再不行，扩展更多台。&lt;/p&gt;
&lt;p&gt;一台扩展为两台，磁盘容量扩大了，通过分表，将表打散在不同机器上，共同承担写入任务，并发也提高了，感觉这个思路是对的。&lt;/p&gt;
&lt;p&gt;那么在这个过程中，我们需要做什么？&lt;/p&gt;
&lt;p&gt;业务发展到单机无法承受，即使在单机上，很多表应该也做过分表了。一般会根据业务选择分表键。单个表的大小mysql也有一定要求，一般存储量不大于1G，单条记录小一些，一般不超过1k，条数一般不超过1000万条，最多不超过5000万条，否则表的使用和维护效率都很低。假设业务已经做了足够多的分表，满足三年的数据增长需要，第一年过后，每个分表的条数达到200万条，整机存储容量使用了一半，此时我们想拆分为两台机器。&lt;/p&gt;
&lt;p&gt;此时我们可以将原机器上部分表数据同步到新机器上，并在model层抽象一个路由层，将对数据库的操作发到不同的机器上，上层业务仍可以认为在使用单机。此时可以将原机器上不归属自己管理范围的表删除，腾出空间。&lt;/p&gt;
&lt;p&gt;一台变成了两台，向分布式走了一步。此时存储容量和并发都提高了，由路由层管理两台机器。如果两台或今后的多台机器，并发数高于路由层处理能力怎么办？那还要把路由层机器也扩一下，把路由规则都写进去，大家按一个格则办事。&lt;/p&gt;
&lt;p&gt;经过上面的一番折腾，数据库机器水平扩展，解决了单机存在的一些问题。在这个扩展的过程中，是否会对业务产生中断影响呢？&lt;/p&gt;
&lt;p&gt;会有一点影响。至少在路由层改路由表时，会中断数据库的写入，读取此时可以不中断。&lt;/p&gt;
&lt;p&gt;ddbs中，使用到的多台机器，都叫做分片。分片提高了系统存储容量和并发能力，引入分片，也是系统的复杂度提高了，需要引入路由层机器，路由机器也可能需要扩展，复杂操作，还需要添加更多逻辑功能。但至少可以可业务逻辑区分开，业务可以把ddbs当做单机在使用。&lt;/p&gt;
&lt;p&gt;那么ddbs有哪些不足呢？&lt;/p&gt;
&lt;p&gt;ddbs还是要基于分表、分片实现的。那么对数据库的任何操作，首要条件是需要指明操作的分表键。没有这个维度的准确值，就不能对数据库操作，当然除非是备用库，那你随便扫表，因为备用库可以转为冗余安全，不走线上流量，可以做统计任务。&lt;/p&gt;
&lt;p&gt;单指明分表键还不行，还要注意操作的数据可能会分布在不同分表、不同分片中，这样的操作会引发ddbs产生大量并发操作，业务的一个请求就会占用多个机器多个链接，使ddbs得并发能力大打折扣。比如 ‘where 分表键 in （）’操作，这种操作要慎重，in中个数不可太多。&lt;/p&gt;
&lt;p&gt;分表键最好选用整形，字符串型，可能hash后分配不均，表大小不均衡。&lt;/p&gt;
&lt;p&gt;事物操作在ddbs中的实现，非常耗费系统性能。事务类操作需要路由控制层控制整个操作过程，期中可能涉及多个分片，多个不同的表的操作，对系统整体可用性要求高&lt;/p&gt;
</description>
        </item>
        <item>
        <title>mysql启动时 &amp;quot;No space left on device&amp;quot;</title>
        <link>http://lxb.wiki/77f38978/</link>
        <pubDate>Tue, 28 Aug 2018 19:04:37 +0000</pubDate>
        
        <guid>http://lxb.wiki/77f38978/</guid>
        <description>&lt;p&gt;先用&lt;code&gt;free&lt;/code&gt; 命令查看剩余空间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@tokyo mysqld]# free
              total        used        free      shared  buff/cache   available
Mem:        1016108      632132      205776       66344      178200      180496
Swap:             0           0           0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现swap 为零了&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=/swapfile bs=1M count=1024
mkswap /swapfile
wapon /swapfile
swapon /swapfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再用&lt;code&gt;free&lt;/code&gt;查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@tokyo ~]# free
              total        used        free      shared  buff/cache   available
Mem:        1016108      732148       63984       51400      219976       71132
Swap:       1048572      209240      839332
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动mysql, 解决&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
