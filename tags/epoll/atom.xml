<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>epoll on Xiaobin&#39;s Blog</title>
        <link>https://lxb.wiki/tags/epoll/</link>
        <description>Recent content in epoll on Xiaobin&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 06 Jun 2021 22:18:57 +0000</lastBuildDate><atom:link href="https://lxb.wiki/tags/epoll/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>epoll高效运行的原理</title>
        <link>https://lxb.wiki/3bdc8aea/</link>
        <pubDate>Sun, 06 Jun 2021 22:18:57 +0000</pubDate>
        
        <guid>https://lxb.wiki/3bdc8aea/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;p&gt;epoll是一种I/O事件通知机制，是linux 内核实现IO多路复用的一个实现。
IO多路复用是指，在一个操作里同时监听多个输入输出源，在其中一个或多个输入输出源可用的时候返回，然后对其的进行读写操作。&lt;/p&gt;
&lt;h1 id=&#34;io&#34;&gt;I/O&lt;/h1&gt;
&lt;p&gt;输入输出(input/output)的对象可以是文件(file)， 网络(socket)，进程之间的管道(pipe)。在linux系统中，都用文件描述符(fd)来表示。&lt;/p&gt;
&lt;h1 id=&#34;事件&#34;&gt;事件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可读事件，当文件描述符关联的内核读缓冲区可读，则触发可读事件。(可读：内核缓冲区非空，有数据可以读取)&lt;/li&gt;
&lt;li&gt;可写事件，当文件描述符关联的内核写缓冲区可写，则触发可写事件。(可写：内核缓冲区不满，有空闲空间可以写入）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;通知机制&#34;&gt;通知机制&lt;/h1&gt;
&lt;p&gt;通知机制，就是当事件发生的时候，则主动通知。通知机制的反面，就是轮询机制。&lt;/p&gt;
&lt;h1 id=&#34;epoll-的通俗解释&#34;&gt;epoll 的通俗解释&lt;/h1&gt;
&lt;p&gt;结合以上三条，epoll的通俗解释是一种当文件描述符的内核缓冲区非空的时候，发出可读信号进行通知，当写缓冲区不满的时候，发出可写信号通知的机制&lt;/p&gt;
&lt;p&gt;epoll 的 API&lt;/p&gt;
&lt;p&gt;epoll的核心是3个API，核心数据结构是：1个红黑树和1个链表&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220211152245.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-int-epoll_createint-size&#34;&gt;1. int epoll_create(int size)&lt;/h2&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核会产生一个epoll 实例数据结构并返回一个文件描述符，这个特殊的描述符就是epoll实例的句柄，后面的两个接口都以它为中心（即epfd形参）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;size参数表示所要监视文件描述符的最大值，不过在后来的Linux版本中已经被弃用（同时，size不要传0，会报invalid argument错误）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-int-epoll_ctlint-epfd-int-op-int-fd-struct-epoll_event-event&#34;&gt;2. int epoll_ctl(int epfd， int op， int fd， struct epoll_event *event)&lt;/h2&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将被监听的描述符添加到红黑树或从红黑树中删除或者对监听事件进行修改&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; epoll_data {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr; &lt;span style=&#34;color:#75715e&#34;&gt;/* 指向用户自定义数据 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd; &lt;span style=&#34;color:#75715e&#34;&gt;/* 注册的文件描述符 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; u32; &lt;span style=&#34;color:#75715e&#34;&gt;/* 32-bit integer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; u64; &lt;span style=&#34;color:#75715e&#34;&gt;/* 64-bit integer */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;epoll_data_t&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; epoll_event {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; events; &lt;span style=&#34;color:#75715e&#34;&gt;/* 描述epoll事件 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;epoll_data_t&lt;/span&gt; data; &lt;span style=&#34;color:#75715e&#34;&gt;/* 见上面的结构体 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于需要监视的文件描述符集合，epoll_ctl对红黑树进行管理，红黑树中每个成员由描述符值和所要监控的文件描述符指向的文件表项的引用等组成。&lt;/p&gt;
&lt;p&gt;op参数说明操作类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EPOLL_CTL_ADD：向interest list添加一个需要监视的描述符&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_DEL：从interest list中删除一个描述符&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_MOD：修改interest list中一个描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;struct epoll_event结构描述一个文件描述符的epoll行为。在使用epoll_wait函数返回处于ready状态的描述符列表时，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data域是唯一能给出描述符信息的字段，所以在调用epoll_ctl加入一个需要监测的描述符时，一定要在此域写入描述符相关信息&lt;/li&gt;
&lt;li&gt;events域是bit mask，描述一组epoll事件，在epoll_ctl调用中解释为：描述符所期望的epoll事件，可多选。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的epoll事件描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EPOLLIN：描述符处于可读状态&lt;/li&gt;
&lt;li&gt;EPOLLOUT：描述符处于可写状态&lt;/li&gt;
&lt;li&gt;EPOLLET：将epoll event通知模式设置成edge triggered&lt;/li&gt;
&lt;li&gt;EPOLLONESHOT：第一次进行通知，之后不再监测&lt;/li&gt;
&lt;li&gt;EPOLLHUP：本端描述符产生一个挂断事件，默认监测事件&lt;/li&gt;
&lt;li&gt;EPOLLRDHUP：对端描述符产生一个挂断事件&lt;/li&gt;
&lt;li&gt;EPOLLPRI：由带外数据触发&lt;/li&gt;
&lt;li&gt;EPOLLERR：描述符产生错误时触发，默认检测事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-int-epoll_waitint-epfd-struct-epoll_event-events-int-maxevents-int-timeout&#34;&gt;3. int epoll_wait(int epfd， struct epoll_event *events， int maxevents， int timeout)&lt;/h2&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞等待注册的事件发生，返回事件的数目，并将触发的事件写入events数组中。&lt;/li&gt;
&lt;li&gt;events: 用来记录被触发的events，其大小应该和maxevents一致&lt;/li&gt;
&lt;li&gt;maxevents: 返回的events的最大个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处于ready状态的那些文件描述符会被复制进ready list中，epoll_wait用于向用户进程返回ready list。events和maxevents两个参数描述一个由用户分配的struct epoll event数组，调用返回时，内核将ready list复制到这个数组中，并将实际复制的个数作为返回值。注意，如果ready list比maxevents长，则只能复制前maxevents个成员；反之，则能够完全复制ready list。
另外，struct epoll event结构中的events域在这里的解释是：在被监测的文件描述符上实际发生的事件。
参数timeout描述在函数调用中阻塞时间上限，单位是ms：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timeout = -1表示调用将一直阻塞，直到有文件描述符进入ready状态或者捕获到信号才返回；&lt;/li&gt;
&lt;li&gt;timeout = 0用于非阻塞检测是否有描述符处于ready状态，不管结果怎么样，调用都立即返回；&lt;/li&gt;
&lt;li&gt;timeout &amp;gt; 0表示调用将最多持续timeout时间，如果期间有检测对象变为ready状态或者捕获到信号则返回，否则直到超时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;epoll的两种触发方式&#34;&gt;epoll的两种触发方式&lt;/h1&gt;
&lt;p&gt;epoll监控多个文件描述符的I/O事件。epoll支持边缘触发(edge trigger，ET)或水平触发（level trigger，LT)，通过epoll_wait等待I/O事件，如果当前没有可用的事件则阻塞调用线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;select和poll只支持LT工作模式，epoll的默认的工作模式是LT模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1水平触发的时机&#34;&gt;1.水平触发的时机&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对于读操作，只要缓冲内容不为空，LT模式返回读就绪。&lt;/li&gt;
&lt;li&gt;对于写操作，只要缓冲区还不满，LT模式会返回写就绪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知处理程序去读写。如果这次没有把数据一次性全部读写完(如读写缓冲区太小)，那么下次调用 epoll_wait()时，它还会通知你在上没读写完的文件描述符上继续读写，当然如果你一直不去读写，它会一直通知你。如果系统中有大量你不需要读写的就绪文件描述符，而它们每次都会返回，这样会大大降低处理程序检索自己关心的就绪文件描述符的效率。&lt;/p&gt;
&lt;h2 id=&#34;2边缘触发的时机&#34;&gt;2.边缘触发的时机&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于读操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;当缓冲区由不可读变为可读的时候，即缓冲区由空变为不空的时候。&lt;/li&gt;
&lt;li&gt;当有新数据到达时，即缓冲区中的待读数据变多的时候。&lt;/li&gt;
&lt;li&gt;当缓冲区有数据可读，且应用进程对相应的描述符进行EPOLL_CTL_MOD 修改EPOLLIN事件时。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对于写操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;当缓冲区由不可写变为可写时。&lt;/li&gt;
&lt;li&gt;当有旧数据被发送走，即缓冲区中的内容变少的时候。&lt;/li&gt;
&lt;li&gt;当缓冲区有空间可写，且应用进程对相应的描述符进行EPOLL_CTL_MOD 修改EPOLLOUT事件时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知处理程序去读写。如果这次没有把数据全部读写完(如读写缓冲区太小)，那么下次调用epoll_wait()时，它不会通知你，也就是它只会通知你一次，直到该文件描述符上出现第二次可读写事件才会通知你。这种模式比水平触发效率高，系统不会充斥大量你不关心的就绪文件描述符。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在ET模式下， 缓冲区从不可读变成可读，会唤醒应用进程，缓冲区数据变少的情况，则不会再唤醒应用进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例1：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读缓冲区刚开始是空的&lt;/li&gt;
&lt;li&gt;读缓冲区写入2KB数据&lt;/li&gt;
&lt;li&gt;水平触发和边缘触发模式此时都会发出可读信号&lt;/li&gt;
&lt;li&gt;收到信号通知后，读取了1KB的数据，读缓冲区还剩余1KB数据&lt;/li&gt;
&lt;li&gt;水平触发会再次进行通知，而边缘触发不会再进行通知&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例2：（以脉冲的高低电平为例）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;水平触发：0为无数据，1为有数据。缓冲区有数据则一直为1，则一直触发。&lt;/li&gt;
&lt;li&gt;边缘触发发：0为无数据，1为有数据，只要在0变到1的上升沿才触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK并没有实现边缘触发，Netty重新实现了epoll机制，采用边缘触发方式；另外像Nginx也采用边缘触发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JDK在Linux已经默认使用epoll方式，但是JDK的epoll采用的是水平触发，而Netty重新实现了epoll机制，采用边缘触发方式，netty epoll transport 暴露了更多的nio没有的配置参数，如 TCP_CORK, SO_REUSEADDR等等；另外像Nginx也采用边缘触发。&lt;/p&gt;
&lt;h1 id=&#34;epoll与selectpoll的对比&#34;&gt;epoll与select、poll的对比&lt;/h1&gt;
&lt;h2 id=&#34;1-用户态将文件描述符传入内核的方式&#34;&gt;1. 用户态将文件描述符传入内核的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;select：创建3个文件描述符集并拷贝到内核中，分别监听读、写、异常动作。这里受到单个进程可以打开的fd数量限制，默认是1024。&lt;/li&gt;
&lt;li&gt;poll：将传入的struct pollfd结构体数组拷贝到内核中进行监听。&lt;/li&gt;
&lt;li&gt;epoll：执行epoll_create会在内核的高速cache区中建立一颗红黑树以及就绪链表(该链表存储已经就绪的文件描述符)。接着用户执行的epoll_ctl函数添加文件描述符会在红黑树上增加相应的结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-内核态检测文件描述符读写状态的方式&#34;&gt;2. 内核态检测文件描述符读写状态的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;select：采用轮询方式，遍历所有fd，最后返回一个描述符读写操作是否就绪的mask掩码，根据这个掩码给fd_set赋值。&lt;/li&gt;
&lt;li&gt;poll：同样采用轮询方式，查询每个fd的状态，如果就绪则在等待队列中加入一项并继续遍历。&lt;/li&gt;
&lt;li&gt;epoll：采用回调机制。在执行epoll_ctl的add操作时，不仅将文件描述符放到红黑树上，而且也注册了回调函数，内核在检测到某文件描述符可读/可写时会调用回调函数，该回调函数将文件描述符放在就绪链表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-找到就绪的文件描述符并传递给用户态的方式&#34;&gt;3. 找到就绪的文件描述符并传递给用户态的方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;select：将之前传入的fd_set拷贝传出到用户态并返回就绪的文件描述符总数。用户态并不知道是哪些文件描述符处于就绪态，需要遍历来判断。&lt;/li&gt;
&lt;li&gt;poll：将之前传入的fd数组拷贝传出用户态并返回就绪的文件描述符总数。用户态并不知道是哪些文件描述符处于就绪态，需要遍历来判断。&lt;/li&gt;
&lt;li&gt;epoll：epoll_wait只用观察就绪链表中有无数据即可，最后将链表的数据返回给数组并返回就绪的数量。内核将就绪的文件描述符放在传入的数组中，所以只用遍历依次处理即可。这里返回的文件描述符是通过mmap让内核和用户空间共享同一块内存实现传递的，减少了不必要的拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-重复监听的处理方式&#34;&gt;4. 重复监听的处理方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;select：将新的监听文件描述符集合拷贝传入内核中，继续以上步骤。&lt;/li&gt;
&lt;li&gt;poll：将新的struct pollfd结构体数组拷贝传入内核中，继续以上步骤。&lt;/li&gt;
&lt;li&gt;epoll：无需重新构建红黑树，直接沿用已存在的即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;epoll更高效的原因&#34;&gt;epoll更高效的原因&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;select和poll的动作基本一致，只是poll采用链表来进行文件描述符的存储，而select采用fd标注位来存放，所以select会受到最大连接数的限制，而poll不会。&lt;/li&gt;
&lt;li&gt;select、poll、epoll虽然都会返回就绪的文件描述符数量。但是select和poll并不会明确指出是哪些文件描述符就绪，而epoll会。造成的区别就是，系统调用返回后，调用select和poll的程序需要遍历监听的整个文件描述符找到是谁处于就绪，而epoll则直接处理即可。&lt;/li&gt;
&lt;li&gt;select、poll都需要将有关文件描述符的数据结构拷贝进内核，最后再拷贝出来。而epoll创建的有关文件描述符的数据结构本身就存于内核态中，系统调用返回时利用mmap()文件映射内存加速与内核空间的消息传递：即epoll使用mmap减少复制开销。&lt;/li&gt;
&lt;li&gt;select、poll采用轮询的方式来检查文件描述符是否处于就绪态，而epoll采用回调机制。造成的结果就是，随着fd的增加，select和poll的效率会线性降低，而epoll不会受到太大影响，除非活跃的socket很多。&lt;/li&gt;
&lt;li&gt;epoll的边缘触发模式效率高，系统不会充斥大量不关心的就绪文件描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
