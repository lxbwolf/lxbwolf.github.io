<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Design on Xiaobin&#39;s Notes</title>
        <link>https://lxb.wiki/categories/Design/</link>
        <description>Recent content in Design on Xiaobin&#39;s Notes</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 30 Jan 2023 21:58:33 +0000</lastBuildDate><atom:link href="https://lxb.wiki/categories/Design/atom.xml" rel="self" type="application/rss+xml" /><item>
        <title>【译】构建高效的 DevOps 文化的 6 个技巧</title>
        <link>https://lxb.wiki/12428ad2/</link>
        <pubDate>Mon, 30 Jan 2023 21:58:33 +0000</pubDate>
        
        <guid>https://lxb.wiki/12428ad2/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;无论你是刚刚开始在你的组织中使用 DevOps，还是仅仅想改善你现有的文化，请考虑这些技巧以及它们与你组织的未来的关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你为什么要构建 &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/resources/devops&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DevOps&lt;/a&gt; 文化？开发团队和运维团队的精简协作有很多好处。效率是首要目标：提高新软件部署的速度，减少等待的时间。培养同事之间的信任可以提升员工的满意度，激发新的创新，并对盈利能力产生积极的影响。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/22/2/devops-documentation-maturity&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DevOps&lt;/a&gt; 是一个很广泛的思想，大家的理解也见仁见智。每个公司对于如何实行 DevOps 也各不相同。这种意见的多样性实际上是一件好事 —— 这么多的观点对于建立更强大的团队是很有用的。本指南将探讨在 DevOps 文化中鼓励同事之间更好地合作的最高技巧。&lt;/p&gt;
&lt;p&gt;下面每个部分从不同的视角介绍 DevOps 文化，并探讨了将它引入员工队伍的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230126220527.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;流程的持续发展&#34;&gt;流程的持续发展&lt;/h3&gt;
&lt;p&gt;DevOps 文化的这一核心原则使它与许多其他类型的工作场所的风气区别开来。DevOps 哲学说，犯错是有积极意义的，因为这表明你在尝试新的想法。&lt;/p&gt;
&lt;p&gt;DevOps 文化的核心是不停地创造。实际上，这意味着当测试结果显示事情由于你的改动而变坏时，不要懊恼。我们要认识到，进化的过程不是线性的，通往成功的道路也从来不是一条直线。&lt;/p&gt;
&lt;p&gt;DevOps 专家 &lt;a class=&#34;link&#34; href=&#34;https://enterprisersproject.com/user/gene-kim&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Gene Kim&lt;/a&gt; 主张勇于承担风险和进行实验。鼓励你的团队尝试不寻常的任务，以得到新的领悟。&lt;/p&gt;
&lt;p&gt;你的组织应该以利润为导向吗？你能允许你的团队尝试一些新东西（非指个人兴趣项目）吗？持续的流程发展意味着对升级目前的方法持开放态度。优秀的销售领导懂得，结果比出勤率更重要，因此，关注团队的工作方式而不是工作量的多少始终是关键。&lt;/p&gt;
&lt;h3 id=&#34;随时提供反馈并积极寻求反馈&#34;&gt;随时提供反馈并积极寻求反馈&lt;/h3&gt;
&lt;p&gt;成员之间增加信任是蓬勃发展的 DevOps 文化的另一个关键特征。无论你的员工是在学习如何建立联盟网络联系，还是试图设计他们的下一个 &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/22/7/awesome-ux-cli-application&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用户体验&lt;/a&gt; 调查，每个人都应该对他们工作的反馈持开放态度。但是，除非你的团队成员尊重彼此的意见，并相信反馈是本着善意的精神提出的，否则这永远不会发生。&lt;/p&gt;
&lt;p&gt;这种文化听起来可能是很难培养的；事实上，一些公司会比其他公司更努力地实现这一点。诚然，给予和接受反馈的成功很大程度上取决于员工的个性。在招聘过程中，也可以对此进行筛选。&lt;/p&gt;
&lt;p&gt;在你期望员工随时向同事提供反馈并主动寻求反馈之前，你应该以身作则。高管应该以身作则，公开要求公司成员对其战略决策提出探究性问题，并提供相应的反馈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230126220801.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;DevOps is the intersection of development, quality assurance, and operations&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;不断改进&#34;&gt;不断改进&lt;/h3&gt;
&lt;p&gt;在同事之间增加对智力信任的基础上，你的团队应该寻找方法来改善其工作。DevOps 的性质意味着软件开发团队将比传统方法更迅速地进行部署。&lt;/p&gt;
&lt;p&gt;这种开放的改进文化可以对开发和运维以外的部门产生积极的影响。你也可以自己去探索企业还有哪些领域会受到积极的影响。&lt;/p&gt;
&lt;p&gt;留意培训和提高技能的机会。即使一个培训课程没有广告上说的那么突出，但有机会与行业专家建立联系，并与未来建立联系，这可以提高你的组织内的思想多样性。&lt;/p&gt;
&lt;h3 id=&#34;为以后的开发保存当前的想法&#34;&gt;为以后的开发保存当前的想法&lt;/h3&gt;
&lt;p&gt;频繁使用的 &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/22/11/git-concepts&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt; 账户应该是你的 DevOps 工具链的一部分。你可以用 Git 作为软件开发和其他相关项目中产生的脚本的共同仓库。Git 作为 “版本控制” 工具而被熟知，Git 允许程序员保存他们工作的迭代、复用或改进其他人的工作。&lt;/p&gt;
&lt;p&gt;你的目标是能够保留好的想法以供将来使用。某个方法由于某种原因没有成功。然而，那套想法在当时是错误的，并不意味着它在未来永远无法成为有用的东西。&lt;/p&gt;
&lt;p&gt;由于 DevOps 的整个重点在于生产环境中的软件的端到端所有权，因此节省开发的迭代真正支持这一原则。你希望看到对手头的软件测试项目的持续关注和投入。&lt;/p&gt;
&lt;p&gt;一个简单的方法是要求开发者在开发者合同和最终项目报告中包含对未来工作的想法。确保技术服务经理知道他们应该要求提供在建设过程中出现的旁门左道的想法的例子。意识到这些小创新的人越多，在需要的时候就越有可能有人记住一个。&lt;/p&gt;
&lt;h3 id=&#34;坐在一起物理上或逻辑上&#34;&gt;坐在一起（物理上或逻辑上）&lt;/h3&gt;
&lt;p&gt;目标是对彼此的工作角色以及它们之间的相互关系有一个共同的理解。你可以通过几个简单的方法实现这一目标，用一句话概括：坐在一起。邀请其他团队参加你们的会议，完整地分享用户反馈报告。一起吃午饭，一起计划虚拟的快乐时光，一般来说，要确保你的同事都在一起。大约 90% 的拥有成熟的 DevOps 协议的团队报告说，他们清楚地了解自己对其他团队的责任，而在不成熟的 DevOps 团队中，只有大约 46% 的工作者清楚地了解自己的责任。&lt;/p&gt;
&lt;p&gt;虽然与志同道合的人结成小团体，只与被雇来执行与你相同任务的员工在一起是很诱人的，但这对整个企业来说是很糟糕的。无论你喜欢与否，所有的人都是多面手，能够在一系列的情况下贡献自己的独特才能。&lt;/p&gt;
&lt;p&gt;密切协作的理念是尊重任何人对其周围正在进行的产品或工作流程提出改进建议的能力。如果你与公司内的其他部门保持一定的距离，你将会错过无数次分享智慧想法的机会。毕竟，你往往在交流中学习得最好。&lt;/p&gt;
&lt;h3 id=&#34;致力于自动化&#34;&gt;致力于自动化&lt;/h3&gt;
&lt;p&gt;你应该以提高效率和加速流程的名义，寻求将单调的和重复的任务变为自动化。每个行业都有无聊的 —— 说得直白一点，就是愚蠢的 —— 每天或每周都要进行的工作。&lt;/p&gt;
&lt;p&gt;无论是手工将数据从一页复制到另一页，还是手工打出音频记录，每个级别的工作人员都应该坚持让机器在可能的情况下承担这些负担。现实是自动化技术每年都在进步，操作流程也应该如此。&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/20/7/open-source-test-automation-frameworks&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;自动化测试&lt;/a&gt; 对 DevOps 非常关键，它是 CALMS 框架的第二个原则（其中的 “C” 代表 “文化”）。&lt;/p&gt;
&lt;p&gt;你怎样才能实现这一点？邀请员工公开表达他们认为工作的哪些方面可以自动化，然后 —— 这里是关键的部分 —— 支持实现自动化所需的设施。这可能意味着每年花 600 美元订阅一个软件程序、一套完整的企业应用现代化解决方案，或开发人员用两天时间来建立一个在内部使用新工具。&lt;/p&gt;
&lt;p&gt;无论哪种方式，你都应该评估自动化的好处，考虑你可以为每个人节省多少时间。DevOps 的统计数据不断表明，现代公司通过整合这些有益的原则，年复一年地得到了很大的改善。&lt;/p&gt;
&lt;h3 id=&#34;探索成功的新工作方式&#34;&gt;探索成功的新工作方式&lt;/h3&gt;
&lt;p&gt;文化转变不会在一夜之间发生。不过，你越早开始，就越早看到结果。根据我的经验，当变化真正对以前进行了改进时，人们会接受它。DevOps 为这种改进提供了一个框架。无论你是刚刚在你的组织中开始使用 DevOps，还是仅仅想改善你现有的文化，请考虑以上几点以及它们与你组织的未来的关系。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;via: &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/23/1/tips-effective-devops-culture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opensource.com/article/23/1/tips-effective-devops-culture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/users/yauhen-zaremba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yauhen Zaremba&lt;/a&gt;
选题：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lkxed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lkxed&lt;/a&gt;
译者：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lxbwolf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xiaobin.Liu&lt;/a&gt;
校对：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文由 &lt;a class=&#34;link&#34; href=&#34;https://github.com/LCTT/TranslateProject&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCTT&lt;/a&gt; 原创编译，&lt;a class=&#34;link&#34; href=&#34;https://linux.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;
</description>
        </item>
        <item>
        <title>几种发布策略</title>
        <link>https://lxb.wiki/8b49ed57/</link>
        <pubDate>Tue, 10 Jan 2023 21:48:25 +0800</pubDate>
        
        <guid>https://lxb.wiki/8b49ed57/</guid>
        <description>&lt;h3 id=&#34;蓝绿发布blue-green-deployment&#34;&gt;蓝绿发布(Blue-Green Deployment)&lt;/h3&gt;
&lt;p&gt;蓝绿发布提供了一种零宕机的部署方式。不停老版本，部署新版本进行测试，确认OK，将流量切到新版本，然后老版本同时也升级到新版本。始终有两个版本同时在线，有问题可以快速切换。&lt;br&gt;
蓝绿部署中，一共有两套系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一套是正在提供服务系统，标记为“绿色”；&lt;/li&gt;
&lt;li&gt;另一套是准备发布的系统，标记为“蓝色”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：新版本升级和老版本回滚迅速。用户可以灵活控制流量走向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：成本较高，需要部署两套环境（蓝/绿）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如日常运行时，需要10台服务器支撑业务，那么使用蓝绿部署，你就需要购置二十台服务器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230905233800.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230905233801.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;金丝雀发布灰度发布canary-release&#34;&gt;金丝雀发布/灰度发布(Canary Release)&lt;/h3&gt;
&lt;p&gt;灰度发布 Gray Release（又名金丝雀发布 Canary Release）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;金丝雀发布有一个有趣的小故事，被称为「金丝雀在矿井」。这个故事用来形象地描述金丝雀发布策略的概念。&lt;br&gt;
故事背景是在过去的煤矿开采中，矿工们面临着一种危险的情况，即有毒气体的积累。由于无法直接检测到这些气体，矿工们需要一种警报机制来提醒他们是否面临危险。他们找到了一种解决方案：带上一只小小的金丝雀。&lt;br&gt;
矿工们将金丝雀放入煤矿，如果气体达到了危险的水平，金丝雀会首先受到影响并死亡，从而警示矿工们立即离开矿井以避免危险。这种警报系统保护了矿工的生命安全。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不停机旧版本，部署新版本，高比例流量（例如：95%）走旧版本，低比例流量（例如：5%）切换到新版本，通过监控观察无问题，逐步扩大范围，最终把所有流量都迁移到新版本上。属无损发布&lt;br&gt;
在软件开发中，灰度测试通常涉及将新功能或更新推送到一小部分用户，例如5％或10％的用户。&lt;br&gt;
这些用户将能够使用新功能或更新，而其他用户则不会看到它们。&lt;br&gt;
通过监视这些用户的反馈和行为，开发人员可以评估新功能或更新的效果，并识别任何问题或错误。&lt;/p&gt;
&lt;p&gt;在Java中，可以使用一些工具来实现灰度测试，例如FeatureToggle和LaunchDarkly。&lt;br&gt;
这些工具可以帮助开发人员轻松地控制新功能或更新的推出，并监视用户反馈和行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：灵活简单，不需要用户标记驱动。安全性高，新版本如果出现问题，只会发生在低比例的流量上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：成本较高，需要部署稳定/灰度两套环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230908233802.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ab测试&#34;&gt;A/B测试&lt;/h3&gt;
&lt;p&gt;首先需要明确的是，A/B测试和蓝绿部署以及金丝雀，完全是两回事。&lt;br&gt;
蓝绿部署和金丝雀是发布策略，目标是确保新上线的系统稳定，关注的是新系统的BUG、隐患。&lt;br&gt;
A/B测试是效果测试，同一时间有多个版本的服务对外服务，这些服务都是经过足够测试，达到了上线标准的服务，有差异但是没有新旧之分（它们上线时可能采用了蓝绿部署的方式）。&lt;br&gt;
A/B测试关注的是不同版本的服务的实际效果，譬如说转化率、订单情况等。&lt;br&gt;
A/B测试时，线上同时运行多个版本的服务，这些服务通常会有一些体验上的差异，譬如说页面样式、颜色、操作流程不同。相关人员通过分析各个版本服务的实际效果，选出效果最好的版本。&lt;br&gt;
在A/B测试中，需要能够控制流量的分配，譬如说，为A版本分配10%的流量，为B版本分配10%的流量，为C版本分配80%的流量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230908233803.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;滚动发布rolling-release&#34;&gt;滚动发布（Rolling Release）&lt;/h3&gt;
&lt;p&gt;每次只升级一个或多个服务，通过观察无问题，不断执行这个过程，直到集群中的全部旧版本升级到新版本。属有损发布&lt;br&gt;
K8S 默认采用了滚动发布&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：成本较低，只需要部署一套环境。出现问题影响范围，只限于发生在若干台正在滚动发布的服务上&lt;/li&gt;
&lt;li&gt;缺点：停止旧版本的过程中，无法精确计算旧版本是否已经完成它正在执行的工作，需要靠业务自身去判断。旧版本不保留，一旦全部升级完毕后才发现问题，无法快速回滚，必须重新降级部署。发布和回滚需要较长的时间周期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxbwolf/blog_source_image/main/20230908233804.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;红黑部署red-black-deployment&#34;&gt;红黑部署(Red-Black Deployment)&lt;/h3&gt;
&lt;p&gt;这是Netflix采用的部署手段，Netflix的主要基础设施是在AWS上，所以它利用AWS的特性，在部署新的版本时，通过AutoScaling Group用包含新版本应用的AMI的LaunchConfiguration创建新的服务器。测试不通过，找到问题原因后，直接干掉新生成的服务器以及Autoscaling Group就可以，测试通过，则将ELB指向新的服务器集群，然后销毁掉旧的服务器集群以及AutoScaling Group。&lt;/p&gt;
&lt;p&gt;红黑部署的好处是服务始终在线，同时采用不可变部署的方式，也不像蓝绿部署一样得保持冗余的服务始终在线。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【译】解决 CI/CD 中的仓库阻抗失配</title>
        <link>https://lxb.wiki/f5fbcabb/</link>
        <pubDate>Sat, 26 Mar 2022 14:32:25 +0000</pubDate>
        
        <guid>https://lxb.wiki/f5fbcabb/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;对齐部署镜像和描述符是很困难的，但是某些策略可以使整个过程更高效。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220326161918.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在软件架构中，当两个组件之间有某些概念性或技术上的差异时会出现 &lt;!-- raw HTML omitted --&gt;阻抗失配&lt;!-- raw HTML omitted --&gt;impedance mismatch&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;。这个术语其实是从电子工程中借用的，表示电路中输入和输出的电子阻抗必须要匹配。&lt;/p&gt;
&lt;p&gt;在软件开发中，存储在镜像仓库中的镜像与存储在源码控制管理系统（LCTT 译注：SCM，Source Code Management）中它的&lt;!-- raw HTML omitted --&gt;部署描述符&lt;!-- raw HTML omitted --&gt;deployment descriptor&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;之间存在阻抗失配。你如何确定存储在 SCM 中的部署描述符表示的是正确的镜像？两个仓库追踪数据的方式并不一致，因此将一个镜像（在镜像仓库中独立存储的不可修改的二进制）和它的部署描述符（Git 中以文本文件形式存储的一系列修改记录）相匹配并不那么直观。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文假定读者已经熟悉以下概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;源码控制管理&lt;!-- raw HTML omitted --&gt;Source Control Management&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;（SCM）系统和分支&lt;/li&gt;
&lt;li&gt;Docker 或符合 OCI 标准的镜像和容器&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;容器编排系统&lt;!-- raw HTML omitted --&gt;Container Orchestration Platforms&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;（COP），如 Kubernetes&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;持续集成/持续交付&lt;!-- raw HTML omitted --&gt;Continuous Integration/Continuous Delivery&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;（CI/CD）&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;软件开发生命周期&lt;!-- raw HTML omitted --&gt;Software development lifecycle&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;（SDLC）环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;阻抗失配scm-与镜像仓库&#34;&gt;阻抗失配：SCM 与镜像仓库&lt;/h3&gt;
&lt;p&gt;为了更好地理解阻抗失配在什么场景下会成为问题，请考虑任意项目中的软件开发生命周期环境（SDLC），如开发、测试或发布环境。&lt;/p&gt;
&lt;p&gt;测试环境不会有阻抗失配。现在使用 CI/CD 的最佳实践中开发分支的最新提交都会对应开发环境中的最新部署。因此，一个典型的、成功的 CI/CD 开发流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 SCM 的开发分支提交新的修改&lt;/li&gt;
&lt;li&gt;新提交触发一次镜像构建&lt;/li&gt;
&lt;li&gt;新生成的镜像被推送到镜像仓库，标记为开发中&lt;/li&gt;
&lt;li&gt;镜像被部署到容器编排系统（COP）中的开发环境，该镜像的部署描述符也更新为从 SCM 拉取的最新描述符。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;换句话说，开发环境中最新的镜像永远与最新的部署描述符匹配。回滚到前一个构建的版本也不是问题，因为 SCM 也会跟着回滚。&lt;/p&gt;
&lt;p&gt;最终，随着开发流程继续推进，需要进行更多正式的测试，因此某个镜像 —— 镜像对应着 SCM 中的某次提交 —— 被推到测试环境。如果是一次成功的构建，那么不会有大问题，因为从开发环境推过来的镜像应该会与开发分支的最新提交相对应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发环境的最新部署被允许入库，触发入库过程&lt;/li&gt;
&lt;li&gt;最新部署的镜像被标记为测试中&lt;/li&gt;
&lt;li&gt;镜像在测试环境中被拉取和部署，（该镜像）对应从 SCM 拉取的最新部署描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到目前为止,一切都没有问题，对吗？如果出现下面的场景，会有什么问题？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 A&lt;/strong&gt;：镜像被推到下游环境，如&lt;!-- raw HTML omitted --&gt;用户验收测试&lt;!-- raw HTML omitted --&gt;user acceptance testing &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;（UAT），或者是生产环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 B&lt;/strong&gt;：测试环境中发现了一个破坏性的 bug，镜像需要回滚到某个确定正常的版本。&lt;/p&gt;
&lt;p&gt;在任一场景中，开发过程并没有停止，即开发分支上游有了一次或多次新的提交，而这意味着最新的部署描述符已经发生了变化，最新的镜像与之前部署在测试环境中的镜像不一致。对部署描述符的修改可能会也可能不会对之前版本的镜像起作用，但是它们一定是不可信任的。如果它们有了变化，那么它们就一定与目前为止你测试过的想要部署的镜像的部署描述符不一致。&lt;/p&gt;
&lt;p&gt;问题的关键是：&lt;strong&gt;如果部署的镜像不是镜像库中的最新版本，你怎么确定与部署的镜像相对应的是 SCM 中的哪个部署描述符？&lt;/strong&gt; 一言以蔽之，无法确定。两个库直接有阻抗失配。如果要详细阐述下，那么是有方法可以解决的，但是你需要做很多工作，这部分内容就是文章接下来的主题了。请注意，下面的方案并不是解决问题的唯一办法，但是已经投入到生产环境并已经对很多项目起了作用，而且已经被构建并部署到生产环境中运行了超过一年。&lt;/p&gt;
&lt;h3 id=&#34;二进制与部署描述符&#34;&gt;二进制与部署描述符&lt;/h3&gt;
&lt;p&gt;源码通常被构建成一个 Docker 镜像或符合 OCI 标准的镜像，该镜像通常被部署到一个容器编排平台（COP）上，如 Kubernetes。部署到 COP 需要部署描述符来定义镜像被如何部署以及作为容器运行，如 &lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kubernetes 部署&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CronJobs&lt;/a&gt;。这是因为在镜像和它的部署描述符之间有本质差异，在这里可以看到阻抗失配。在这次讨论中，我们认为镜像是存储在镜像仓库中不可修改的二进制。对源码的任何修改都不会修改镜像，而是用另一个新的镜像去替换它。&lt;/p&gt;
&lt;p&gt;相比之下，部署描述符是文本文件，因而可以被认为是源码且可修改。如果遵循最佳实践，那么部署描述符是被存储在 SCM，所有修改都会提交，而这很容易回溯。&lt;/p&gt;
&lt;h3 id=&#34;解决阻抗失配&#34;&gt;解决阻抗失配&lt;/h3&gt;
&lt;p&gt;建议的解决方案的第一部分，就是提供一个能匹配镜像仓库中的镜像与对保存部署描述符的 SCM 做的代码提交的方法。最直接的解决方案是用源提交的哈希值标记镜像。这个方法可以区分不同版本的镜像、容易分辨，并且提供足够的信息来查找正确的部署描述符，以便镜像更好地部署到 COP。&lt;/p&gt;
&lt;p&gt;再回顾下上面的场景：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 A&lt;/strong&gt; &lt;em&gt;镜像被推到下游环境&lt;/em&gt;： 当镜像被从测试环境推到 UAT 环境时，我们可以从镜像的标签中知道应该从 SCM 的哪一次源码提交拉取部署描述符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 B&lt;/strong&gt; &lt;em&gt;当一个镜像需要在某一环节中回滚&lt;/em&gt;：无论我们选择回滚到那个镜像版本，我们都可以知道从 SCM 的哪一次源码提交拉取正确的部署描述符。&lt;/p&gt;
&lt;p&gt;在每一种情景中，无论在某个镜像被部署到测试环境后开发分支有多少次提交和构建，对于每一次升级的镜像，我们都可以找到它当初部署时对应的部署描述符。&lt;/p&gt;
&lt;p&gt;然而，这并不是阻抗失配的完整解决方案。再考虑两个场景：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 C&lt;/strong&gt; 在负载测试环境中，会尝试对不同的部署描述符进行多次部署，以此来验证某一次构建的表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 D&lt;/strong&gt; 一个镜像被推送到下游环境，在该环境中部署描述符有一个错误。&lt;/p&gt;
&lt;p&gt;在上面的所有场景中，我们都需要修改部署描述符，但是目前为止我们只有一个源码提交哈希。请记住，最佳实践要求我们所有对源码的修改都要先提交到 SCM。某次提交的哈希本身是无法修改的，因此我们需要一个比仅仅追踪原来的源码提交哈希更好地解决方案。&lt;/p&gt;
&lt;p&gt;解决方案是基于原来的源码提交哈希新建一个分支。我们把这个分支称为&lt;strong&gt;部署分支&lt;/strong&gt;。每当一个镜像被推到下游测试或发布环境时，你应该&lt;strong&gt;基于前一个 SDLC 环境的部署分支的最新提交&lt;/strong&gt;创建一个新的部署分支。&lt;/p&gt;
&lt;p&gt;这样同一个镜像可以重复多次部署到不同的 SDLC 环境，并在后面每个环境中可以感知前面发现的改动或对镜像做的修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 在某个环境中做的修改是如何影响下一个环境的，是用可以共享数据的工具（如 Helm Charts）还是手动剪切、粘贴到其他目录，都不在本文讨论的范围内。&lt;/p&gt;
&lt;p&gt;因此，当一个镜像被从一个 SDLC 环境中推到下一环境时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个部署分支
&lt;ol&gt;
&lt;li&gt;如果镜像是从开发环境中推过来的，那么部署分支就基于构建这个镜像的源码提交哈希创建&lt;/li&gt;
&lt;li&gt;否则，&lt;em&gt;部署分支基于当前部署分支的最新提交创建&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;镜像被部署到下一个 SDLC 环境，使用的部署描述符是该环境中新创建的部署分支的部署描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220326162117.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;deployment branching tree&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图 1：部署分支树&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署分支&lt;/li&gt;
&lt;li&gt;下游环境的第一个部署分支，只有一次提交&lt;/li&gt;
&lt;li&gt;下游环境的第二个部署分支，只有一次提交&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了部署分支这个解决方案，再回顾下上面的场景 C 和场景 D：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 C&lt;/strong&gt; 修改已经部署到下游 SDLC 环境中的镜像的部署描述符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景 D&lt;/strong&gt; 修复某个 SDLC 环境中部署描述符的错误&lt;/p&gt;
&lt;p&gt;两个场景中，工作流如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把对部署描述符做的修改提交到 SLDC 环境和镜像对应的部署分支&lt;/li&gt;
&lt;li&gt;通过部署分支最新提交对应的部署描述符把镜像重新部署到 SLDC 环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，部署分支彻底解决了（存储着代表一次独一无二的构建的单一的、不可修改的镜像的）镜像仓库与（存储着对应一个或多个 SDLC 环境的可修改的部署描述符的）SCM 仓库之间的阻抗失配。&lt;/p&gt;
&lt;h3 id=&#34;实践中的思考&#34;&gt;实践中的思考&lt;/h3&gt;
&lt;p&gt;这看起来像是行得通的解决方案，但同时它也为开发者和运维人员带来了新的实践中的问题，比如：&lt;/p&gt;
&lt;p&gt;A. 为了更好地管理部署分支，部署描述符作为资源应该保存在哪里，是否要与构建镜像的源码保存在同一个 SCM 仓库？&lt;/p&gt;
&lt;p&gt;到目前为止，我们都在避免谈论应该把部署描述符放在哪个仓库里。在还没有太多细节需要处理时，我们推荐把所有 SDLC 环境的部署描述符与镜像源码放在同一个 SCM 仓库。当部署分支创建后，镜像的源码可以作为方便找到部署的容器中运行的镜像的引用来使用。&lt;/p&gt;
&lt;p&gt;上面提到过，可以通过镜像的标签来关联镜像与原始的源码提交。在一个单独的仓库中查找某次提交的源码的引用，会给开发者带来更大的困难（即便借助工具），这就是没有必要把所有资源都分开存储的原因。&lt;/p&gt;
&lt;p&gt;B. 应该在部署分支上修改构建镜像的源码吗？&lt;/p&gt;
&lt;p&gt;简答：&lt;strong&gt;不应该&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;详细阐述：不应该，因为永远不要在部署分支上构建镜像，它们是在开发分支上构建的。修改部署分支上定义一个镜像的源码会破坏被部署的镜像的构建记录，而且这些修改并不会对镜像的功能生效。在对比两个部署分支的版本时这也会成为问题。这可能会导致两个版本的功能差异有错误的测试结果（这是使用部署分支的一个很小的额外好处）。&lt;/p&gt;
&lt;p&gt;C. 为什么使用镜像 &lt;!-- raw HTML omitted --&gt;标签&lt;!-- raw HTML omitted --&gt;tag&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;？&lt;!-- raw HTML omitted --&gt;标记&lt;!-- raw HTML omitted --&gt;label&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 不可以吗？&lt;/p&gt;
&lt;p&gt;通过 &lt;!-- raw HTML omitted --&gt;标签&lt;!-- raw HTML omitted --&gt;tag&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 可以在仓库中很容易地查找镜像，可读性也很好。在一组镜像中读取和查找 &lt;!-- raw HTML omitted --&gt;标记&lt;!-- raw HTML omitted --&gt;label&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 的值需要拉取所有镜像的&lt;!-- raw HTML omitted --&gt;清单文件&lt;!-- raw HTML omitted --&gt;manifest&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;，而这会增加复杂度、降低性能。而且，考虑到历史记录的追踪和不同版本的查找，对不同版本的镜像添加 &lt;!-- raw HTML omitted --&gt;标签&lt;!-- raw HTML omitted --&gt;tag&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 也很有必要，因此使用源码提交哈希是保证唯一性，以及保存能即时生效的有用信息的最简单的解决方案。&lt;/p&gt;
&lt;p&gt;D. 创建部署分支的最佳实践是怎样的？&lt;/p&gt;
&lt;p&gt;DevOps 最重要的三个原则：自动化、自动化、自动化。&lt;/p&gt;
&lt;p&gt;依赖资源来持续地强迫遵循最佳实践，充其量只是碰运气，因此在实现镜像的升级、回滚等 CI/CD 流水线时，把自动化部署分支写到脚本里。&lt;/p&gt;
&lt;p&gt;E. 对部署分支的命名规范有建议吗？&lt;/p&gt;
&lt;p&gt;&amp;lt;&lt;strong&gt;部署分支标识&lt;/strong&gt;&amp;gt;-&amp;lt;&lt;strong&gt;环境&lt;/strong&gt;&amp;gt;-&amp;lt;&lt;strong&gt;源码提交哈希&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署分支标识&lt;/strong&gt;： 所有部署分支范围内唯一的字符串；如 “deployment” 或 “deploy”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境&lt;/strong&gt;： 部署分支适用的 SDLC 环境；如 “qa”（测试环境）、 “stg”（预生产环境）、 或 “prod”（生产环境）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;源码提交哈希&lt;/strong&gt;： 源码提交哈希中包含原来构建被部署的镜像的源码，开发者可以通过它很容易地查找到创建镜像的原始提交，同时也能保证分支名唯一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如， &lt;code&gt;deployment-qa-asdf78s&lt;/code&gt; 表示推到 QA 环境的部署分支， &lt;code&gt;deployment-stg-asdf78s&lt;/code&gt; 表示推到 STG 环境的部署分支。&lt;/p&gt;
&lt;p&gt;F. 你怎么识别环境中运行的哪个镜像版本？&lt;/p&gt;
&lt;p&gt;我们的建议是把最新的部署分支提交哈希和源码提交哈希添加到 &lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;标记&lt;/a&gt; 中。开发者和运维人员可以通过这两个独一无二的标识符查找到部署的所有东西及其来源。在诸如执行回滚或前滚操作时，使用那些不同版本的部署的选择器也能清理资源碎片。&lt;/p&gt;
&lt;p&gt;G. 什么时候应该把部署分支的修改合并回开发分支？&lt;/p&gt;
&lt;p&gt;这完全取决于开发团队。&lt;/p&gt;
&lt;p&gt;如果你修改的目的是为了做负载测试，只是想验证什么情况会让程序崩溃，那么这些修改不应该被合并回开发分支。另一方面，如果你发现和修复了一个错误，或者对下游环境的部署做了调整，那么就应该把部署分支的修改合并回开发分支。&lt;/p&gt;
&lt;p&gt;H. 有现成的部署分支示例让我们试水吗？&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/elcicd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;el-CICD&lt;/a&gt; 已经在生产上使用这个策略持续一年半应用到超过一百个项目了，覆盖所有的 SDLC 环境，包括管理生产环境的部署。如果你可以访问 &lt;a class=&#34;link&#34; href=&#34;https://www.okd.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OKD&lt;/a&gt;、Red Hat OpenShift lab cluster 或 &lt;a class=&#34;link&#34; href=&#34;https://cloud.redhat.com/openshift/create/local&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat CodeReady Containers&lt;/a&gt;，你可以下载&lt;a class=&#34;link&#34; href=&#34;https://github.com/elcicd/el-CICD-RELEASES&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;el-CICD 的最新版本&lt;/a&gt;，参照 &lt;a class=&#34;link&#34; href=&#34;https://github.com/elcicd/el-CICD-docs/blob/master/tutorial.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;教程&lt;/a&gt; 来学习部署分支是何时以怎样的方式创建和使用的。&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;
&lt;p&gt;通过实践上面的例子可以帮助你更好的理解开发过程中阻抗失配相关的问题。对齐镜像和部署描述符是成功管理部署的关键部分。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;via: &lt;a class=&#34;link&#34; href=&#34;https://opensource.com/article/21/8/impedance-mismatch-cicd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opensource.com/article/21/8/impedance-mismatch-cicd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a class=&#34;link&#34; href=&#34;https://opensource.com/users/hippyod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Evan &amp;ldquo;Hippy&amp;rdquo; Slatis&lt;/a&gt;
选题：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lujun9972&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lujun9972&lt;/a&gt;
译者：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lxbwolf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xiaobin.Liu&lt;/a&gt;
校对：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文由 &lt;a class=&#34;link&#34; href=&#34;https://github.com/LCTT/TranslateProject&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCTT&lt;/a&gt; 原创编译，&lt;a class=&#34;link&#34; href=&#34;https://linux.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SLO 和 SLA 的区别</title>
        <link>https://lxb.wiki/ee700d45/</link>
        <pubDate>Wed, 15 Dec 2021 21:08:32 +0000</pubDate>
        
        <guid>https://lxb.wiki/ee700d45/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SLO和SLA是大家常见的两个名词：服务等级目标和服务等级协议。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云计算时代，各大云服务提供商都发布有自己服务的SLA条款，比如Amazon的EC2和S3服务都有相应的SLA条款。这些大公司的SLA看上去如此的高达上，一般是怎么定义出来的呢？本文就尝试从技术角度解剖一下SLA的制定过程。&lt;/p&gt;
&lt;p&gt;说SLA不能不提SLO，这个是众所周知的，但是还有一个概念知道的人就不多了，那就是SLI（Service Level Indicator），&lt;strong&gt;定义一个可执行的SLA，好的SLO和SLI是必不可少的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;再有就是SLI/SLO/SLA都是和服务联系在一起的，脱离了服务这三个概念就没有什么意义了。&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;什么是服务？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单说就是一切提供给客户的有用功能都可以称为服务。&lt;/p&gt;
&lt;p&gt;服务一般会由服务提供者提供，提供这个有用功能的组织被称为服务提供者，通常是人加上软件，软件的运行需要计算资源，为了能对外提供有用的功能软件可能会有对其他软件系统的依赖。&lt;/p&gt;
&lt;p&gt;客户是使用服务提供者提供的服务的人或公司。&lt;/p&gt;
&lt;h2 id=&#34;sli&#34;&gt;SLI&lt;/h2&gt;
&lt;p&gt;SLI是经过仔细定义的测量指标，它根据不同系统特点确定要测量什么，SLI的确定是一个非常复杂的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SLI的确定需要回答以下几个问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要测量的指标是什么？&lt;/li&gt;
&lt;li&gt;测量时的系统状态？&lt;/li&gt;
&lt;li&gt;如何汇总处理测量的指标？&lt;/li&gt;
&lt;li&gt;测量指标能否准确描述服务质量？&lt;/li&gt;
&lt;li&gt;测量指标的可靠度(trustworthy)？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-常见的测量指标有以下几个方面&#34;&gt;1. 常见的测量指标有以下几个方面：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;响应时间(latency)
&lt;ul&gt;
&lt;li&gt;吞吐量(throughput)&lt;/li&gt;
&lt;li&gt;请求量(qps)&lt;/li&gt;
&lt;li&gt;实效性(freshness)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;运行时间(uptime)
&lt;ul&gt;
&lt;li&gt;故障时间/频率&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;质量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;准确性(accuracy)
&lt;ul&gt;
&lt;li&gt;正确性(correctness)&lt;/li&gt;
&lt;li&gt;完整性(completeness)&lt;/li&gt;
&lt;li&gt;覆盖率(coverage)&lt;/li&gt;
&lt;li&gt;相关性(relevance)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内部指标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;队列长度(queue length)
&lt;ul&gt;
&lt;li&gt;内存占用(RAM usage)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因素人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;响应时间(time to response)
&lt;ul&gt;
&lt;li&gt;修复时间(time to fix)&lt;/li&gt;
&lt;li&gt;修复率(fraction fixed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**下面通过一个例子来说明一下：**hotmail的downtime SLI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误率(error rate)计算的是服务返回给用户的error总数&lt;/li&gt;
&lt;li&gt;如果错误率大于X%，就算是服务down了，开始计算downtime&lt;/li&gt;
&lt;li&gt;如果错误率持续超过Y分钟，这个downtime就会被计算在内&lt;/li&gt;
&lt;li&gt;间断性的小于Y分钟的downtime是不被计算在内的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-测量时的系统状态在什么情况下测量会严重影响测量的结果&#34;&gt;2. 测量时的系统状态，在什么情况下测量会严重影响测量的结果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;测量异常(badly-formed)请求，还是失败(fail)请求还是超时请求(timeout)&lt;/li&gt;
&lt;li&gt;测量时的系统负载（是否最大负载）&lt;/li&gt;
&lt;li&gt;测量的发起位置，服务器端还是客户端&lt;/li&gt;
&lt;li&gt;测量的时间窗口（仅工作日、还是一周7天、是否包括计划内的维护时间段）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-如何汇总处理测量的指标&#34;&gt;3. 如何汇总处理测量的指标？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计算的时间区间是什么：是一个滚动时间窗口，还是简单的按照月份计算&lt;/li&gt;
&lt;li&gt;使用平均值还是百分位值，比如：某服务X的ticket处理响应时间SLI的&lt;/li&gt;
&lt;li&gt;测量指标：统计所有成功解决请求，从用户创建ticket到问题被解决的时间&lt;/li&gt;
&lt;li&gt;怎么测量：用ticket自带的时间戳，统计所有用户创建的ticket&lt;/li&gt;
&lt;li&gt;什么情况下的测量：只包括工作时间，不包含法定假日&lt;/li&gt;
&lt;li&gt;用于SLI的数据指标：以一周为滑动窗口，95%分位的解决时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-测量指标能否准确描述服务质量&#34;&gt;4. 测量指标能否准确描述服务质量？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;性能：时效性、是否有偏差&lt;/li&gt;
&lt;li&gt;准确性：精度、覆盖率、数据稳定性&lt;/li&gt;
&lt;li&gt;完整性：数据丢失、无效数据、异常(outlier)数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-测量指标的可靠度&#34;&gt;5. 测量指标的可靠度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是否服务提供者和客户都认可&lt;/li&gt;
&lt;li&gt;是否可被独立验证，比如三方机构&lt;/li&gt;
&lt;li&gt;客户端还是服务器端测量，取样间隔&lt;/li&gt;
&lt;li&gt;错误请求是如何计算的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;slo&#34;&gt;SLO&lt;/h2&gt;
&lt;p&gt;**SLO(服务等级目标)**指定了服务所提供功能的一种期望状态。SLO里面应该包含什么呢？所有能够描述服务应该提供什么样功能的信息。&lt;/p&gt;
&lt;p&gt;服务提供者用它来指定系统的预期状态；开发人员编写代码来实现；客户依赖于SLO进行商业判断。SLO里没有提到，如果目标达不到会怎么样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SLO是用SLI来描述的，一般描述为：&lt;/strong&gt;
比如以下SLO：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每分钟平均qps &amp;gt; 100k/s&lt;/li&gt;
&lt;li&gt;99% 访问延迟 &amp;lt; 500ms&lt;/li&gt;
&lt;li&gt;99% 每分钟带宽 &amp;gt; 200MB/s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;设置SLO时的几个最佳实践：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定计算的时间窗口&lt;/li&gt;
&lt;li&gt;使用一致的时间窗口(XX小时滚动窗口、季度滚动窗口)&lt;/li&gt;
&lt;li&gt;要有一个免责条款，比如：95%的时间要能够达到SLO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果Service是第一次设置SLO，可以遵循以下原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;测量系统当前状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;设置预期(expectations)，而不是保证(guarantees)
&lt;ul&gt;
&lt;li&gt;初期的SLO不适合作为服务质量的强化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改进SLO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;设置更低的响应时间、更改的吞吐量等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持一定的安全缓冲&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;内部用的SLO要高于对外宣称的SLO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要超额完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;定期的downtime来使SLO不超额完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置SLO时的目标依赖于系统的不同状态(conditions)，根据不同状态设置不同的SLO：&lt;strong&gt;总SLO = service1.SLO1 *weight1 service2.SLO2* weight2 …&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么要有SLO，设置SLO的好处是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于客户而言，是可预期的服务质量，可以简化客户端的系统设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于服务提供者而言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;可预期的服务质量
&lt;ul&gt;
&lt;li&gt;更好的取舍成本/收益&lt;/li&gt;
&lt;li&gt;更好的风险控制(当资源受限的时候)&lt;/li&gt;
&lt;li&gt;故障时更快的反应，采取正确措施&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SLO设好了，怎么保证能够达到目标呢？
需要一个控制系统来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控/测量SLIs&lt;/li&gt;
&lt;li&gt;对比检测到的SLIs值是否达到目标&lt;/li&gt;
&lt;li&gt;如果需要，修证目标或者修正系统以满足目标需要&lt;/li&gt;
&lt;li&gt;实施目标的修改或者系统的修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该控制系统需要重复的执行以上动作，以形成一个标准的反馈环路，不断的衡量和改进SLO/服务本身。&lt;/p&gt;
&lt;p&gt;我们讨论了目标以及目标是怎么测量的，还讨论了控制机制来达到设置的目标，但是如果因为某些原因，设置的目标达不到该怎么办呢？&lt;/p&gt;
&lt;p&gt;也许是因为大量的新增负载；也许是因为底层依赖不能达到标称的SLO而影响上次服务的SLO。这就需要SLA出场了。&lt;/p&gt;
&lt;h2 id=&#34;sla&#34;&gt;SLA&lt;/h2&gt;
&lt;p&gt;SLA是一个涉及2方的合约，双方必须都要同意并遵守这个合约。当需要对外提供服务时，SLA是非常重要的一个服务质量信号，需要产品和法务部门的同时介入。&lt;/p&gt;
&lt;p&gt;SLA用一个简单的公式来描述就是： &lt;strong&gt;SLA = SLO 后果&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SLO不能满足的一系列动作，可以是部分不能达到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;比如：达到响应时间SLO 未达到可用性SLO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对动作的具体实施&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要一个通用的货币来奖励/惩罚，比如：钱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SLA是一个很好的工具，可以用来帮助合理配置资源。一个有明确SLA的服务最理想的运行状态是：&lt;strong&gt;增加额外资源来改进系统所带来的收益小于把该资源投给其他服务所带来的收益。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个简单的例子就是某服务可用性从99.9%提高到99.99%所需要的资源和带来的收益之比，是决定该服务是否应该提供4个9的重要依据。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何写好业务代码</title>
        <link>https://lxb.wiki/4c5cb7f3/</link>
        <pubDate>Wed, 08 Dec 2021 21:51:01 +0000</pubDate>
        
        <guid>https://lxb.wiki/4c5cb7f3/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;基于阿里的零售通业务，总结出的方法论。&lt;/p&gt;
&lt;h2 id=&#34;一个复杂业务的处理过程&#34;&gt;一个复杂业务的处理过程&lt;/h2&gt;
&lt;h3 id=&#34;业务背景&#34;&gt;业务背景&lt;/h3&gt;
&lt;p&gt;零售通是给线下小店供货的B2B模式，我们希望通过数字化重构传统供应链渠道，提升供应链效率，为新零售助力。阿里在中间是一个平台角色，提供的是Bsbc中的service的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328105411.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在商品域，运营会操作一个“上架”动作，上架之后，商品就能在零售通上面对小店进行销售了。&lt;strong&gt;是零售通业务非常关键的业务操作之一，因此涉及很多的数据校验和关联操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对上架，一个简化的业务流程如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328105454.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;过程分解&#34;&gt;过程分解&lt;/h3&gt;
&lt;p&gt;像这么复杂的业务，我想应该没有人会写在一个service方法中吧。一个类解决不了，那就分治吧。&lt;/p&gt;
&lt;p&gt;说实话，能想到分而治之的工程师，已经做的不错了，至少比没有分治思维要好很多。我也见过复杂程度相当的业务，连分解都没有，就是一堆方法和类的堆砌。&lt;/p&gt;
&lt;p&gt;不过，这里存在一个问题：即很多同学过度的依赖工具或是辅助手段来实现分解。比如在我们的商品域中，类似的分解手段至少有3套以上，有自制的&lt;a class=&#34;link&#34; href=&#34;%e6%b5%81%e7%a8%8b%e5%bc%95%e6%93%8e&#34; &gt;流程引擎&lt;/a&gt;，有依赖于数据库配置的流程处理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328105631.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;本质上来讲，这些辅助手段做的都是一个pipeline的处理流程，没有其它。因此，我建议此处最好保持KISS（Keep It Simple and Stupid），即&lt;strong&gt;最好是什么工具都不要用，次之是用一个极简的Pipeline模式，最差是使用像流程引擎这样的重方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除非你的应用有极强的流程可视化和编排的诉求，否则我非常不推荐使用流程引擎等工具。第一，它会引入额外的复杂度，特别是那些需要持久化状态的流程引擎；第二，它会割裂代码，导致阅读代码的不顺畅。&lt;strong&gt;大胆断言一下，全天下估计80%对流程引擎的使用都是得不偿失的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;回到商品上架的问题，这里问题核心是工具吗？是设计模式带来的代码灵活性吗？显然不是，&lt;strong&gt;问题的核心应该是如何分解问题和抽象问题&lt;/strong&gt;，知道金&lt;a class=&#34;link&#34; href=&#34;%e9%87%91%e5%ad%97%e5%a1%94%e5%8e%9f%e7%90%86&#34; &gt;字塔原理&lt;/a&gt;的应该知道，此处，我们可以使用结构化分解将问题解构成一个有层级的金字塔结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328105756.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;按照这种分解写的代码，就像一本书，目录和内容清晰明了。&lt;/p&gt;
&lt;p&gt;以商品上架为例，程序的入口是一个上架命令（OnSaleCommand）, 它由三个阶段（Phase）组成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnSaleNormalItemCmdExe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OnSaleContextInitPhase onSaleContextInitPhase&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OnSaleDataCheckPhase onSaleDataCheckPhase&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OnSaleProcessPhase onSaleProcessPhase&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Response &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OnSaleNormalItemCmd cmd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OnSaleContext onSaleContext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cmd&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        checkData&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        process&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buildSuccess&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OnSaleContext &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OnSaleNormalItemCmd cmd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; onSaleContextInitPhase&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cmd&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OnSaleContext onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        onSaleDataCheckPhase&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OnSaleContext onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        onSaleProcessPhase&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个Phase又可以拆解成多个步骤（Step），以&lt;code&gt;OnSaleProcessPhase&lt;/code&gt;为例，它是由一系列Step组成的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Phase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OnSaleProcessPhase&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PublishOfferStep publishOfferStep&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; BackOfferBindStep backOfferBindStep&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//省略其它step
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;OnSaleContext onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SupplierItem supplierItem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; onSaleContext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSupplierItem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 生成OfferGroupNo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        generateOfferGroupNo&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// 发布商品
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        publishOffer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 前后端库存绑定 backoffer域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        bindBackOfferStock&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 同步库存路由 backoffer域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        syncStockRoute&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 设置虚拟商品拓展字段
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        setVirtualProductExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 发货保障打标 offer域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        markSendProtection&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 记录变更内容ChangeDetail
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        recordChangeDetail&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 同步供货价到BackOffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        syncSupplyPriceToBackOffer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是组合商品打标，写扩展信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        setCombineProductExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 去售罄标
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        removeSellOutTag&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;offerId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 发送领域事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        fireDomainEvent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 关闭关联的待办事项
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        closeIssues&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到了吗，这就是商品上架这个复杂业务的业务流程。需要流程引擎吗？不需要，需要设计模式支撑吗？也不需要。对于这种业务流程的表达，简单朴素的组合方法模式（Composed Method）是再合适不过的了。&lt;/p&gt;
&lt;p&gt;因此，在做过程分解的时候，我建议工程师不要把太多精力放在工具上，放在设计模式带来的灵活性上。而是应该多花时间在对问题分析，结构化分解，最后通过合理的抽象，形成合适的阶段（Phase）和步骤（Step）上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110024.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;过程分解后的两个问题&#34;&gt;过程分解后的两个问题&lt;/h3&gt;
&lt;h4 id=&#34;1领域知识被割裂肢解&#34;&gt;1、领域知识被割裂肢解&lt;/h4&gt;
&lt;p&gt;什么叫被肢解？因为我们到目前为止做的都是过程化拆解，导致没有一个聚合领域知识的地方。每个Use Case的代码只关心自己的处理流程，知识没有沉淀。&lt;/p&gt;
&lt;p&gt;相同的业务逻辑会在多个Use Case中被重复实现，导致代码重复度高，即使有复用，最多也就是抽取一个util，代码对业务语义的表达能力很弱，从而影响代码的可读性和可理解性。&lt;/p&gt;
&lt;h4 id=&#34;2代码的业务表达能力缺失&#34;&gt;2、代码的业务表达能力缺失&lt;/h4&gt;
&lt;p&gt;试想下，在过程式的代码中，所做的事情无外乎就是取数据&amp;ndash;做计算&amp;ndash;存数据，在这种情况下，要如何通过代码显性化的表达我们的业务呢？ 说实话，很难做到，因为我们缺失了模型，以及模型之间的关系。脱离模型的业务表达，是缺少韵律和灵魂的。&lt;/p&gt;
&lt;p&gt;举个例子，在上架过程中，有一个校验是检查库存的，其中对于组合品（CombineBackOffer）其库存的处理会和普通品不一样。原来的代码是这么写的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; isCombineProduct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isCombProductQuote&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// supplier.usc warehouse needn&amp;#39;t check
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;WarehouseTypeEnum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isAliWarehouse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWarehouseType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// quote warehosue check
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CollectionUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWarehouseIdList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isCombineProduct&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; ExceptionFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeFault&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServiceExceptionCode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SYSTEM_ERROR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// inventory amount check
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Long sellableAmount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;L&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;isCombineProduct&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sellableAmount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; normalBiz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSellableAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBackOfferId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWarehouseIdList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//组套商品
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    OfferModel backOffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backOfferQueryService&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBackOffer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBackOfferId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;backOffer &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sellableAmount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backOffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOffer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTradeModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTradeCondition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAmountOnSale&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sellableAmount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; ExceptionFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeFault&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServiceExceptionCode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SYSTEM_ERROR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;亲，实仓库存必须大于0才能发布，请确认已补货.\r[id:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; supplierItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，如果我们在系统中引入领域模型之后，其代码会简化为如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;backOffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isCloudWarehouse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;backOffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNonInWarehouse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BizException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;backOffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getStockAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BizException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;亲，实仓库存必须大于0才能发布，请确认已补货.\r[id:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; backOffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSupplierItem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCspuCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有没有发现，使用模型的表达要清晰易懂很多，而且也不需要做关于组合品的判断了，因为我们在系统中引入了更加贴近现实的对象模型（CombineBackOffer继承BackOffer），通过对象的多态可以消除我们代码中的大部分的 if-else。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110230.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;过程分解对象模型&#34;&gt;过程分解+对象模型&lt;/h3&gt;
&lt;p&gt;通过上面的案例，我们可以看到&lt;strong&gt;有过程分解要好于没有分解&lt;/strong&gt;，&lt;strong&gt;过程分解+对象模型要好于仅仅是过程分解&lt;/strong&gt;。对于商品上架这个case，如果采用过程分解+对象模型的方式，最终我们会得到一个如下的系统结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110335.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;写复杂业务的方法论&#34;&gt;写复杂业务的方法论&lt;/h2&gt;
&lt;p&gt;通过上面案例的讲解，我想说，我已经交代了复杂业务代码要怎么写：&lt;strong&gt;即自上而下的结构化分解+自下而上的&lt;a class=&#34;link&#34; href=&#34;%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e5%88%86%e6%9e%90&#34; &gt;面向对象分析&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;接下来，让我们把上面的案例进行进一步的提炼，形成一个可落地的方法论，从而可以泛化到更多的复杂业务场景。&lt;/p&gt;
&lt;h3 id=&#34;上下结合&#34;&gt;上下结合&lt;/h3&gt;
&lt;p&gt;所谓上下结合，是指我们要&lt;strong&gt;结合自上而下的过程分解和自下而上的对象建模&lt;/strong&gt;，螺旋式的构建我们的应用系统。这是一个动态的过程，两个步骤可以交替进行、也可以同时进行。&lt;/p&gt;
&lt;p&gt;这两个步骤是相辅相成的，&lt;strong&gt;上面的分析可以帮助我们更好的理清模型之间的关系，而下面的模型表达可以提升我们代码的复用度和业务语义表达能力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110449.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用这种上下结合的方式，我们就有可能在面对任何复杂的业务场景，都能写出干净整洁、易维护的代码。&lt;/p&gt;
&lt;h3 id=&#34;能力下沉&#34;&gt;能力下沉&lt;/h3&gt;
&lt;p&gt;一般来说实践DDD有两个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;套概念阶段&#34;&gt;套概念阶段&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;了解了一些DDD的概念，然后在代码中“使用”Aggregation Root，Bonded Context，Repository等等这些概念。更进一步，也会使用一定的分层策略。然而这种做法一般对&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/search?q=%e5%a4%8d%e6%9d%82%e5%ba%a6&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7b%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A874296743%7d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;复杂度&lt;/a&gt;的治理并没有多大作用。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;h4 id=&#34;融会贯通阶段&#34;&gt;融会贯通阶段&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;术语已经不再重要，理解DDD的本质是统一语言、边界划分和面向对象分析的方法。&lt;/p&gt;
&lt;p&gt;大体上而言，我大概是在1.7的阶段，因为有一个问题一直在困扰我，就是哪些能力应该放在Domain层，是不是按照传统的做法，将所有的业务都收拢到Domain上，这样做合理吗？说实话，这个问题我一直没有想清楚。&lt;/p&gt;
&lt;p&gt;因为在现实业务中，很多的功能都是用例特有的（Use case specific）的，如果“盲目”的使用Domain收拢业务并不见得能带来多大的益处。相反，这种收拢会导致Domain层的膨胀过厚，不够纯粹，反而会影响复用性和表达能力。&lt;/p&gt;
&lt;p&gt;鉴于此，我最近的思考是我们应该采用&lt;strong&gt;能力下沉&lt;/strong&gt;的策略。&lt;/p&gt;
&lt;p&gt;所谓的能力下沉，是指我们不强求一次就能设计出Domain的能力，也不需要强制要求把所有的业务功能都放到Domain层，而是采用实用主义的态度，即只对那些需要在多个场景中需要被复用的能力进行抽象下沉，而不需要复用的，就暂时放在App层的Use Case里就好了。&lt;/p&gt;
&lt;p&gt;注：Use Case是《架构整洁之道》里面的术语，简单理解就是响应一个Request的处理过程&lt;/p&gt;
&lt;p&gt;通过实践，&lt;strong&gt;我发现这种循序渐进的能力下沉策略，应该是一种更符合实际、更敏捷的方法。因为我们承认模型不是一次性设计出来的，而是迭代演化出来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下沉的过程如下图所示，假设两个use case中，我们发现uc1的step3和uc2的step1有类似的功能，我们就可以考虑让其下沉到Domain层，从而增加代码的复用性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110552.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指导下沉有两个关键指标：代码的复用性和内聚性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;复用性是告诉我们When（什么时候该下沉了），即有重复代码的时候。内聚性是告诉我们How（要下沉到哪里），功能有没有内聚到恰当的实体上，有没有放到合适的层次上（因为Domain层的能力也是有两个层次的，一个是Domain Service这是相对比较粗的粒度，另一个是Domain的Model这个是最细粒度的复用）。&lt;/p&gt;
&lt;p&gt;比如，在我们的商品域，经常需要判断一个商品是不是最小单位，是不是中包商品。像这种能力就非常有必要直接挂载在Model上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CSPU&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String code&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String baseCode&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//省略其它属性
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 单品是否为最小单位。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isMinimumUnit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; baseCode&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 针对中包的特殊处理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isMidPackage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; midPackageCode&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之前，因为老系统中没有领域模型，没有CSPU这个实体。你会发现像判断单品是否为最小单位的逻辑是以&lt;code&gt;StringUtils.equals(code, baseCode)&lt;/code&gt;的形式散落在代码的各个角落。这种代码的可理解性是可想而知的，至少我在第一眼看到这个代码的时候，是完全不知道什么意思。&lt;/p&gt;
&lt;h2 id=&#34;业务技术要怎么做&#34;&gt;业务技术要怎么做&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;业务技术到底是在做业务，还是做技术？业务技术的技术性体现在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过上面的案例，我们可以看到业务所面临的复杂性并不亚于底层技术，要想写好业务代码也不是一件容易的事情。业务技术和底层技术人员唯一的区别是他们所面临的问题域不一样。&lt;/p&gt;
&lt;p&gt;业务技术面对的问题域变化更多、面对的人更加庞杂。而底层技术面对的问题域更加稳定、但对技术的要求更加深。比如，如果你需要去开发Pandora，你就要对Classloader有更加深入的了解才行。&lt;/p&gt;
&lt;p&gt;但是，不管是业务技术还是底层技术人员，有一些思维和能力都是共通的。比如，&lt;strong&gt;分解问题的能力，抽象思维，结构化思维&lt;/strong&gt;等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220328110806.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>基于zookeeper实现统一配置管理</title>
        <link>https://lxb.wiki/15475898/</link>
        <pubDate>Fri, 15 Oct 2021 22:17:32 +0000</pubDate>
        
        <guid>https://lxb.wiki/15475898/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;为什么要用统一配置？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们做项目时用到的配置比如数据库配置等&amp;hellip;我们都是写死在项目里面，如果需要更改，那么也是的修改配置文件然后再投产上去，那么问题来了，如果做集群的呢，有100台机器，这时候做修改那就太不切实际了；那么就需要用到统一配置管理啦。&lt;/p&gt;
&lt;p&gt;解决思路&lt;/p&gt;
&lt;p&gt;1.把公共配置抽取出来&lt;/p&gt;
&lt;p&gt;2.对公共配置进行维护&lt;/p&gt;
&lt;p&gt;3.修改公共配置后应用不需要重新部署&lt;/p&gt;
&lt;p&gt;采用方案&lt;/p&gt;
&lt;p&gt;1.公共配置抽取存放于zookeeper中并落地数据库&lt;/p&gt;
&lt;p&gt;2.对公共配置修改后发布到zookeeper中并落地数据库&lt;/p&gt;
&lt;p&gt;3.对应用开启配置实时监听，zookeeper配置文件一旦被修改，应用可实时监听到并获取&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310112242.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面基于zookeeper粗略实现了一个统一配置管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要用到的jar是zkclient&lt;/p&gt;
&lt;p&gt;配置文件Config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.cwh.zk.util&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.Serializable&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Serializable&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; serialVersionUID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1L&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String userNm&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String userPw&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String userNm&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String userPw&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userNm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userNm&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userPw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userPw&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserNm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; userNm&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUserNm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String userNm&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userNm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userNm&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getUserPw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; userPw&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUserPw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String userPw&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userPw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userPw&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Config [userNm=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; userNm &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, userPw=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; userPw &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置管理中心ZkConfigMag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.cwh.zk.util&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.I0Itec.zkclient.ZkClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ZkConfigMag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Config config&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * 从数据库加载配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Config &lt;span style=&#34;color:#a6e22e&#34;&gt;downLoadConfigFromDB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//getDB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Config&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pw&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * 配置文件上传到数据库
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upLoadConfigToDB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String nm&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String pw&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Config&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUserNm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nm&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUserPw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pw&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//updateDB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * 配置文件同步到zookeeper
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;syncConfigToZk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ZkClient zk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ZkClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/zkConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createPersistent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/zkConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;writeData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/zkConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用监听实现ZkGetConfigClient&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.cwh.zk.util&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.I0Itec.zkclient.IZkDataListener&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.I0Itec.zkclient.ZkClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ZkGetConfigClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Config config&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Config &lt;span style=&#34;color:#a6e22e&#34;&gt;getConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ZkClient zk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ZkClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:2181&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Config&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/zkConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;加载到配置：&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//监听配置文件修改
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		zk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribeDataChanges&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/zkConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IZkDataListener&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleDataChange&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String arg0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object arg1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Config&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; arg1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;监听到配置文件被修改：&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleDataDeleted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String arg0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;监听到配置文件被删除&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ZkGetConfigClient client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ZkGetConfigClient&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;// TODO Auto-generated catch block
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试，启动配置管理中心&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.cwh.zkConfig.test&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.cwh.zk.util.Config&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.cwh.zk.util.ZkConfigMag&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ZkConfigTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ZkConfigMag mag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ZkConfigMag&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Config config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;downLoadConfigFromDB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;....加载数据库配置....&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		mag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syncConfigToZk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;....同步配置文件到zookeeper....&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//歇会，这样看比较清晰
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// TODO Auto-generated catch block
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		mag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;upLoadConfigToDB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cwhcc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;passwordcc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;....修改配置文件....&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		mag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syncConfigToZk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;....同步配置文件到zookeeper....&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;配置管理中心打印：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310113057.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;应用监听：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310113139.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ZooKeeper总结</title>
        <link>https://lxb.wiki/f07e16f1/</link>
        <pubDate>Fri, 15 Oct 2021 21:51:29 +0000</pubDate>
        
        <guid>https://lxb.wiki/f07e16f1/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;ZooKeeper 可以作为&lt;strong&gt;注册中心&lt;/strong&gt;，也可以作为&lt;strong&gt;分布式锁&lt;/strong&gt;的一种实现。Kafka 使用 ZooKeeper &lt;strong&gt;管理自己的元数据配置&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;一什么是zookeeper&#34;&gt;一、什么是ZooKeeper&lt;/h2&gt;
&lt;p&gt;官网介绍&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105425.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;官网还有另一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper: A Distributed Coordination Service for Distributed Applications&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Wiki&lt;/strong&gt;中对ZooKeeper的介绍：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105519.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;概括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZooKeeper主要&lt;strong&gt;服务于分布式系统&lt;/strong&gt;，可以用ZooKeeper来做：统一配置管理、统一命名服务、分布式锁、集群管理。&lt;/li&gt;
&lt;li&gt;使用分布式系统就无法避免对节点管理的问题(需要实时感知节点的状态、对节点进行统一管理等等)，而由于这些问题处理起来可能相对麻烦和提高了系统的复杂性，ZooKeeper作为一个能够&lt;strong&gt;通用&lt;/strong&gt;解决这些问题的中间件就应运而生了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二为什么zookeeper能干这么多&#34;&gt;二、为什么ZooKeeper能干这么多？&lt;/h2&gt;
&lt;p&gt;Wiki 中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper nodes store their data in a hierarchical name space, much like a file system or a &lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Tree_%28data_structure%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tree&lt;/a&gt; data structure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ZooKeeper的数据结构，跟Unix文件系统非常类似，可以看做是一颗&lt;strong&gt;树&lt;/strong&gt;，每个节点叫做&lt;strong&gt;ZNode&lt;/strong&gt;。每一个节点可以通过&lt;strong&gt;路径&lt;/strong&gt;来标识，结构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105632.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那ZooKeeper这颗&amp;quot;树&amp;quot;有什么特点呢？？ZooKeeper的节点我们称之为&lt;strong&gt;Znode&lt;/strong&gt;，Znode分为&lt;strong&gt;两种&lt;/strong&gt;类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短暂/临时(Ephemeral)&lt;/strong&gt;：当客户端和服务端断开连接后，所创建的Znode(节点)&lt;strong&gt;会自动删除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久(Persistent)&lt;/strong&gt;：当客户端和服务端断开连接后，所创建的Znode(节点)&lt;strong&gt;不会删除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper和Redis一样，也是C/S结构(分成客户端和服务端)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105707.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-监听器&#34;&gt;2.1 监听器&lt;/h3&gt;
&lt;p&gt;在上面我们已经简单知道了ZooKeeper的数据结构了，ZooKeeper还配合了&lt;strong&gt;监听器&lt;/strong&gt;才能够做那么多事的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见&lt;/strong&gt;的监听场景有以下两项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听Znode节点的&lt;strong&gt;数据变化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;监听子节点的&lt;strong&gt;增减变化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105734.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105749.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;没错，通过&lt;strong&gt;监听+Znode节点(持久/短暂[临时])&lt;/strong&gt;，ZooKeeper就可以玩出这么多花样了。&lt;/p&gt;
&lt;h3 id=&#34;31-统一配置管理&#34;&gt;3.1 统一配置管理&lt;/h3&gt;
&lt;p&gt;比如我们现在有三个系统A、B、C，他们有三份配置，分别是&lt;code&gt;ASystem.yml、BSystem.yml、CSystem.yml&lt;/code&gt;，然后，这三份配置又非常类似，很多的配置项几乎都一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此时，如果我们要改变其中一份配置项的信息，很可能其他两份都要改。并且，改变了配置项的信息&lt;strong&gt;很可能就要重启系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，我们希望把&lt;code&gt;ASystem.yml、BSystem.yml、CSystem.yml&lt;/code&gt;相同的配置项抽取出来成一份&lt;strong&gt;公用&lt;/strong&gt;的配置&lt;code&gt;common.yml&lt;/code&gt;，并且即便&lt;code&gt;common.yml&lt;/code&gt;改了，也不需要系统A、B、C重启。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105843.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;做法：我们可以将&lt;code&gt;common.yml&lt;/code&gt;这份配置放在ZooKeeper的Znode节点中，系统A、B、C监听着这个Znode节点有无变更，如果变更了，&lt;strong&gt;及时&lt;/strong&gt;响应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310105910.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a class=&#34;link&#34; href=&#34;https://lxb.wiki/15475898/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于zookeeper实现统一配置管理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-统一命名服务&#34;&gt;3.2 统一命名服务&lt;/h3&gt;
&lt;p&gt;统一命名服务的理解其实跟&lt;strong&gt;域名&lt;/strong&gt;一样，是我们为这某一部分的资源给它&lt;strong&gt;取一个名字&lt;/strong&gt;，别人通过这个名字就可以拿到对应的资源。&lt;/p&gt;
&lt;p&gt;比如说，现在我有一个域名&lt;code&gt;www.java3y.com&lt;/code&gt;，但我这个域名下有多台机器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.1.1&lt;/li&gt;
&lt;li&gt;192.168.1.2&lt;/li&gt;
&lt;li&gt;192.168.1.3&lt;/li&gt;
&lt;li&gt;192.168.1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;别人访问&lt;code&gt;www.java3y.com&lt;/code&gt;即可访问到我的机器，而不是通过IP去访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310110058.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-分布式锁&#34;&gt;3.3 分布式锁&lt;/h3&gt;
&lt;p&gt;我们可以使用ZooKeeper来实现分布式锁，那是怎么做的呢？？下面来看看：&lt;/p&gt;
&lt;p&gt;系统A、B、C都去访问&lt;code&gt;/locks&lt;/code&gt;节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310110143.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;访问的时候会创建&lt;strong&gt;带顺序号的临时/短暂&lt;/strong&gt;(&lt;code&gt;EPHEMERAL_SEQUENTIAL&lt;/code&gt;)节点，比如，系统A创建了&lt;code&gt;id_000000&lt;/code&gt;节点，系统B创建了&lt;code&gt;id_000002&lt;/code&gt;节点，系统C创建了&lt;code&gt;id_000001&lt;/code&gt;节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310111211.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;接着，拿到&lt;code&gt;/locks&lt;/code&gt;节点下的所有子节点(id_000000,id_000001,id_000002)，&lt;strong&gt;判断自己创建的是不是最小的那个节点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果是，则拿到锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;释放锁：执行完操作后，把创建的节点给删掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果不是，则监听比自己要小1的节点变化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统A拿到&lt;code&gt;/locks&lt;/code&gt;节点下的所有子节点，经过比较，发现自己(&lt;code&gt;id_000000&lt;/code&gt;)，是所有子节点最小的。所以得到锁&lt;/li&gt;
&lt;li&gt;系统B拿到&lt;code&gt;/locks&lt;/code&gt;节点下的所有子节点，经过比较，发现自己(&lt;code&gt;id_000002&lt;/code&gt;)，不是所有子节点最小的。所以监听比自己小1的节点&lt;code&gt;id_000001&lt;/code&gt;的状态&lt;/li&gt;
&lt;li&gt;系统C拿到&lt;code&gt;/locks&lt;/code&gt;节点下的所有子节点，经过比较，发现自己(&lt;code&gt;id_000001&lt;/code&gt;)，不是所有子节点最小的。所以监听比自己小1的节点&lt;code&gt;id_000000&lt;/code&gt;的状态&lt;/li&gt;
&lt;li&gt;…&amp;hellip;&lt;/li&gt;
&lt;li&gt;等到系统A执行完操作以后，将自己创建的节点删除(&lt;code&gt;id_000000&lt;/code&gt;)。通过监听，系统C发现&lt;code&gt;id_000000&lt;/code&gt;节点已经删除了，发现自己已经是最小的节点了，于是顺利拿到锁&lt;/li&gt;
&lt;li&gt;….系统B如上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34集群状态&#34;&gt;3.4集群状态&lt;/h3&gt;
&lt;p&gt;ZooKeeper是怎么&amp;quot;&lt;strong&gt;感知&lt;/strong&gt;&amp;ldquo;节点的动态新增或者删除的&lt;/p&gt;
&lt;p&gt;还是以三个系统A、B、C为例，在ZooKeeper中创建&lt;strong&gt;临时节点&lt;/strong&gt;即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220310111532.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;只要系统A挂了，那&lt;code&gt;/groupMember/A&lt;/code&gt;这个节点就会删除，通过&lt;strong&gt;监听&lt;/strong&gt;&lt;code&gt;groupMember&lt;/code&gt;下的子节点，系统B和C就能够感知到系统A已经挂了。(新增也是同理)&lt;/p&gt;
&lt;p&gt;除了能够感知节点的上下线变化，ZooKeeper还可以实现&lt;strong&gt;动态选举Master&lt;/strong&gt;的功能。(如果集群是主从架构模式下)&lt;/p&gt;
&lt;p&gt;原理也很简单，如果想要实现动态选举Master的功能，Znode节点的类型是带&lt;strong&gt;顺序号的临时节点&lt;/strong&gt;(&lt;code&gt;EPHEMERAL_SEQUENTIAL&lt;/code&gt;)就好了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper会每次选举最小编号的作为Master，如果Master挂了，自然对应的Znode节点就会删除。然后让&lt;strong&gt;新的最小编号作为Master&lt;/strong&gt;，这样就可以实现动态选举的功能了。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式系统的CAP理论</title>
        <link>https://lxb.wiki/3bdd21ca/</link>
        <pubDate>Fri, 10 Sep 2021 21:54:27 +0000</pubDate>
        
        <guid>https://lxb.wiki/3bdd21ca/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;cap理论概述&#34;&gt;CAP理论概述&lt;/h2&gt;
&lt;p&gt;CAP理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226145516.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CAP理论中的CA和数据库事务中ACID的CA并不是同一回事儿。两者之中的C都是都是一致性(Consistency)。CAP中的A指的是可用性（Availability），而ACID中的A指的是原子性（Atomicity)，切勿混为一谈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cap的定义&#34;&gt;CAP的定义&lt;/h2&gt;
&lt;h3 id=&#34;consistency-一致性&#34;&gt;Consistency 一致性&lt;/h3&gt;
&lt;p&gt;一致性指“&lt;code&gt;all nodes see the same data at the same time&lt;/code&gt;”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致，所以，一致性，说的就是数据一致性。&lt;a class=&#34;link&#34; href=&#34;http://www.hollischuang.com/archives/663&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式的一致性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。&lt;/p&gt;
&lt;p&gt;一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。&lt;/p&gt;
&lt;p&gt;从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三种一致性策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。&lt;/p&gt;
&lt;p&gt;如果能容忍后续的部分或者全部访问不到，则是弱一致性。&lt;/p&gt;
&lt;p&gt;如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。&lt;/p&gt;
&lt;p&gt;CAP中说，不可能同时满足的这个一致性指的是强一致性。&lt;/p&gt;
&lt;h3 id=&#34;availability-可用性&#34;&gt;Availability 可用性&lt;/h3&gt;
&lt;p&gt;可用性指“&lt;code&gt;Reads and writes always succeed&lt;/code&gt;”，即服务一直可用，而且是正常响应时间。&lt;/p&gt;
&lt;p&gt;对于一个可用性的分布式系统，每一个非故障的节点必须对每一个请求作出响应。所以，一般我们在衡量一个系统的可用性的时候，都是通过停机时间来计算的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;可用性分类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;可用水平（%）&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;年可容忍停机时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;容错可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99.9999&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;1 min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;极高可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99.999&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;5 min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;具有故障自动恢复能力的可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99.99&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;53 min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99.9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;8.8h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;商品可用性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;99&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;43.8 min&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通常我们描述一个系统的可用性时，我们说淘宝的系统可用性可以达到5个9，意思就是说他的可用水平是99.999%，即全年停机时间不超过 &lt;code&gt;(1-0.99999)*365*24*60 = 5.256 min&lt;/code&gt;，这是一个极高的要求。&lt;/p&gt;
&lt;p&gt;好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。一个分布式系统，上下游设计很多系统如负载均衡、WEB服务器、应用代码、数据库服务器等，任何一个节点的不稳定都可以影响可用性。&lt;/p&gt;
&lt;h3 id=&#34;partition-tolerance分区容错性&#34;&gt;Partition Tolerance分区容错性&lt;/h3&gt;
&lt;p&gt;分区容错性指“&lt;code&gt;the system continues to operate despite arbitrary message loss or failure of part of the system&lt;/code&gt;”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。&lt;/p&gt;
&lt;p&gt;分区容错性和扩展性紧密相关。在分布式应用中，可能因为一些分布式的原因导致系统无法正常运转。好的分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个机器宕掉了，其他剩下的机器还能够正常运转满足系统需求，或者是机器之间有网络异常，将分布式系统分隔未独立的几个部分，各个部分还能维持分布式系统的运作，这样就具有好的分区容错性。&lt;/p&gt;
&lt;p&gt;简单点说，就是在网络中断，消息丢失的情况下，系统如果还能正常工作，就是有比较好的分区容错性。&lt;/p&gt;
&lt;h2 id=&#34;cap的证明&#34;&gt;CAP的证明&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226154057.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如上图，是我们证明CAP的基本场景，网络中有两个节点N1和N2，可以简单的理解N1和N2分别是两台计算机，他们之间网络可以连通，N1中有一个应用程序A，和一个数据库V，N2也有一个应用程序B2和一个数据库V。现在，A和B是分布式系统的两个部分，V是分布式系统的数据存储的两个子数据库。&lt;/p&gt;
&lt;p&gt;在满足一致性的时候，N1和N2中的数据是一样的，V0=V0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226154153.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如上图，是分布式系统正常运转的流程，用户向N1机器请求数据更新，程序A更新数据库Vo为V1，分布式系统将数据进行同步操作M，将V1同步的N2中V0，使得N2中的数据V0也更新为V1，N2中的数据再响应N2的请求。&lt;/p&gt;
&lt;p&gt;这里，可以定义N1和N2的数据库V之间的数据是否一样为一致性；外部对N1和N2的请求响应为可用行；N1和N2之间的网络环境为分区容错性。这是正常运作的场景，也是理想的场景，然而现实是残酷的，当错误发生的时候，一致性和可用性还有分区容错性，是否能同时满足，还是说要进行取舍呢？&lt;/p&gt;
&lt;p&gt;作为一个分布式系统，它和单机系统的最大区别，就在于网络，现在假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常，相当于要满足分区容错性，能不能同时满足一致性和响应性呢？还是说要对他们进行取舍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220226154349.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;假设在N1和N2之间网络断开的时候，有用户向N1发送数据更新请求，那N1中的数据V0将被更新为V1，由于网络是断开的，所以分布式系统同步操作M，所以N2中的数据依旧是V0；这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据V1，怎么办呢？&lt;/p&gt;
&lt;p&gt;有二种选择，第一，牺牲数据一致性，保证可用性。响应旧的数据V0给用户；&lt;/p&gt;
&lt;p&gt;第二，牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。&lt;/p&gt;
&lt;p&gt;这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。&lt;/p&gt;
&lt;h2 id=&#34;cap权衡&#34;&gt;CAP权衡&lt;/h2&gt;
&lt;p&gt;通过CAP理论及前面的证明，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？&lt;/p&gt;
&lt;p&gt;我们分三种情况来阐述一下。&lt;/p&gt;
&lt;h3 id=&#34;ca-without-p&#34;&gt;CA without P&lt;/h3&gt;
&lt;p&gt;这种情况在分布式系统中几乎是不存在的。首先在分布式环境下，网络分区是一个自然的事实。因为分区是必然的，所以如果舍弃P，意味着要舍弃分布式系统。那也就没有必要再讨论CAP理论了。这也是为什么在前面的CAP证明中，我们以系统满足P为前提论述了无法同时满足C和A。&lt;/p&gt;
&lt;p&gt;比如我们熟知的关系型数据库，如My Sql和Oracle就是保证了可用性和数据一致性，但是他并不是个分布式系统。一旦关系型数据库要考虑主备同步、集群部署等就必须要把P也考虑进来。&lt;/p&gt;
&lt;p&gt;其实，在CAP理论中。C，A，P三者并不是平等的，CAP之父在《Spanner，真时，CAP理论》一文中写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说Spanner真有什么特别之处，那就是谷歌的广域网。Google通过建立私有网络以及强大的网络工程能力来保证P，在多年运营改进的基础上，在生产环境中可以最大程度的减少分区发生，从而实现高可用性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Google的经验中可以得到的结论是，无法通过降低CA来提升P。要想提升系统的分区容错性，需要通过提升基础设施的稳定性来保障。&lt;/p&gt;
&lt;p&gt;所以，对于一个分布式系统来说。P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。&lt;/p&gt;
&lt;h3 id=&#34;cp-without-a&#34;&gt;CP without A&lt;/h3&gt;
&lt;p&gt;如果一个分布式系统不要求强的可用性，即容许系统停机或者长时间无响应的话，就可以在CAP三者中保障CP而舍弃A。&lt;/p&gt;
&lt;p&gt;一个保证了CP而一个舍弃了A的分布式系统，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。&lt;/p&gt;
&lt;p&gt;设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。&lt;/p&gt;
&lt;p&gt;无论是像Redis、HBase这种分布式存储系统，还是像Zookeeper这种分布式协调组件。数据的一致性是他们最最基本的要求。一个连数据一致性都保证不了的分布式存储要他有何用？&lt;/p&gt;
&lt;p&gt;ZooKeeper是个CP（一致性+分区容错性）的，即任何时刻对ZooKeeper的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性。但是它不能保证每次服务请求的可用性，也就是在极端环境下，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果。ZooKeeper是分布式协调服务，它的职责是保证数据在其管辖下的所有服务之间保持同步、一致。所以就不难理解为什么ZooKeeper被设计成CP而不是AP特性的了。&lt;/p&gt;
&lt;h3 id=&#34;ap-wihtout-c&#34;&gt;AP wihtout C&lt;/h3&gt;
&lt;p&gt;要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。&lt;/p&gt;
&lt;p&gt;这种舍弃强一致性而保证系统的分区容错性和可用性的场景和案例非常多。前面我们介绍可用性的时候说到过，很多系统在可用性方面会做很多事情来保证系统的全年可用性可以达到N个9，所以，对于很多业务系统来说，比如淘宝的购物，12306的买票。都是在可用性和一致性之间舍弃了一致性而选择可用性。&lt;/p&gt;
&lt;p&gt;你在12306买票的时候肯定遇到过这种场景，当你购买的时候提示你是有票的（但是可能实际已经没票了），你也正常的去输入验证码，下单了。但是过了一会系统提示你下单失败，余票不足。这其实就是先在可用性方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，会影响一些用户体验，但是也不至于造成用户流程的严重阻塞。&lt;/p&gt;
&lt;p&gt;但是，我们说很多网站牺牲了一致性，选择了可用性，这其实也不准确的。就比如上面的买票的例子，其实舍弃的只是强一致性。退而求其次保证了最终一致性。也就是说，虽然下单的瞬间，关于车票的库存可能存在数据不一致的情况，但是过了一段时间，还是要保证最终一致性的。&lt;/p&gt;
&lt;p&gt;对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>消息队列中的问题| 丢消息| 重复消费| 消息积压</title>
        <link>https://lxb.wiki/ff873094/</link>
        <pubDate>Sat, 24 Jul 2021 23:05:09 +0000</pubDate>
        
        <guid>https://lxb.wiki/ff873094/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;1-丢消息&#34;&gt;1. 丢消息&lt;/h1&gt;
&lt;h2 id=&#34;检测消息丢失的方法&#34;&gt;检测消息丢失的方法&lt;/h2&gt;
&lt;p&gt;一般而言，一个新的系统刚刚上线，各方面都不太稳定，需要一个磨合期，这个时候，特别需要监控到你的系统中是否有消息丢失的情况。&lt;/p&gt;
&lt;p&gt;如果是 IT 基础设施比较完善的公司，一般都有分布式链路追踪系统，使用类似的追踪系统可以很方便地追踪每一条消息。&lt;/p&gt;
&lt;p&gt;可以利用消息队列的有序性来验证是否有消息丢失。原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然后在 Consumer 端来检查这个序号的连续性。&lt;/p&gt;
&lt;p&gt;如果没有消息丢失，Consumer 收到消息的序号必然是连续递增的，或者说收到的消息，其中的序号必然是上一条消息的序号 +1。如果检测到序号不连续，那就是丢消息了。还可以通过缺失的序号来确定丢失的是哪条消息，方便进一步排查原因。&lt;/p&gt;
&lt;p&gt;大多数消息队列的客户端都支持拦截器机制，你可以利用这个拦截器机制，在 Producer 发送消息之前的拦截器中将序号注入到消息中，在 Consumer 收到消息的拦截器中检测序号的连续性，这样实现的好处是消息检测的代码不会侵入到你的业务代码中，待你的系统稳定后，也方便将这部分检测的逻辑关闭或者删除。&lt;/p&gt;
&lt;p&gt;如果是在一个分布式系统中实现这个检测方法，有几个问题需要你注意。&lt;/p&gt;
&lt;p&gt;首先，像 Kafka 和 RocketMQ 这样的消息队列，它是不保证在 Topic 上的严格顺序的，只能保证分区上的消息是有序的，所以我们在发消息的时候必须要指定分区，并且，在每个分区单独检测消息序号的连续性。&lt;/p&gt;
&lt;p&gt;如果你的系统中 Producer 是多实例的，由于并不好协调多个 Producer 之间的发送顺序，所以也需要每个 Producer 分别生成各自的消息序号，并且需要附加上 Producer 的标识，在 Consumer 端按照每个 Producer 分别来检测序号的连续性。&lt;/p&gt;
&lt;p&gt;Consumer 实例的数量最好和分区数量一致，做到 Consumer 和分区一一对应，这样会比较方便地在 Consumer 内检测消息序号的连续性。&lt;/p&gt;
&lt;h2 id=&#34;确保消息可靠传递&#34;&gt;确保消息可靠传递&lt;/h2&gt;
&lt;p&gt;整个消息从生产到消费的过程中，哪些地方可能会导致丢消息，以及应该如何避免消息丢失。一条消息从生产到消费完成这个过程，可以划分三个阶段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220224160823.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产阶段: 在这个阶段，从消息在 Producer 创建出来，经过网络传输发送到 Broker 端。&lt;/li&gt;
&lt;li&gt;存储阶段: 在这个阶段，消息在 Broker 端存储，如果是集群，消息会在这个阶段被复制到其他的副本上。&lt;/li&gt;
&lt;li&gt;消费阶段: 在这个阶段，Consumer 从 Broker 上拉取消息，经过网络传输发送到 Consumer 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-生产阶段&#34;&gt;1. 生产阶段&lt;/h3&gt;
&lt;p&gt;在生产阶段，消息队列通过最常用的请求确认机制，来保证消息的可靠传递：当你的代码调用发消息方法时，消息队列的客户端会把消息发送到 Broker，Broker 收到消息后，会给客户端返回一个确认响应，表明消息已经收到了。客户端收到响应后，完成了一次正常消息的发送。&lt;/p&gt;
&lt;p&gt;只要 Producer 收到了 Broker 的确认响应，就可以保证消息在生产阶段不会丢失。有些消息队列在长时间没收到发送确认响应后，会自动重试，如果重试再失败，就会以返回值或者异常的方式告知用户。&lt;/p&gt;
&lt;p&gt;你在编写发送消息代码时，需要注意，正确处理返回值或者捕获异常，就可以保证这个阶段的消息不会丢失。以 Kafka 为例，我们看一下如何可靠地发送消息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步发送时，只要注意捕获异常即可&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RecordMetadata metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; producer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(record)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; 消息发送成功。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} catch (Throwable e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; 消息发送失败！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;异步发送时，则需要在回调方法里进行检查。这个地方是需要特别注意的，很多丢消息的原因就是，我们使用了异步发送，却没有在回调中检查发送结果。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;producer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(record, (metadata, exception) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (metadata &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; null) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; 消息发送成功。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; 消息发送失败！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;println(exception);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-存储阶段&#34;&gt;2. 存储阶段&lt;/h3&gt;
&lt;p&gt;在存储阶段正常情况下，只要 Broker 在正常运行，就不会出现丢失消息的问题，但是如果 Broker 出现了故障，比如进程死掉了或者服务器宕机了，还是可能会丢失消息的。&lt;/p&gt;
&lt;p&gt;如果对消息的可靠性要求非常高，可以通过配置 Broker 参数来避免因为宕机丢消息。&lt;/p&gt;
&lt;p&gt;对于单个节点的 Broker，需要配置 Broker 参数，在收到消息后，&lt;strong&gt;将消息写入磁盘后再给 Producer 返回确认响应，这样即使发生宕机，由于消息已经被写入磁盘，就不会丢失消息&lt;/strong&gt;，恢复后还可以继续消费。例如，在 RocketMQ 中，需要将刷盘方式 flushDiskType 配置为 SYNC_FLUSH 同步刷盘。&lt;/p&gt;
&lt;p&gt;如果是 Broker 是由多个节点组成的集群，需要将 Broker 集群配置成：&lt;strong&gt;至少将消息发送到 2 个以上的节点，再给客户端回复发送确认响应&lt;/strong&gt;。这样当某个 Broker 宕机时，其他的 Broker 可以替代宕机的 Broker，也不会发生消息丢失。消息队列&lt;strong&gt;通过消息复制来确保消息的可靠性的&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-消费阶段&#34;&gt;3. 消费阶段&lt;/h3&gt;
&lt;p&gt;消费阶段采用和生产阶段类似的确认机制来保证消息的可靠传递，客户端从 Broker 拉取消息后，执行用户的消费业务逻辑，成功后，才会给 Broker 发送消费确认响应。如果 Broker 没有收到消费确认响应，下&lt;/p&gt;
&lt;p&gt;次拉消息的时候还会返回同一条消息，确保消息不会在网络传输过程中丢失，也不会因为客户端在执行消费逻辑中出错导致丢失。&lt;/p&gt;
&lt;p&gt;你在编写消费代码时需要注意的是，不要在收到消息后就立即发送消费确认，而是应该&lt;strong&gt;在执行完所有消费业务逻辑之后，再发送消费确认&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同样，我们以用 Python 语言消费 RabbitMQ 消息为例，来看一下如何实现一段可靠的消费代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt;(ch, method, properties, body):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [x] 收到消息 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; body)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 在这儿处理收到的消息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    database&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(body)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [x] 消费完成 &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 完成消费业务逻辑后发送消费确认响应&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_ack(delivery_tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delivery_tag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_consume(queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, on_message_callback&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;callback)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在消费的回调方法 callback 中，正确的顺序先是把消息保存到数据库，然后再发送消费确认响应。这样如果保存消息到数据库失败了，就不会执行消费确认的代码，下次拉到的还是这条消息，直到消费成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个消费者先后去拉消息是否能拉到同一条消息？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，消息队列一般都会有&lt;strong&gt;协调机制&lt;/strong&gt;，不会让这种情况出现，但是由于网络不确定性，这种情况还是在极小概率下会出现的。&lt;/p&gt;
&lt;p&gt;在同一个消费组内，A消费者拉走了index=10的这条消息，还没返回确认，这时候这个分区的消费位置还是10，B消费者来拉消息，可能有2种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\1. 超时前，Broker认为这个分区还被A占用着，会拒绝B的请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\2. 超时后，Broker认为A已经超时没返回，这次消费失败，当前消费位置还是10，B再来拉消息，会给它返回10这条消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在生产阶段，你需要捕获消息发送的错误，并重发消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在存储阶段，你可以通过配置刷盘和复制相关的参数，让消息写入到多个副本的磁盘上，来确保消息不会因为某个 Broker 宕机或者磁盘损坏而丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在消费阶段，你需要在处理完全部消费业务逻辑之后，再发送消费确认。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你在理解了这几个阶段的原理后，如果再出现丢消息的情况，应该可以通过在代码中加一些日志的方式，很快定位到是哪个阶段出了问题，然后再进一步深入分析，快速找到问题原因。&lt;/p&gt;
&lt;h1 id=&#34;2-重复消息&#34;&gt;2. 重复消息&lt;/h1&gt;
&lt;p&gt;在消息传递过程中，如果出现传递失败的情况，发送方会执行重试，重试的过程中就有可能会产生重复的消息。对使用消息队列的业务系统来说，如果没有对重复消息进行处理，就有可能会导致系统的数据出现错误。&lt;/p&gt;
&lt;h2 id=&#34;消息重复的情况必然存在&#34;&gt;消息重复的情况必然存在&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;MQTT 协议&lt;/strong&gt;中，给出了三种传递消息时能够提供的服务质量标准，这三种服务质量从低到高依次是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At most once: 至多一次。消息在传递时，最多会被送达一次。换一个说法就是，没什么消息可靠性保证，允许丢消息。一般都是一些对消息可靠性要求不太高的监控场景使用，比如每分钟上报一次机房温度数据，可以接受数据少量丢失。&lt;/li&gt;
&lt;li&gt;At least once: 至少一次。消息在传递时，至少会被送达一次。也就是说，不允许丢消息，但是允许有少量重复消息出现。&lt;/li&gt;
&lt;li&gt;Exactly once：恰好一次。消息在传递时，只会被送达一次，不允许丢失也不允许重复，这个是最高的等级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个服务质量标准不仅适用于 MQTT，对所有的消息队列都是适用的。我们&lt;strong&gt;现在常用的绝大部分消息队列提供的服务质量都是 At least once，包括 RocketMQ、RabbitMQ 和 Kafka 都是这样。也就是说，消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;队****列很难保证消息不重复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kafka 支持的“Exactly once”和我们刚刚提到的消息传递的服务质量标准“Exactly once”是不一样的，它是 Kafka 提供的另外一个特性，Kafka 中支持的事务也和我们通常意义理解的事务有一定的差异。在 Kafka&lt;/p&gt;
&lt;p&gt;中，&lt;strong&gt;事务和 Excactly once 主要是为了配合流计算使用的特性&lt;/strong&gt;。巧妙地用了两个所有人都非常熟悉的概念“事务”和“Exactly once”来包装它的新的特性，实际上它实现的这个事务和 Exactly once 并不是我们通常&lt;/p&gt;
&lt;p&gt;理解的那两个特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么大部分消息队列都选择只提供 At least once 的服务质量，而不是级别更高的 Exactly once？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决一个问题，往往会引发别的问题。若消息队列实现了exactly once，会引发的问题有：&lt;/p&gt;
&lt;p&gt;①消费端在pull消息时，需要检测此消息是否被消费，这个检测机制无疑会拉低消息消费的速度。可以预想到，随着消息的剧增，消费性能势必会急剧下降，导致消息积压；&lt;/p&gt;
&lt;p&gt;②检查机制还需要业务端去配合实现，若一条消息长时间未返回ack，消息队列需要去回调看下消费结果（这个类似于事物消息的回查机制）。这样就会增加业务端的压力，与很多的未知因素。&lt;/p&gt;
&lt;p&gt;所以，消息队列不实现exactly once，而是at least once + 幂等性，这个幂等性让给我们去处理。&lt;/p&gt;
&lt;p&gt;最重要的原因是消息队列即使做到了Exactly once级别，consumer也还是要做幂等。因为在consumer从消息队列取消息这里，如果consumer消费成功，但是ack失败，consumer还是会取到重复的消息，所以消&lt;/p&gt;
&lt;p&gt;息队列花大力气做成Exactly once并不能解决业务侧消息重复的问题。&lt;/p&gt;
&lt;p&gt;1、At least once + 幂等消费 = Exactly once，所以对于消息队列来讲，要做到Exactly once，其实是需消费端的共同配合（幂等消费）才可完成，消息队列基本只提供At least once的实现；&lt;/p&gt;
&lt;p&gt;2、从给的几种幂等消费的方案看，需要引入数据库、条件更新、分布式事务或锁等额外辅助，消息队列如果需要保障Exactly once，会导致消费端代码侵入，例如需要消费端增加消息队列用来处理幂等的client&lt;/p&gt;
&lt;p&gt;端，而消费端的形态可是太多了，兼容适配工作量巨大。故这个Exactly once留给用户自己处理，并且具有选择权，毕竟不是所有业务场景都需要Exactly once，例如机房温度上报的案例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果队列的实现是At least once，但是为了确保消息不丢失，Broker Service会进行一定的重试，但是不可能一直重试，如果一直重试失败怎么处理了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的消息队列会有一个特殊的队列来保存这些总是消费失败的“坏消息”，然后继续消费之后的消息，避免坏消息卡死队列。这种坏消息一般不会是因为网络原因或者消费者死掉导致的，大多都是消息数据本身有&lt;/p&gt;
&lt;p&gt;问题，消费者的业务逻辑处理不了导致的。&lt;/p&gt;
&lt;h2 id=&#34;用幂等性解决重复消息问题&#34;&gt;用幂等性解决重复消息问题&lt;/h2&gt;
&lt;p&gt;一般解决重复消息的办法是，在消费端，让我们消费消息的操作具备幂等性。&lt;/p&gt;
&lt;p&gt;幂等（Idempotence）是一个数学上的概念，它是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果一个函数 f(x) 满足：f(f(x)) = f(x)，则函数 f(x) 满足幂等性。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个概念被拓展到计算机领域，被用来描述一个操作、方法或者服务。一个幂等操作的特点是，&lt;strong&gt;其任意多次执行所产生的影响均与一次执行的影响相同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个幂等的方法，使用同样的参数，对它进行多次调用和一次调用，对系统产生的影响是一样的。所以，对于幂等的方法，不用担心重复执行会对系统造成任何改变。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如在不考虑并发的情况下，“将账户 X 的余额设置为 100 元”，执行一次后对系统的影响是，账户 X 的余额变成了 100 元。只要提供的参数 100 元不变，那即使再执行多少次，账户 X 的余额始终都是 100 元，&lt;/p&gt;
&lt;p&gt;不会变化，这个操作就是一个幂等的操作。&lt;/p&gt;
&lt;p&gt;再比如“将账户 X 的余额加 100 元”，这个操作它就不是幂等的，每执行一次，账户余额就会增加 100 元，执行多次和执行一次对系统的影响（也就是账户的余额）是不一样的。&lt;/p&gt;
&lt;p&gt;如果我们系统&lt;strong&gt;消费消息的业务逻辑具备幂等性&lt;/strong&gt;，那就不用担心消息重复的问题了，因为&lt;strong&gt;同一条消息，消费一次和消费多次对系统的影响是完全一样的。也就可以认为，消费多次等于消费一次。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从对系统的影响结果来说：At least once + 幂等消费 = Exactly once。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么如何实现幂等操作呢？最好的方式就是，从业务逻辑设计上入手，将消费的业务逻辑设计成具备幂等性的操作。但是，不是所有的业务都能设计成天然幂等的，这里就需要一些方法和技巧来实现幂等。&lt;/p&gt;
&lt;p&gt;下面我给你介绍几种常用的设计幂等操作的方法：&lt;/p&gt;
&lt;h3 id=&#34;1-利用数据库的唯一约束实现幂等&#34;&gt;1. 利用数据库的唯一约束实现幂等&lt;/h3&gt;
&lt;p&gt;刚刚提到的那个不具备幂等特性转账的例子：将账户 X 的余额加 100 元。在这个例子中，我们可以通过改造业务逻辑，让它具备幂等性。&lt;/p&gt;
&lt;p&gt;首先，我们可以限定，对于每个转账单每个账户只可以执行一次变更操作，在分布式系统中，这个限制实现的方法非常多，最简单的是我们在数据库中建一张转账流水表，这个表有三个字段：转账单 ID、账户&lt;/p&gt;
&lt;p&gt;ID 和变更金额，然后&lt;strong&gt;给转账单 ID 和账户 ID 这两个字段联合起来创建一个唯一约束，这样对于相同的转账单 ID 和账户 ID，表里至多只能存在一条记录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样，我们消费消息的逻辑可以变为：“在转账流水表中增加一条转账记录，然后再根据转账记录，异步操作更新用户余额即可。”在转账流水表增加一条转账记录这个操作中，由于我们在这个表中预先定义了“账&lt;/p&gt;
&lt;p&gt;户 ID 转账单 ID”的唯一约束，对于同一个转账单同一个账户只能插入一条记录，后续重复的插入操作都会失败，这样就实现了一个幂等的操作。我们只要写一个 SQL，正确地实现它就可以了。&lt;/p&gt;
&lt;p&gt;基于这个思路，不光是可以使用关系型数据库，&lt;strong&gt;只要是支持类似“INSERT IF NOT EXIST”语义的存储类系统都可以用于实现幂等&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;比如， **Redis 的 SETNX 命令来替代数据库中的唯一约束，来实现幂****等消费。 （ redis中的hash：**&lt;strong&gt;hsetnx&lt;/strong&gt; &lt;strong&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;；&lt;/strong&gt; &lt;strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如，Elasticsearch中的幂等操作：&lt;/strong&gt; &lt;strong&gt;PUT /movie_index/movie/3，加上文档 ID&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-为更新的数据设置前置条件&#34;&gt;2. 为更新的数据设置前置条件&lt;/h3&gt;
&lt;p&gt;另外一种实现幂等的思路是，给数据变更设置一个前置条件，如果满足条件就更新数据，否则拒绝更新数据，在更新数据的时候，同时变更前置条件中需要判断的数据。这样，重复执行这个操作时，由于第一次&lt;/p&gt;
&lt;p&gt;更新数据的时候已经变更了前置条件中需要判断的数据，不满足前置条件，则不会重复执行更新数据操作。&lt;/p&gt;
&lt;p&gt;比如，刚刚我们说过，“将账户 X 的余额增加 100 元”这个操作并不满足幂等性，我们可以把这个操作加上一个前置条件，变为：“如果账户 X 当前的余额为 500 元，将余额加 100 元”，这个操作就具备了幂等&lt;/p&gt;
&lt;p&gt;性。对应到消息队列中的使用时，可以在发消息时在消息体中带上当前的余额，在消费的时候进行判断数据库中，当前余额是否与消息中的余额相等，只有相等才执行变更操作。&lt;/p&gt;
&lt;p&gt;但是，如果我们要更新的数据不是数值，或者我们要做一个比较复杂的更新操作怎么办？用什么作为前置判断条件呢？更加通用的方法是，&lt;strong&gt;给你的数据增加一个版本号属性，每次更数据前，比较当前数据的版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;号是否和消息中的版本号一致，如果不一致就拒绝更新数据，更新数据的同时将版本号 +1，一样可以实现幂等更新。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-记录并检查操作&#34;&gt;3. 记录并检查操作&lt;/h3&gt;
&lt;p&gt;如果上面提到的两种实现幂等方法都不能适用于你的场景，我们还有一种通用性最强，适用范围最广的实现幂等性方法：&lt;strong&gt;记录并检查操作&lt;/strong&gt;，也称为“Token 机制或者 GUID（全局唯一 ID）机制”，实现的思路特别&lt;/p&gt;
&lt;p&gt;简单：在执行数据更新操作之前，先检查一下是否执行过这个更新操作。&lt;/p&gt;
&lt;p&gt;具体的实现方法是，&lt;strong&gt;在发送消息时，给每条消息指定一个全局唯一的 ID，消费时，先根据这个 ID 检查这条消息是否有被消费过，如果没有消费过，才更新数据，然后将消费状态置为已消费。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原理和实现是不是很简单？其实一点儿都不简单，在分布式系统中，这个方法其实是非常难实现的。首先，给每个消息指定一个全局唯一的 ID 就是一件不那么简单的事儿，方法有很多，但都不太好同时满足简&lt;/p&gt;
&lt;p&gt;单、高可用和高性能，或多或少都要有些牺牲。更加麻烦的是，在“检查消费状态，然后更新数据并且设置消费状态”中，三个操作必须作为一组操作保证原子性，才能真正实现幂等，否则就会出现 Bug。&lt;/p&gt;
&lt;p&gt;比如说，对于同一条消息：“全局 ID 为 8，操作为：给 ID 为 666 账户增加 100 元”，有可能出现这样的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;t0 时刻：Consumer A 收到条消息，检查消息执行状态，发现消息未处理过，开始执行“账户增加 100 元”；&lt;/li&gt;
&lt;li&gt;t1 时刻：Consumer B 收到条消息，检查消息执行状态，发现消息未处理过，因为这个时刻，Consumer A 还未来得及更新消息执行状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就会导致账户被错误地增加了两次 100 元，这是一个在分布式系统中非常容易犯的错误，一定要引以为戒。&lt;/p&gt;
&lt;p&gt;对于这个问题，当然我们可以用事务来实现，也可以用锁来实现，但是在分布式系统中，无论是分布式事务还是分布式锁都是比较难解决问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;几种实现幂等操作的方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以利用数据库的约束来防止重复更新数据，&lt;/li&gt;
&lt;li&gt;可以为数据更新设置一次性的前置条件，来防止重复消息，如果这两种方法都不适用于你的场景，&lt;/li&gt;
&lt;li&gt;还可以用“记录并检查操作”的方式来保证幂等，这种方法适用范围最广，但是实现难度和复杂度也比较高，一般不推荐使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些实现幂等的方法，不仅可以用于解决重复消息的问题，也同样适用于，在其他场景中来&lt;strong&gt;解决重复请求或者重复调用的问题&lt;/strong&gt;。比如，我们可以将 HTTP 服务设计成幂等的，解决前端或者 APP 重复提交表单数&lt;/p&gt;
&lt;p&gt;据的问题；也可以将一个微服务设计成幂等的，解决 RPC 框架自动重试导致的重复调用问题。这些方法都是通用的。&lt;/p&gt;
&lt;h1 id=&#34;3-消息积压问题&#34;&gt;3. 消息积压问题&lt;/h1&gt;
&lt;p&gt;在使用消息队列遇到的问题中，消息积压这个问题，应该是最常遇到的问题。&lt;/p&gt;
&lt;p&gt;消息积压的直接原因，一定是系统中的某个部分出现了性能问题，来不及处理上游发送的消息，才会导致消息积压。 所以在使用消息队列时，如何来优化代码的性能，避免出现消息积压。&lt;/p&gt;
&lt;h2 id=&#34;优化性能来避免消息积压&#34;&gt;优化性能来避免消息积压&lt;/h2&gt;
&lt;p&gt;在使用消息队列的系统中，对于性能的优化，主要体现在生产者和消费者这一收一发两部分的业务逻辑中。对于消息队列本身的性能，不需要太关注。&lt;/p&gt;
&lt;p&gt;主要原因是，对于绝大多数使用消息队列的业务来说，消息队列本身的处理能力要远大于业务系统的处理能力。主流消息队列的单个节点，消息收发的性能可以达到每秒钟处理几万至几十万条消息的水平，还可&lt;/p&gt;
&lt;p&gt;以通过水平扩展 Broker 的实例数成倍地提升处理能力。而一般的业务系统需要处理的业务逻辑远比消息队列要复杂，单个节点每秒钟可以处理几百到几千次请求，已经可以算是性能非常好的了。所以，对于消&lt;/p&gt;
&lt;p&gt;息队列的性能优化，我们更关注的是，在消息的收发两端，我们的业务代码怎么和消息队列配合，达到一个最佳的性能。&lt;/p&gt;
&lt;h3 id=&#34;1-发送端性能优化&#34;&gt;1. 发送端性能优化&lt;/h3&gt;
&lt;p&gt;如果说，代码发送消息的性能上不去，需要优先检查一下，是不是发消息之前的业务逻辑耗时太多导致的。&lt;/p&gt;
&lt;p&gt;对于发送消息的业务逻辑，只需要注意&lt;strong&gt;设置合适的并发和批量大小，就可以达到很好的发送性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Producer 发送消息的过程，Producer 发消息给 Broker，Broker 收到消息后返回确认响应，这是一次完整的交互。假设这一次交互的平均时延是 1ms，把这 1ms 的时间分解开，它包括了下面这些步骤的耗时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送端准备数据、序列化消息、构造请求等逻辑的时间，也就是发送端在发送网络请求之前的耗时；&lt;/li&gt;
&lt;li&gt;发送消息和返回响应在网络传输中的耗时；&lt;/li&gt;
&lt;li&gt;Broker 处理消息的时延。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是单线程发送，每次只发送 1 条消息，那么每秒只能发送 1000ms / 1ms * 1 条 /ms = 1000 条 消息，这种情况下并不能发挥出消息队列的全部实力。&lt;/p&gt;
&lt;p&gt;无论是增加每次发送消息的批量大小，还是增加并发，都能成倍地提升发送性能。&lt;strong&gt;至于到底是选择批量发送还是增加并发，主要取决于发送端程序的业务性质&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如说，你的&lt;strong&gt;消息发送端是一个微服务&lt;/strong&gt;，主要接受 RPC 请求处理在线业务。很自然的，微服务在处理每次请求的时候，就在当前线程直接发送消息就可以了，因为所有 RPC 框架都是多线程支持多并发的，自&lt;/p&gt;
&lt;p&gt;然也就实现了并行发送消息。并且在线业务比较在意的是请求响应时延，选择批量发送必然会影响 RPC 服务的时延。这种情况，比较明智的方式就是&lt;strong&gt;通过并发来提升发送性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你的&lt;strong&gt;系统是一个离线分析系统&lt;/strong&gt;，离线系统在性能上的需求是什么呢？它不关心时延，更注重整个系统的吞吐量。发送端的数据都是来自于数据库，这种情况就更适合批量发送，你可以批量从数据库读取数&lt;/p&gt;
&lt;p&gt;据，然后批量来发送消息，同样&lt;strong&gt;用少量的并发就可以获得非常高的吞吐量&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-消费端性能优化&#34;&gt;2. 消费端性能优化&lt;/h3&gt;
&lt;p&gt;使用消息队列的时候，大部分的性能问题都出现在消费端，如果消费的速度跟不上发送端生产消息的速度，就会造成消息积压。如果这种性能倒挂的问题只是暂时的，那问题不大，只要消费端的性能恢复之后，超过发送端的性能，那积压的消息是可以逐渐被消化掉的。&lt;/p&gt;
&lt;p&gt;要是消费速度一直比生产速度慢，时间长了，整个系统就会出现问题，要么，消息队列的存储被填满无法提供服务，要么消息丢失，这对于整个系统来说都是严重故障。&lt;/p&gt;
&lt;p&gt;所以，在设计系统的时候，&lt;strong&gt;一定要保证消费端的消费性能要高于生产端的发送性能，这样的系统才能健康的持续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消费端的性能优化除了优化消费业务逻辑以外，也可以通过水平扩容，增加消费端的并发数来提升总体的消费性能&lt;/strong&gt;。特别需要注意的一点是，&lt;strong&gt;在扩容 Consumer 的实例数量的同时，必须同步扩容主题中的分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（也叫队列）数量，确保 Consumer 的实例数和分区数量是相等的。如果 Consumer 的实例数量超过分区数量，这样的扩容实际上是没有效果的&lt;/strong&gt;。因为对于消费者，在每个分区上实际只能支持单线程消费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个解决消费慢的问题常见的错误：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20220224161200.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;它收消息处理的业务逻辑可能比较慢，也很难再优化了，为了避免消息积压，在收到消息的 OnMessage 方法中，不处理任何业务逻辑，把这个消息放到一个内存队列里面就返回了。然后它可以启动很多的业务&lt;/p&gt;
&lt;p&gt;线程，这些业务线程里面是真正处理消息的业务逻辑，这些线程从内存队列里取消息处理，这样它就解决了单个 Consumer 不能并行消费的问题。&lt;/p&gt;
&lt;p&gt;这个方法是不是很完美地实现了并发消费？错误！ 因为会丢消息。如果收消息的节点发生宕机，在内存队列中还没来及处理的这些消息就会丢失。&lt;/p&gt;
&lt;p&gt;在onMessage方法结束后，如果没有抛异常，就自动ACK了。而这个时候，消息只是在内存队列中，并没有被真正处理完。&lt;/p&gt;
&lt;p&gt;如果onMessage方法中，收到消息后不确认，等真正处理完消息再确认，就可以了吧，这样就可以用内存队列了&lt;/p&gt;
&lt;p&gt;理论上是可以的，但要注意，像RocketMQ，采用默认配置的时候，onMessage方法结束后，如果没抛异常，默认就会自动确认了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在消费端是否可以通过批量消费的方式来提升消费性能？在什么样场景下，适合使用这种方法？或者说，这种方法有什么局限性？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;批量消费即一次取一批消息，等这一批消息都成功了，再提交最后一条消息的位置作为新的消费位置。如果其中任何一条失败，则认为整批都失败。&lt;/p&gt;
&lt;p&gt;批量消费应该是与消息处理是需要实时与否有关。如果需要实时处理，如订单相关的，就不能批量，但是发送提醒邮件之类的，就可以。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批量消费有意义的场景要求：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.要么消费端对消息的处理支持批量处理，比如批量入库&lt;/li&gt;
&lt;li&gt;\2. 要么消费端支持多线程/协程并发处理，业务上也允许消息无序。&lt;/li&gt;
&lt;li&gt;\3. 或者网络带宽在考虑因素内，需要减少消息的overhead。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;批量消费的局限性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\1. 需要一个整体ack的机制，一旦一条靠前的消息消费失败，可能会引起很多消息重试。&lt;/li&gt;
&lt;li&gt;\2. 多线程下批量消费速度受限于最慢的那个线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但其实以上局限并没有影响主流MQ的实现了批量功能。&lt;/p&gt;
&lt;p&gt;1、要求消费端能够批量处理或者开启多线程进行单条处理
2、批量消费一旦某一条数据消费失败会导致整批数据重复消费
3、对实时性要求不能太高，批量消费需要Broker积累到一定消费数据才会发送到Consumer&lt;/p&gt;
&lt;p&gt;消费端进行批量操作，感觉和上面的先将消息放在内存队列中，然后在并发消费消息，如果机器宕机，这些批量消息都会丢失，如果在数据库层面，批量操作在大事务，会导致锁的竞争，并且也会导致主备的不&lt;/p&gt;
&lt;p&gt;一致。如果是一些不重要的消息如对日志进行备份，就可以使用批量操作之类的提高消费性能，因为一些日志消息丢失也是可以接受的。&lt;/p&gt;
&lt;p&gt;如果使用了批量消费的方式，那么就需要批量确认，如果一次消费十条消息，除了第七条消费失败了，其他的都处理成功了，但是这中情况下broker只能将消费的游标修改成消息7，而之后的消息虽然处理成功&lt;/p&gt;
&lt;p&gt;了，但是也只能使用类似于拉回重传的方式再次消费，浪费性能，而且这种批量消费对于消费者的并发我觉得不是很友好，可能消费者1来了取走了十条消息在处理，这时候消费者2过来了也想取十条消息，但是&lt;/p&gt;
&lt;p&gt;他需要等待消费者1进行ack才可以取走消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何判断增加多少consumer消费实例的个数？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以简单计算一下，消费并行度：单实例平均消费tps * 消费并行度 &amp;gt; 生产消息的总tps
消费并行度 = min（consumer实例数，分区数量）&lt;/p&gt;
&lt;h2 id=&#34;消息积压的紧急处理&#34;&gt;消息积压的紧急处理&lt;/h2&gt;
&lt;p&gt;还有一种消息积压的情况是，日常系统正常运转的时候，没有积压或者只有少量积压很快就消费掉了，但是某一个时刻，突然就开始积压消息并且积压持续上涨。这种情况下需要你在短时间内找到消息积压的原&lt;/p&gt;
&lt;p&gt;因，迅速解决问题才不至于影响业务。&lt;/p&gt;
&lt;p&gt;导致突然积压的原因肯定是多种多样的，不同的系统、不同的情况有不同的原因，不能一概而论。但是，排查消息积压原因，是有一些相对固定而且比较有效的方法的。&lt;/p&gt;
&lt;p&gt;能导致积压突然增加，最粗粒度的原因，只有两种：要么是发送变快了，要么是消费变慢了。&lt;/p&gt;
&lt;p&gt;大部分消息队列都内置了监控的功能，只要通过监控数据，很容易确定是哪种原因。如果是单位时间发送的消息增多，比如说是赶上大促或者抢购，短时间内不太可能优化消费端的代码来提升消费性能，唯一的&lt;/p&gt;
&lt;p&gt;方法是通过扩容消费端的实例数来提升总体的消费能力。&lt;/p&gt;
&lt;p&gt;如果短时间内没有足够的服务器资源进行扩容，没办法的办法是，将系统降级，通过关闭一些不重要的业务，减少发送方发送的数据量，最低限度让系统还能正常运转，服务一些重要业务。&lt;/p&gt;
&lt;p&gt;还有一种不太常见的情况，你通过监控发现，无论是发送消息的速度还是消费消息的速度和原来都没什么变化，这时候你需要检查一下你的消费端，是不是消费失败导致的一条消息反复消费这种情况比较多，这&lt;/p&gt;
&lt;p&gt;种情况也会拖慢整个系统的消费速度。&lt;/p&gt;
&lt;p&gt;如果监控到消费变慢了，你需要检查你的消费实例，分析一下是什么原因导致消费变慢。优先检查一下日志是否有大量的消费错误，如果没有错误的话，可以通过打印堆栈信息，看一下你的消费线程是不是卡在&lt;/p&gt;
&lt;p&gt;什么地方不动了，比如触发了死锁或者卡在等待某些资源上了。&lt;/p&gt;
&lt;p&gt;**优化消息收发性能，**预防消息积压的方法有两种，增加批量或者是增加并发，在发送端这两种方法都可以使用，在消费端需要注意的是，增加并发需要同步扩容分区数量，否则是起不到效果的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于系统发生消息积压的情况&lt;/strong&gt;，需要先解决积压，再分析原因，毕竟保证系统的可用性是首先要解决的问题。快速解决积压的方法就是通过水平扩容增加 Consumer 的实例数量。&lt;/p&gt;
&lt;p&gt;消息积压处理：
1、发送端优化，增加批量和线程并发两种方式处理
2、消费端优化，优化业务逻辑代码、水平扩容增加并发并同步扩容分区数量
查看消息积压的方法：
1、消息队列内置监控，查看发送端发送消息与消费端消费消息的速度变化
2、查看日志是否有大量的消费错误
3、打印堆栈信息，查看消费线程卡点信息&lt;/p&gt;
&lt;p&gt;面试解决消息积压的方法：
（1）临时扩容，增加消费端，用硬件提升消费速度。
（2）服务降级，关闭一些非核心业务，减少消息生产。
（3）通过日志分析，监控等找到挤压原因，消息队列三部分，上游生产者是否异常生产大量数据，中游消息队列存储层是否出现问题，下游消费速度是否变慢，就能确定哪个环节出了问题
（4）根据排查解决异常部分。
（5）等待积压的消息被消费，恢复到正常状态，撤掉扩容服务器。&lt;/p&gt;
&lt;h1 id=&#34;4-如何保证消息的严格顺序&#34;&gt;4. 如何保证消息的严格顺序？&lt;/h1&gt;
&lt;p&gt;怎么来保证消息的严格顺序？主题层面是无法保证严格顺序的，&lt;strong&gt;只有在队列上才能保证消息的严格顺序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说，&lt;strong&gt;你的业务必须要求全局严格顺序，就只能把消息队列数配置成 1，生产者和消费者也只能是一个实例，这样才能保证全局严格顺序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大部分情况下，并不需要全局严格顺序，只要保证局部有序就可以满足要求了。比如，在传递账户流水记录的时候，&lt;strong&gt;只要保证每个账户的流水有序就可以了，不同账户之间的流水记录是不需要保证顺序的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果需要&lt;strong&gt;保证局部严格顺序&lt;/strong&gt;，可以这样来实现。在发送端，我们使用账户 ID 作为 Key，&lt;strong&gt;采用一致性哈希算法计算出队列编号&lt;/strong&gt;，&lt;strong&gt;指定队列来发送消息。一致性哈希算法可以保证&lt;/strong&gt;，&lt;strong&gt;相同 Key 的消息总是发送到同一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个队列上&lt;/strong&gt;，这样可以保证相同 Key 的消息是严格有序的。如果不考虑队列扩容，也可以用队列数量取模的简单方法来计算队列编号。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何保证服务稳定性</title>
        <link>https://lxb.wiki/d0f092bd/</link>
        <pubDate>Tue, 25 May 2021 21:57:43 +0000</pubDate>
        
        <guid>https://lxb.wiki/d0f092bd/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;1-sla&#34;&gt;1 SLA&lt;/h2&gt;
&lt;p&gt;业内喜欢用SLA （服务等级协议，全称：service level agreement）来衡量系统的稳定性，对互联网公司来说就是网站服务可用性的一个保证。9越多代表全年服务可用时间越长服务越可靠，停机时间越短。就以一个标准99.99%为例，停机时间52.6分钟，平均到每周也就是只能有差不多1分钟的停机时间，也就是说网络抖动这个时间可能就没了。保证一个系统四个9或者更高的五个9，需要一套全体共识严格标准的规章制度，没有规矩不成方圆。创建的规范有如下几种：&lt;/p&gt;
&lt;p&gt;1、研发规范、自身稳定；&lt;/p&gt;
&lt;p&gt;2、事务中不能包含远程调用；&lt;/p&gt;
&lt;p&gt;3、超时时间和重试次数要合理；&lt;/p&gt;
&lt;p&gt;4、表数据操作必须double check，合理利用索引，避免出现慢查询、分库分表不走分表键；&lt;/p&gt;
&lt;p&gt;5、没有有效的资源隔离， 避免不同业务共用一个线程池或连接池；&lt;/p&gt;
&lt;p&gt;6、合理的系统拓扑，禁止不合理服务依赖，能依赖就依赖，否则同步尽量改成异步弱依赖；&lt;/p&gt;
&lt;p&gt;7、精简的代码逻辑；&lt;/p&gt;
&lt;p&gt;8、核心路径流程必须进行资源隔离，确保任何突发情况主流程不能受影响。&lt;/p&gt;
&lt;h2 id=&#34;2-单服务稳定性&#34;&gt;2 单服务稳定性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键字：开关可控、单一职责、服务隔离、异常兜底、监控发现！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于稳定性来说，抛开整体系统架构设计，单就每个业务域服务的稳定性也是非常的重要。只有每个业务环节都稳如泰山，才能保障整个稳定性。单服务稳定可以从以下几个方面来进行：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、禁用设计&lt;/strong&gt;：应该提供控制具体功能是否开启可用的配置，在相应的功能服务出现故障时，快速下线局部功能，以保证整体服务的可用性；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、必要的缓存&lt;/strong&gt;：缓存是解决并发的利器，可以有效的提高系统的吞吐量。按照业务以及技术的纬度必要时可以增加多级缓存来保证其命中率；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、接口无状态性&lt;/strong&gt;：服务接口应是无状态的，当前接口访问不应该依赖上层接口的状态逻辑；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、接口单一职责性&lt;/strong&gt;：对于核心功能的接口，不应该过多的耦合不属于它的功能。如果一个接口做的事情太多应做拆分，保证单接口的稳定性和快速响应；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、第三方服务隔离性&lt;/strong&gt;：任何依赖于第三方的服务（不论接口还是中间件等），都应该做到熔断和降级，不能有强耦合的依赖；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、业务场景兜底方案&lt;/strong&gt;：核心业务场景要做到完整兜底方法，从前端到后端都应有兜底措施；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、服务监控与及时响应&lt;/strong&gt;：每个服务应做好对应监控工作，如有异常应及时响应，不应累积。&lt;/p&gt;
&lt;h2 id=&#34;3-集群稳定性&#34;&gt;3 集群稳定性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键字：系统架构、部署发布、限流熔断、监控体系、压测机制！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于集群维度的稳定性来说，稳定性保障会更加复杂。单服务是局部，集群是全局。一个见微知著，一个高瞻远瞩。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、合理的系统架构&lt;/strong&gt;：合理的系统架构是稳定的基石；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、小心的代码逻辑&lt;/strong&gt;：代码时刻都要小心，多担心一点这里会不会有性能问题，那里会不会出现并发，代码就不会有多少问题；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、优秀的集群部署&lt;/strong&gt;：一台机器永远会有性能瓶颈，优秀的集群部署，可以将一台机器的稳定放大无限倍，是高并发与大流量的保障；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、科学的限流熔断&lt;/strong&gt;：高并发来临时，科学的限流和熔断是系统稳定的必要条件；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、精细的监控体系&lt;/strong&gt;：没有监控体系，你永远不会知道你的系统到底有多少隐藏的问题和坑，也很难知道瓶颈在哪里；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、强悍的压测机制&lt;/strong&gt;：压测是高并发稳定性的试金石，能提前预知高并发来临时，系统应该出现的模样；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、胆小的开发人员&lt;/strong&gt;：永远需要一群胆小的程序员，他们讨厌bug，害怕error，不放过每一个波动，不信任所有的依赖。&lt;/p&gt;
&lt;h2 id=&#34;4-稳定性专项&#34;&gt;4 稳定性专项&lt;/h2&gt;
&lt;p&gt;专项指的是&lt;strong&gt;针对某些特定场景下的特定问题而梳理出对应的方案&lt;/strong&gt;。下面是针对一些常见的稳定性专项的概述：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、预案&lt;/strong&gt;：分为定时预案和紧急预案，定时预案是大促常规操作对于一系列开关的编排，紧急预案是应对突发情况的特殊处理，都依赖于事前梳理；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、预热&lt;/strong&gt;：分为JIT代码预热和数据预热，阿里内部有专门的一个产品负责这块，通过存储线上的常态化流量或者热点流量进行回放来提前预热， 起源于某年双十一零点的毛刺问题，原因是访问了数据库的冷数据rt增高导致的一系列上层限流，现在预热已经成了大促之前的一个必要流程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、强弱依赖&lt;/strong&gt;:梳理强弱依赖是一个偏人肉的过程，但是非常重要，这是一个系统自查识别潜在风险点并为后续整理开关限流预案和根因分析的一个重要参考，阿里内部有一个强弱依赖检测的平台，通过对测试用例注入RPC调用的延迟或异常来观察链路的依赖变化，自动梳理出强弱依赖关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、限流降级熔断&lt;/strong&gt;:应对突发流量防止请求超出自身处理能力系统被击垮的必要手段；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、监控告警&amp;amp;链路追踪&lt;/strong&gt;:监控分为业务监控、系统监控和中间件监控和基础监控，作为线上问题发现和排查工具，重要性不言而喻。&lt;/p&gt;
&lt;h2 id=&#34;5-稳定性建设&#34;&gt;5 稳定性建设&lt;/h2&gt;
&lt;p&gt;稳定性建设，就和基础技术建设一样，是一个&lt;strong&gt;长期迭代和不断调整的过程&lt;/strong&gt;，业内常见的稳定性建设类型，主要有如下几种：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、容量规划&lt;/strong&gt;：个人感觉容量规划在大厂里也并没有做的很好，更多依赖的是业务方自己拍脑袋，然后全链路压测期间验证，不够就再加机器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、混沌工程&lt;/strong&gt;：混沌工程是近几年比较火的名词，通过不断给系统找麻烦来验证并完善系统能力，阿里在这块花了很大的精力建设红蓝军对抗攻防，进行定期和不定期的演练，最后以打分的形式来给各个部门系统做排名，除了系统层面的故障演练外还有资金演练，篡改线上sql语句制造资损来测试业务监控纠错的能力，通过制造小错来避免大错。&lt;/p&gt;
&lt;p&gt;跳转门：&lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//www.cnblogs.com/imyalost/p/12271620.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;混沌工程-初识&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、流量调度&lt;/strong&gt;：通过metric秒级监控和聚类算法实时找出异常单机来降低RPC流量权重，提升集群整体吞吐能力减少异常请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、容灾&amp;amp;异地多活&lt;/strong&gt;：起源于15年某施工队将光纤挖断带来的支付宝故障，由此出来的三地五中心和单元化架构，异地多活本身的成本比较高，然后又存在数据同步的延时问题和切流带来的脏数据问题，对于业务和技术都有比较高的要求。常见的容灾有如下几种：&lt;/p&gt;
&lt;p&gt;　 1）缓存挂掉，集群重启缓存预热如何处理？本地缓存，多级缓存是否可以替代？&lt;/p&gt;
&lt;p&gt;　 2）分布式锁，是否有开关一键切换？比如：ZK/ETCD编写的分布式锁；&lt;/p&gt;
&lt;p&gt;　 3）大促峰值流量，如何防止外部ddos攻击？如何识别流量类型？&lt;/p&gt;
&lt;p&gt;　 4）资源隔离：资源隔离，服务分组，流量隔离；&lt;/p&gt;
&lt;p&gt;　 5）高可用思想：避免单点设计！&lt;/p&gt;
&lt;p&gt;　 6）容错：容错上游，防御下游。容错主要需要注意如下几点：&lt;/p&gt;
&lt;p&gt;　 　 6-1：外部依赖的地方都要做熔断，避免雪崩；&lt;/p&gt;
&lt;p&gt;　　 6-2：对于依赖我们的上游要限流，防止上游突发超过自己系统能够扛住的最大QPS；&lt;/p&gt;
&lt;p&gt;　　 6-3：对于下游既要评估好接口超时时间，防止下游接口超时导致自己系统被拖累；&lt;/p&gt;
&lt;p&gt;　　 6-4：下游接口要考虑各种异常情况，需要考虑中间状态，通过引入柔性事务，确保数&lt;/p&gt;
&lt;p&gt;据最终一致&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、异地多活&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异地多活的本质，是数据中心架构的演进&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）演进&lt;/strong&gt;：单机房——双机房——异地灾备——异地多活；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）定义&lt;/strong&gt;：分多个地域、多个数据中心运行线上的业务，并且每个IDC均提供在线服务；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）优点&lt;/strong&gt;：弹性扩展能力、流量就近接入、灵活调度、提升可用性与用户体验、容灾；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;　 4-1：基础设施：机房之间专线互联，保证网络质量稳定；&lt;/p&gt;
&lt;p&gt;　 4-2：持久存储：一主三从，主IDC同步复制，异地IDC异步复制；&lt;/p&gt;
&lt;p&gt;　 4-3：中间件：DB、MQ、分布式存储；&lt;/p&gt;
&lt;p&gt;　 4-4：应用部署：根据应用域划分，不同应用部署在不同地域，保持亲缘性；&lt;/p&gt;
&lt;p&gt;　 4-5：流量接入与调度：网络协议兼容，DNS，动态调度用户就近访问；&lt;/p&gt;
&lt;p&gt;　 4-6：监控与运维保障：专线实时监控，确保发生故障时可以触发Failover（失效备援）和&lt;/p&gt;
&lt;p&gt;流量调度。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>可靠性、可用性、稳定性</title>
        <link>https://lxb.wiki/18166f99/</link>
        <pubDate>Mon, 29 Mar 2021 23:01:42 +0000</pubDate>
        
        <guid>https://lxb.wiki/18166f99/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;对比Availability可用性、Reliability可靠性、Stability稳定性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;区分&#34;&gt;区分&lt;/h2&gt;
&lt;p&gt;从事故、稳定方面简单理解如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可靠性&lt;/td&gt;
&lt;td&gt;不出事故&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性&lt;/td&gt;
&lt;td&gt;出事故后，快速止损&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;稳定性&lt;/td&gt;
&lt;td&gt;解决故障问题基础上，服务持续稳定、性能稳定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20210509160538.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;总体对比&#34;&gt;总体对比&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;可用性&#34;&gt;可用性&lt;/h2&gt;
&lt;p&gt;可用性指系统在给定时间内可以正常工作的概率，通常用SLA（服务等级协议，service level agreement）指标来表示。&lt;/p&gt;
&lt;p&gt;这是这段时间的总体的可用性指标。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;通俗叫法&lt;/th&gt;
&lt;th&gt;可用性级别&lt;/th&gt;
&lt;th&gt;年度宕机时间&lt;/th&gt;
&lt;th&gt;周宕机时间&lt;/th&gt;
&lt;th&gt;每天宕机时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1个9&lt;/td&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;36.5天&lt;/td&gt;
&lt;td&gt;16.8小时&lt;/td&gt;
&lt;td&gt;2.4小时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2个9&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;87.6小时&lt;/td&gt;
&lt;td&gt;1.68小时&lt;/td&gt;
&lt;td&gt;14分钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3个9&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;8.76小时&lt;/td&gt;
&lt;td&gt;10.1分钟&lt;/td&gt;
&lt;td&gt;86秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4个9&lt;/td&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;td&gt;52.6分钟&lt;/td&gt;
&lt;td&gt;1.01分钟&lt;/td&gt;
&lt;td&gt;8.6秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5个9&lt;/td&gt;
&lt;td&gt;99.999%&lt;/td&gt;
&lt;td&gt;5.26分钟，315.36秒&lt;/td&gt;
&lt;td&gt;6.05秒&lt;/td&gt;
&lt;td&gt;0.86秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;可靠性&#34;&gt;可靠性&lt;/h2&gt;
&lt;p&gt;可靠性相关的几个指标如下：&lt;/p&gt;
&lt;h3 id=&#34;mtbfmean-time-between-failure&#34;&gt;MTBF（Mean Time Between Failure）&lt;/h3&gt;
&lt;p&gt;即平均无故障时间，是指从新的产品在规定的工作环境条件下开始工作到出现第一个故障的时间的平均值。&lt;/p&gt;
&lt;p&gt;MTBF越长表示可靠性越高，正确工作能力越强 。&lt;/p&gt;
&lt;h3 id=&#34;mttrmean-time-to-repair&#34;&gt;MTTR（Mean Time To Repair）&lt;/h3&gt;
&lt;p&gt;即平均修复时间，是指可修复产品的平均修复时间，就是从出现故障到修复中间的这段时间。&lt;/p&gt;
&lt;p&gt;MTTR越短表示易恢复性越好。&lt;/p&gt;
&lt;h3 id=&#34;mttfmean-time-to-failure&#34;&gt;MTTF（Mean Time To Failure）&lt;/h3&gt;
&lt;p&gt;即平均失效时间。系统平均能够正常运行多长时间，才发生一次故障。&lt;/p&gt;
&lt;p&gt;系统的可靠性越高，平均无故障时间越长。&lt;/p&gt;
&lt;p&gt;这些指标跟可用性关系&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Availability = UpTime/(UpTime+DownTime) = MTBF / (MTBF + MTTR)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;稳定性&#34;&gt;稳定性&lt;/h2&gt;
&lt;p&gt;Stackoverflow 看到这样一段代码来表示稳定性和可靠性的区别，甚为有趣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Reliable but unstable:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add(a,b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; randomInt mod &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        throw exception
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Stable but unreliable:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add(a,b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; randomInt mod &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         print a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         print a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>【译】微服务中的熔断器和重试</title>
        <link>https://lxb.wiki/c9399f4/</link>
        <pubDate>Thu, 12 Dec 2019 23:02:17 +0000</pubDate>
        
        <guid>https://lxb.wiki/c9399f4/</guid>
        <description>&lt;p&gt;今天我们来讨论微服务架构中的自我恢复能力。通常情况下，服务间会通过同步或异步的方式进行通信。我们假定把一个庞大的系统分解成一个个的小块能将各个服务解耦。管理服务内部的通信可能有点困难了。你可能听说过这两个著名的概念：熔断和重试。&lt;/p&gt;
&lt;h2 id=&#34;熔断器&#34;&gt;熔断器&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204010211.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;想象一个简单的场景：用户发出的请求访问服务 A 随后访问另一个服务 B。我们可以称 B 是 A 的依赖服务或下游服务。到服务 B 的请求在到达各个实例前会先通过负载均衡器。&lt;/p&gt;
&lt;p&gt;后端服务发生系统错误的原因有很多，例如慢查询、network blip 和内存争用。在这种场景下，如果返回 A 的 response 是 timeout 和 server error，我们的用户会再试一次。在混乱的局面中我们怎样来保护下游服务呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204010301.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;熔断器可以让我们对失败率和资源有更好的控制。熔断器的设计思路是不等待 TCP 的连接 timeout 快速且优雅地处理 error。这种 fail fast 机制会保护下游的那一层。这种机制最重要的部分就是立刻向调用方返回 response。没有被 pending request 填充的线程池，没有 timeout，而且极有可能烦人的调用链中断者会更少。此外，下游服务也有了充足的时间来恢复服务能力。完全杜绝错误很难，但是减小失败的影响范围是有可能的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204011033.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;通过 hystrix 熔断器，我们可以采用降级方案，对上游返回降级后的结果。例如，服务 B 可以访问一个备份服务或 cache，不再访问原来的服务 C。引入这种降级方案需要集成测试，因为我们在 happy path（译注：所谓 happy path，即测试方法的默认场景，没有异常和错误信息。具体可参见 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Happy_path&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wikipedia&lt;/a&gt;）可能不会遇到这种网络模式。&lt;/p&gt;
&lt;h2 id=&#34;状态&#34;&gt;状态&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204011142.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;熔断器有三个主要的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Closed：让所有请求都通过的默认状态。在阈值下的请求不管成功还是失败，熔断器的状态都不会改变。可能出现的错误是 &lt;strong&gt;Max Concurrency&lt;/strong&gt;（最大并发数）和 &lt;strong&gt;Timeout&lt;/strong&gt;（超时）。&lt;/li&gt;
&lt;li&gt;Open：所有的请求都会返回 &lt;strong&gt;Circuit Open&lt;/strong&gt; 错误并被标记为失败。这是一种不等待处理结束的 timeout 时间的 fail-fast 机制。&lt;/li&gt;
&lt;li&gt;Half Open：周期性地向下游服务发出请求，检查它是否已恢复。如果下游服务已恢复，熔断器切换到 Closed 状态，否则熔断器保持 Open 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;熔断器原理&#34;&gt;熔断器原理&lt;/h2&gt;
&lt;p&gt;控制熔断的设置共有 5 个主要参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CommandConfig is used to tune circuit settings at runtime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandConfig&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;timeout&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConcurrentRequests&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;max_concurrent_requests&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestVolumeThreshold&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;request_volume_threshold&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SleepWindow&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;sleep_window&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorPercentThreshold&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;error_percent_threshold&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gist.githubusercontent.com/aladine/18b38b37f838c1938131f67da0648e92/raw/8f97b8ef0b796ea5355b8f895b4009adfe472668/command.go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查看源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以通过根据两个服务的 SLA（‎ Service Level Agreement，&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-hans/%e6%9c%8d%e5%8a%a1%e7%ba%a7%e5%88%ab%e5%8d%8f%e8%ae%ae&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;服务级别协议&lt;/a&gt;）来定出阈值。如果在测试时把依赖的其他服务也涉及到了，这些值会得到很好的调整。&lt;/p&gt;
&lt;p&gt;一个好的熔断器的名字应该能精确指出哪个服务连接出了问题。实际上，请求一个服务时可能会有很多个 API endpoint。每一个 endpoint 都应该有一个对应的熔断器。&lt;/p&gt;
&lt;h2 id=&#34;生产上的熔断器&#34;&gt;生产上的熔断器&lt;/h2&gt;
&lt;p&gt;熔断器通常被放在聚合点上。尽管熔断器提供了一种 fail-fast 机制，但我们仍然需要确保可选的降级方案可行。如果我们因为假定需要降级方案的场景出现的可能性很小就不去测试它，那（之前的努力）就是白费力气了。即使在最简单的演练中，我们也要确保阈值是有意义的。以我的个人经验，把参数配置在 log 中 print 出来对于 debug 很有帮助。&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;这段实例代码用的是 &lt;a class=&#34;link&#34; href=&#34;http://github.com/afex/hystrix-go/hystrix&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hystrix-go&lt;/a&gt; 库，hystrix Netflix 库在 Golang 的实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/afex/hystrix-go/hystrix&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;commandName&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;producer_api&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;hystrix&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigureCommand&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;commandName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hystrix&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CommandConfig&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;:                &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConcurrentRequests&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorPercentThreshold&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestVolumeThreshold&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;SleepWindow&lt;/span&gt;:            &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listening on :8080&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hystrix&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Go&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;commandName&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// talk to other services
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callChargeProducerAPI&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// err := callWithRetryV1()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// success
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// failure
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// logger is Handler wrapper function for logging
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callChargeProducerAPI&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SERVER_ERROR&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SERVER_ERROR&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;503 error&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;demo 中分别测试了请求调用链 closed 和 open 两种情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* Experiment 1: success path */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq 10&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; curl -x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; localhost:8080 ;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* Experiment 2: circuit open */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVER_ERROR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; Go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq 10&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; curl -x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; localhost:8080 ;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/aladine/48d935c44820508e5bca2f061e3a7c1d/raw/930cdc10c41e8b9b37018f2be36bc421e6df481a/demo.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查看源码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;重试问题&#34;&gt;重试问题&lt;/h2&gt;
&lt;p&gt;在上面的熔断器模式中，如果服务 B 缩容，会发生什么？大量已经从 A 发出的请求会返回 5xx error。可能会触发熔断器切换到 open 的错误报警。因此我们需要重试以防间歇性的 network hiccup 发生。&lt;/p&gt;
&lt;p&gt;一段简单的重试代码示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callWithRetryV1&lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// call producer API
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callChargeProducerAPI&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// adding backoff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// adding jitter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gist.githubusercontent.com/aladine/6d65d1db78b020ef9866e3a8ad2516aa/raw/a4d3b65cc4ef920cdfc7e898c130b92371007785/retry.go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查看源码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;重试模式&#34;&gt;重试模式&lt;/h2&gt;
&lt;p&gt;为了实现乐观锁，我们可以为不同的服务配置不同的重试次数。因为立即重试会对下游服务产生爆发性的请求，所以不能用立即重试。加一个 backoff 时间可以缓解下游服务的压力。一些其他的模式会用一个随机的 backoff 时间（或在等待时加 jitter）。&lt;/p&gt;
&lt;p&gt;一起来看下列算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exponential: bash * 2&lt;!-- raw HTML omitted --&gt;attemp&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Full Jitter: sleep = rand(0, base * 2&lt;!-- raw HTML omitted --&gt;attempt&lt;!-- raw HTML omitted --&gt;)&lt;/li&gt;
&lt;li&gt;Equal Jitter: temp = base * 2&lt;!-- raw HTML omitted --&gt;attemp&lt;!-- raw HTML omitted --&gt;; sleep = temp/2+rand(0, temp/2)&lt;/li&gt;
&lt;li&gt;De-corredlated Jitter: sleep = rand(base, sleep*3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【译注】关于这几个算法，可以参考&lt;a class=&#34;link&#34; href=&#34;https://amazonaws-china.com/cn/blogs/architecture/exponential-backoff-and-jitter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这篇文章&lt;/a&gt; 。&lt;strong&gt;Full Jitter&lt;/strong&gt;、 &lt;strong&gt;Equal Jitter&lt;/strong&gt;、 &lt;strong&gt;De-corredlated&lt;/strong&gt; 等都是原作者自己定义的名词。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204111132.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;客户端的数量与服务端的总负载和处理完成时间是有关联的。为了确定什么样的重试模式最适合你的系统，在客户端数量增加时很有必要运行基准测试。详细的实验过程可以在&lt;a class=&#34;link&#34; href=&#34;https://amazonaws-china.com/cn/blogs/architecture/exponential-backoff-and-jitter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这篇文章&lt;/a&gt;中看到。我建议的算法是 de-corredlated Jitter 和 full jitter 选择其中一个。&lt;/p&gt;
&lt;h2 id=&#34;两者结合&#34;&gt;两者结合&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201204011245.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Example configuration of both tools&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;熔断器被广泛用在无状态线上事务系统中，尤其是在聚合点上。重试应该用于调度作业或不被 timeout 约束的 worker。经过深思熟虑后我们可以同时用熔断器和重试。在大型系统中，service mesh 是一种能更精确地编排不同配置的理想架构。&lt;/p&gt;
&lt;h2 id=&#34;参考文章&#34;&gt;参考文章&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/afex/hystrix-go/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/afex/hystrix-go/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/eapache/go-resiliency&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/eapache/go-resiliency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Netflix/Hystrix/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Netflix/Hystrix/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.awsarchitectureblog.com/2015/03/backoff.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.awsarchitectureblog.com/2015/03/backoff.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://dzone.com/articles/go-microservices-part-11-hystrix-and-resilience&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dzone.com/articles/go-microservices-part-11-hystrix-and-resilience&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;via: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@trongdan_tran/circuit-breaker-and-retry-64830e71d0f6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/@trongdan_tran/circuit-breaker-and-retry-64830e71d0f6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@trongdan_tran&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dan Tran&lt;/a&gt; 译者：&lt;a class=&#34;link&#34; href=&#34;https://github.com/lxbwolf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xiaobin.Liu&lt;/a&gt; 校对：&lt;a class=&#34;link&#34; href=&#34;https://github.com/polaris1119&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;polaris1119&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文由 &lt;a class=&#34;link&#34; href=&#34;https://github.com/studygolang/GCTT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GCTT&lt;/a&gt; 原创编译，&lt;a class=&#34;link&#34; href=&#34;https://studygolang.com/articles/25295&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go语言中文网&lt;/a&gt; 荣誉推出&lt;/p&gt;
</description>
        </item>
        <item>
        <title>分布式锁高并发优化</title>
        <link>https://lxb.wiki/7db296fb/</link>
        <pubDate>Fri, 18 Oct 2019 22:38:39 +0000</pubDate>
        
        <guid>https://lxb.wiki/7db296fb/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;问题场景&#34;&gt;问题场景:&lt;/h4&gt;
&lt;p&gt;假如下单时，用分布式锁来防止库存超卖，但是是每秒上千订单的高并发场景，如何对分布式锁进行高并发优化来应对这个场景？&lt;/p&gt;
&lt;h4 id=&#34;库存超卖现象是怎么产生的&#34;&gt;库存超卖现象是怎么产生的？&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201201004321.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;库存超卖&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;假设订单系统部署两台机器上，不同的用户都要同时买10台iphone，分别发了一个请求给订单系统。
接着每个订单系统实例都去数据库里查了一下，当前iphone库存是12台
于是乎，每个订单系统实例都发送SQL到数据库里下单，然后扣减了10个库存，其中一个将库存从12台扣减为2台，另外一个将库存从2台扣减为-8台&lt;/p&gt;
&lt;h4 id=&#34;用分布式锁如何解决库存超卖问题&#34;&gt;用分布式锁如何解决库存超卖问题？&lt;/h4&gt;
&lt;p&gt;分布式锁的实现原理:
同一个锁key，同一时间只能有一个客户端拿到锁，其他客户端会陷入无限的等待来尝试获取那个锁，只有获取到锁的客户端才能执行下面的业务逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201201004449.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分布式锁代码&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201201004607.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fenbushisuo_yuanli&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看到，只有一个订单系统实例可以成功加分布式锁，然后只有他一个实例可以查库存、判断库存是否充足、下单扣减库存，接着释放锁。&lt;/p&gt;
&lt;p&gt;释放锁之后，另外一个订单系统实例才能加锁，接着查库存，一下发现库存只有2台了，库存不足，无法购买，下单失败。不会将库存扣减为-8的&lt;/p&gt;
&lt;h4 id=&#34;分布式锁的方案在高并发场景下&#34;&gt;分布式锁的方案在高并发场景下&lt;/h4&gt;
&lt;p&gt;分布式锁一旦加了之后，对同一个商品的下单请求，会导致所有客户端都必须对同一个商品的库存锁key进行加锁。&lt;/p&gt;
&lt;p&gt;比如，对iphone这个商品的下单，都必对“iphone_stock”这个锁key来加锁。这样会导致对同一个商品的下单请求，就必须串行化，一个接一个的处理。&lt;/p&gt;
&lt;p&gt;假设加锁之后，释放锁之前，查库存 -&amp;gt; 创建订单 -&amp;gt; 扣减库存，这个过程性能很高吧，算他全过程20毫秒，这应该不错了。&lt;/p&gt;
&lt;p&gt;那么1秒是1000毫秒，只能容纳50个对这个商品的请求依次串行完成处理。&lt;/p&gt;
&lt;p&gt;比如一秒钟来50个请求，都是对iphone下单的，那么每个请求处理20毫秒，一个一个来，最后1000毫秒正好处理完50个请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201201004059.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分布式锁串行&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;所以, 能看出来简单的使用分布式锁来处理库存超卖问题，存在的缺陷就是同一个商品多用户同时下单的时候，会基于分布式锁串行化处理，导致没法同时处理同一个商品的大量下单的请求。&lt;/p&gt;
&lt;p&gt;这种方案，要是应对那种低并发、无秒杀场景的普通小电商系统，可能还可以接受。&lt;/p&gt;
&lt;p&gt;因为如果并发量很低，每秒就不到10个请求，没有瞬时高并发秒杀单个商品的场景的话，其实也很少会对同一个商品在一秒内瞬间下1000个订单，因为小电商系统没那场景。&lt;/p&gt;
&lt;h4 id=&#34;如何对分布式锁进行高并发优化&#34;&gt;如何对分布式锁进行高并发优化？&lt;/h4&gt;
&lt;p&gt;现在按照刚才的计算，你一秒钟只能处理针对iphone的50个订单。&lt;/p&gt;
&lt;p&gt;其实说出来也很简单，相信很多人看过java里的ConcurrentHashMap的源码和底层原理，应该知道里面的核心思路，就是分段加锁！&lt;/p&gt;
&lt;p&gt;把数据分成很多个段，每个段是一个单独的锁，所以多个线程过来并发修改数据的时候，可以并发的修改不同段的数据。不至于说，同一时间只能有一个线程独占修改ConcurrentHashMap中的数据。&lt;/p&gt;
&lt;p&gt;另外，Java 8中新增了一个LongAdder类，也是针对Java 7以前的AtomicLong进行的优化，解决的是CAS类操作在高并发场景下，使用乐观锁思路，会导致大量线程长时间重复循环。&lt;/p&gt;
&lt;p&gt;LongAdder中也是采用了类似的分段CAS操作，失败则自动迁移到下一个分段进行CAS的思路。&lt;/p&gt;
&lt;p&gt;其实分布式锁的优化思路也是类似的，之前我们是在另外一个业务场景下落地了这个方案到生产中，不是在库存超卖问题里用的。&lt;/p&gt;
&lt;p&gt;但是库存超卖这个业务场景不错，很容易理解，所以我们就用这个场景来说一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/lxbwolf/blog_source_image@main/20201201004652.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分段加锁&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其实这就是分段加锁。你想，假如你现在iphone有1000个库存，那么你完全可以给拆成20个库存段，要是你愿意，可以在数据库的表里建20个库存字段，比如stock_01，stock_02，类似这样的，也可以在redis之类的地方放20个库存key。&lt;/p&gt;
&lt;p&gt;总之，就是把你的1000件库存给他拆开，每个库存段是50件库存，比如stock_01对应50件库存，stock_02对应50件库存。&lt;/p&gt;
&lt;p&gt;接着，每秒1000个请求过来了，好！此时其实可以是自己写一个简单的随机算法，每个请求都是随机在20个分段库存里，选择一个进行加锁。&lt;/p&gt;
&lt;p&gt;这样就好了，同时可以有最多20个下单请求一起执行，每个下单请求锁了一个库存分段，然后在业务逻辑里面，就对数据库或者是Redis中的那个分段库存进行操作即可，包括查库存 -&amp;gt; 判断库存是否充足 -&amp;gt; 扣减库存。&lt;/p&gt;
&lt;p&gt;这相当于什么呢？相当于一个20毫秒，可以并发处理掉20个下单请求，那么1秒，也就可以依次处理掉20 * 50  = 1000个对iphone的下单请求了。&lt;/p&gt;
&lt;p&gt;一旦对某个数据做了分段处理之后，有一个坑大家一定要注意：如果某个下单请求，咔嚓加锁，然后发现这个分段库存里的库存不足了，此时咋办？&lt;/p&gt;
&lt;p&gt;这时你得自动释放锁，然后立马换下一个分段库存，再次尝试加锁后尝试处理。这个过程一定要实现&lt;/p&gt;
&lt;h4 id=&#34;分布式锁并发优化方案有没有什么不足&#34;&gt;分布式锁并发优化方案有没有什么不足？&lt;/h4&gt;
</description>
        </item>
        <item>
        <title>架构设计原则</title>
        <link>https://lxb.wiki/88049151/</link>
        <pubDate>Fri, 01 Mar 2019 22:52:22 +0000</pubDate>
        
        <guid>https://lxb.wiki/88049151/</guid>
        <description>&lt;h4 id=&#34;grasp-通用职责分配软件模式&#34;&gt;GRASP 通用职责分配软件模式&lt;/h4&gt;
&lt;p&gt;来自 Craig Larman 的软件设计书《UML 和模式应用》[附录 1]，Larman 在书中提出软件设计的关键任务是职责分配，并提炼总结出 9 种 (5 种核心 +4 种扩展) 软件职责分配模式，这些模式是比 GoF 设计模式更抽象的元模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 信息专家 (Information Expert)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为对象分配职责的通用原则 – 把职责分配给拥有足够信息可以履行职责的专家&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 创建者 (Creator)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将创建 A 的职责赋给 B，如果至少下面一种情况为真：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B“包含”或者聚合 A&lt;/li&gt;
&lt;li&gt;B 记录 A 的实例&lt;/li&gt;
&lt;li&gt;B 密切地使用 A&lt;/li&gt;
&lt;li&gt;B 拥有 A 的初始化数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 低耦合 (Low Coupling)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;赋予职责使得对象间的耦合度尽可能低，最小化对象间的依赖和变更影响，最大化重用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 高内聚 (High Cohesion)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;赋予职责使得每个对象的职责尽可能保持聚焦和单一，易于管理和理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 控制器 (Controller)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把职责赋予系统、设备或者子系统的表示类 (门面控制器)，或者某个用例的表示类 (用例控制器)，让控制器接收事件并协调整个系统的运作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 多态 (Polymorphism)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将职责分配给多个具有同名方法的多态子类，运行时根据需要动态切换子类，让系统行为变得可插拔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 纯虚构 (Pure Fabrication)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对真实问题域中不存在，但是设计建模中有用的概念，设计虚构类并赋予职责。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 间接 (Indirection)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在两个或者多个对象间有交互的情况下，为避免直接耦合，提高重用性，创建中间类并赋予职责，对象的交互交由中间类协调。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. 受保护的变化 (Protected Variation)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单讲就是封装变化。识别系统中可能的不稳定或者变化，在不稳定组件上创建稳定的抽象接口，将可能的变化封装在接口之后，使得系统内部的不稳定或者变化不会对系统的其它部分产生不良影响。&lt;/p&gt;
&lt;h4 id=&#34;solid-面向对象设计原则&#34;&gt;SOLID 面向对象设计原则&lt;/h4&gt;
&lt;p&gt;S.O.L.I.D 是面向对象设计和编程 (OOD&amp;amp;OOP) 中几个重要原则的首字母缩写，受 Robert Martin 推崇。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 单一职责原则 (The Single Responsibility Principle)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改某个类的理由应该只有一个，如果超过一个，说明类承担不止一个职责，要视情况拆分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 开放封闭原则 (The Open Closed Principle)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软件实体应该对扩展开放，对修改封闭。一般不要直接修改类库源码（即使你有源代码），通过继承等方式扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 里氏替代原则 (The Liskov Substitution Principle)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个子类的实例能够被替换成任何超类的实例时，它们之间才是真正的 is-a 关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 依赖倒置原则 (The Dependency Inversion Principle)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高层模块不应该依赖于底层模块，二者都应该依赖于抽象。换句话说，依赖于抽象，不要依赖于具体实现。比方说，你不会把电器电源线焊死在室内电源接口处，而是用标准的插头插在标准的插座 (抽象) 上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 接口分离原则 (The Interface Segregation Principle)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要强迫用户去依赖它们不使用的接口。换句话说，使用多个专门的接口比使用单一的大而全接口要好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高内聚 + 低耦合，就像道中的一阴一阳，是所有其它 OO 设计原则的原则 (元原则)，其它设计原则都是在这两个基础上泛化衍生出来的。&lt;/li&gt;
&lt;li&gt;上述原则虽然是针对 OO 设计和编程提出，但是对于大规模系统架构仍然适用。比如，微服务架构就体现了：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;单一职责：一个微服务尽可能要职责单一，提供的接口也尽可能单一 (接口分离原则)，安全 / 路由 / 限流等跨横切面的关注点 (Cross-Cutting Concerns) 由独立网关负责，体现关注分离 (Separation of Concerns)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;信息专家：当不确定哪个团队应该负责某个微服务时，一般原则也是谁拥有数据谁负责，基于有界上下文 Bounded Context（一般是边界比较清晰的领域数据源）构建微服务。&lt;/li&gt;
&lt;li&gt;松散耦合：服务之间通过 HTTP/JSON 等轻量机制通信，服务之间不强耦合。&lt;/li&gt;
&lt;li&gt;受保护的变化和依赖倒置：服务之间只依赖抽象接口，实现可能随时变化。&lt;/li&gt;
&lt;li&gt;间接：网关在外面的客户端和内部的服务之间增加了一层间接，使两者不强耦合，可以相互独立演化。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;作为架构师或者设计师，有两个设计能力是需要重点培养的，也是最难和最能体现架构设计水平的：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;合理的职责分配能力，也就是每个类 / 组件 / 子系统应该承担什么职责，如何保证职责单一，它们之间如何协作；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;系统抽象和核心领域建模能力，需要深入一线业务域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式系统架构设计原则和理论&#34;&gt;分布式系统架构设计原则和理论&lt;/h3&gt;
&lt;h4 id=&#34;akf-架构原则&#34;&gt;AKF 架构原则&lt;/h4&gt;
&lt;p&gt;这 15 个架构原则来自《架构即未来 (The Art of Scalability)》[附录 2] 一书，作者马丁 L. 阿伯特和迈克尔 T. 费舍尔分别是 eBay 和 PayPal 的前 CTO，他们经历过 eBay 和 PayPal 大规模分布式电商平台的架构演进，在一线实战经验的基础上总结并提炼出 15 条架构原则：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.N + 1 设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;永远不要少于两个，通常为三个。比方说无状态的 Web/API 一般部署至少&amp;gt;=2 个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 回滚设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确保系统可以回滚到以前发布过的任何版本。可以通过发布系统保留历史版本，或者代码中引入动态开关切换机制 (Feature Switch)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 禁用设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能够关闭任何发布的功能。新功能隐藏在动态开关机制 (Feature Switch) 后面，可以按需一键打开，如发现问题随时关闭禁用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 监控设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在设计阶段就必须考虑监控，而不是在实施完毕之后补充。例如在需求阶段就要考虑关键指标监控项，这就是度量驱动开发 (Metrics Driven Development) 的理念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 设计多活数据中心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要被一个数据中心的解决方案把自己限制住。当然也要考虑成本和公司规模发展阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 使用成熟的技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只用确实好用的技术。商业组织毕竟不是研究机构，技术要落地实用，成熟的技术一般坑都被踩平了，新技术在完全成熟前一般需要踩坑躺坑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 异步设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能异步尽量用异步，只有当绝对必要或者无法异步时，才使用同步调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 无状态系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽可能无状态，只有当业务确实需要，才使用状态。无状态系统易于扩展，有状态系统不易扩展且状态复杂时更易出错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. 水平扩展而非垂直升级&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;永远不要依赖更大、更快的系统。一般公司成长到一定阶段普遍经历过买更大、更快系统的阶段，即使淘宝当年也买小型机扛流量，后来扛不住才体会这样做不 scalable，所以才有后来的去 IOE 行动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. 设计时至少要有两步前瞻性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在扩展性问题发生前考虑好下一步的行动计划。架构师的价值就体现在这里，架构设计对于流量的增长要有提前量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11. 非核心则购买&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果不是你最擅长，也提供不了差异化的竞争优势则直接购买。避免 Not Invented Here 症状，避免凡事都要重造轮子，毕竟达成业务目标才是重点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12. 使用商品化硬件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在大多数情况下，便宜的就是最好的。这点和第 9 点是一致的，通过商品化硬件水平扩展，而不是买更大、更快的系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13. 小构建、小发布和快试错&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全部研发要小构建，不断迭代，让系统不断成长。这个和微服务理念一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14. 隔离故障&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现故障隔离设计，通过断路保护避免故障传播和交叉影响。通过舱壁泳道等机制隔离失败单元 (Failure Unit)，一个单元的失败不至影响其它单元的正常工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15. 自动化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设计和构建自动化的过程。如果机器可以做，就不要依赖于人。自动化是 DevOps 的基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这 15 条架构原则基本上是 eBay 在发展，经历过流量数量级增长冲击过程中，通过不断踩坑踩出来的，是干货中的干货。消化吸收这 15 条原则，基本可保系统架构不会有原则性问题。&lt;/li&gt;
&lt;li&gt;这 15 条原则同样适用于现在的微服务架构。eBay 发展较早，它内部其实很早 (差不多 2010 年前) 就已形成完善的微服务生态，只是没有提出微服务这个概念。&lt;/li&gt;
&lt;li&gt;这 15 条原则可根据 TTM(Time To Market)，可用性 / 可扩展性 / 质量，成本 / 效率分布在三个环内，如下图所示。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;12-要素应用&#34;&gt;12 要素应用&lt;/h4&gt;
&lt;p&gt;基于上百万应用的托管和运营经验，创始人 Adam Wiggins 提出了 12 要素应用宣言 。简单讲，满足这 12 个要素的应用是比较容易云化并居住在 Heroku 平台上的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 基准代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一份基准代码，多份部署。如果用镜像部署方式，则一个镜像可以部署到多个环境 (测试，预发，生产)，而不是给每个环境制作一个不同镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显式声明依赖。如果用镜像部署，则一般依赖被直接打在镜像中，或者声明在 docker file 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在环境中存储配置。在 Heroku 或者类似的 PaaS 平台上，配置一般是推荐注入到环境变量中的。现在采用集中式配置中心也是一种流行方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 后端服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把后端服务 (例如缓存，数据库，MQ 等) 当作附加资源，相关配置和连接字符串通过环境变量注入，或者采用配置中心。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 构建、发布和运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;严格分离构建和运行。如果使用镜像部署，则构建、发布 / 运行是通过镜像这种中间格式严格分离的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个或者多个无状态的进程运行应用。容器运行时相当于进程，适用于无状态 Web/API。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 端口绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过端口绑定提供服务。容器也是通过端口绑定对外提供服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 并发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过进程模型进行扩展。容器运行时相当于进程，通过起多个容器可以任意扩展并发数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. 易处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速启动和优雅终止可最大化健壮性。docker 容器支持秒级启动和关闭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. 开发环境和线上环境等价&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽可能保持开发、测试、预发和线上环境相同。容器可以保证容器内运行时环境的一致性，还需要保证不同环境的一致性，例如不同环境内的操作系统，负载均衡，服务发现，后台服务，监控告警等要尽可能一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11. 日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把日志当作数据流。Heroku 不支持本地文件，所以必须以流方式把日志输送到后台日志服务。除了日志以外还要补充考虑 metrics 流的采集和输送。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12. 管理进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后台管理任务当作一次性的进程。其实相当于在 Heroku 上以独立进程方式运行任务 Job。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;12 要素应用也是当前云原生应用 (Cloud Native App) 的参考标准，也称为云应用迁移原则。满足这 12 个要素的应用，可以比较顺利迁移到各种云平台 (Kubernetes, Marathon, Cloud Foundry 等) 上。&lt;/li&gt;
&lt;li&gt;对于面临企业遗留应用改造和云化迁移的架构师，可以重点参考这 12 条迁移原则。&lt;/li&gt;
&lt;li&gt;Docker 容器技术可以认为是为云迁移量身定制的技术。容器化是后续云迁移的捷径，所以遗留应用改造可以先想办法做到容器化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;cap-定理&#34;&gt;CAP 定理&lt;/h4&gt;
&lt;p&gt;2000 年 7 月，加州大学伯克利分校的 Eric Brewer 教授在 ACM PODC 会议上提出 CAP 猜想。2 年后，麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP。之后，CAP 理论正式成为分布式计算领域的公认定理。&lt;/p&gt;
&lt;p&gt;CAP 认为：一个分布式系统最多同时满足一致性 (Consistency)，可用性 (Availability) 和分区容忍性 (Partition Tolerance) 这三项中的两项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.一致性 (Consistency)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一致性指“all nodes see the same data at the same time”，即更新操作成功，所有节点在同一时间的数据完全一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.可用性 (Availability)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可用性指“Reads and writes always succeed”，即服务一直可用，而且响应时间正常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.分区容忍性 (Partition tolerance)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分区容忍性指“the system continue to operate despite arbitrary message loss or failure of part of the system.”，即分布式系统在遇到某节点或网络分区故障时，仍然能够对外提供满足一致性和可用性的服务。&lt;/p&gt;
&lt;h4 id=&#34;base-理论&#34;&gt;BASE 理论&lt;/h4&gt;
&lt;p&gt;eBay 架构师 Dan Pritchett 基于对大规模分布式系统的实践总结，在 ACM 上发表文章提出了 BASE 理论，BASE 理论是对于 CAP 理论的延伸，核心思想是即使无法做到强一致性 (Strong Consistency，CAP 中的一致性指强一致性)，但是可以采用适当的方式达到最终一致性 (Eventual Consistency)。&lt;/p&gt;
&lt;p&gt;BASE 指基本可用 (Basically Available)、软状态 (Soft State) 和最终一致性 (Eventual Consistency)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.基本可用 (Basically Available)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本可用是指分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。比如服务降级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.软状态 (Soft State)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软状态是指允许系统存在中间状态，而该中间状态不会影响系统的整体可用性。分布式存储中一般一份数据至少存三个副本，允许不同节点间副本同步的延迟就是软状态的体现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.最终一致性 (Eventual Consistency)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终一致性是指系统中的所有数据副本经过一段时间后，最终能够达成一致状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CAP 和 BASE 理论可以抠得很深，背后甚至有很复杂的数学证明。我理解得相对简单浅显：性能、高可用、不丢数据和数据一致性对分布式系统来说一般是强需求，随着流量的增长，复制和分区在所难免：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;复制 (replication)：数据在多个节点上存多份保证不丢和高可用；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;分区 (partition)：数据按某个纬度切分分布在不同节点上分摊流量压力保证高性能，同时也是为了降低每个节点的复杂性。例如数据库的分库分表，系统拆分微服务化也是一种分区。这两者都会带来一致性问题，一致性在时间上有一点妥协的余地 - 即是最终一致性；时间上要求强一致的话，只有可用性可以适当折中。系统架构的游戏很大部分是和状态一致性作斗争的游戏。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;选择使用分布式产品时，比如 NoSQL 数据库，你需要了解它在 CAP 环中所在的位置，确保它满足你的场景需要。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;组织和系统改进原则&#34;&gt;组织和系统改进原则&lt;/h3&gt;
&lt;h4 id=&#34;康威法则&#34;&gt;康威法则&lt;/h4&gt;
&lt;p&gt;Melvin Conway 在 1967 年提出所谓康威法则 ，指出组织架构和系统架构之间有一种隐含的映射关系：&lt;/p&gt;
&lt;p&gt;Organization which design system […] are constrained to produce designs which are copies of the communication structures of these organization. 设计系统的组织其产生的设计等价于组织间的沟通结构。&lt;/p&gt;
&lt;p&gt;康威法则也可以倒过来阐述：&lt;/p&gt;
&lt;p&gt;Conway’s law reversed：You won’t be able to successfully establish an efficient organization structure that is not supported by your system design(architecture)。 如果系统架构不支持，你无法建立一个高效的组织；同样，如果你的组织架构不支持，你也无法建立一个高效的系统架构。&lt;/p&gt;
&lt;h4 id=&#34;系统改进三原则&#34;&gt;系统改进三原则&lt;/h4&gt;
&lt;p&gt;IT 运维管理畅销书《凤凰项目》[附录 8] 的作者 Gene Kim 在调研了众多高效能 IT 组织后总结出支撑 DevOps 运作的三个原理 (The Three Ways: The Principles Underpinning DevOps)[附录 9]，我认为也是系统改进提升的一般性原理 [附录 7]，见下图：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理一：系统思考 (System Thinking)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发驱动的组织，其能力不是制作软件，而是持续的交付客户价值。价值从业务需求开始，经过研发测试，到部署运维，依次流动，并最终以服务形式交付到客户手中。整个价值链流速并不依赖单个部分 (团队或个人) 的杰出工作，而是受整个价值链最薄弱环节 (瓶颈) 的限制。所以局部优化通常无效，反而招致全局受损。&lt;/p&gt;
&lt;p&gt;Gene Kim 特别指出：Any improvements made anywhere besides the bottleneck are an illusion. 在瓶颈之外的任何优化提升都只是幻象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理二：强化反馈环 (Amplify Feedback Loops)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;过程改进常常通过加强反馈环来达成。原理二强调企业和客户之间、组织团队间、流程上和系统内的反馈环。没有测量就没有提升，反馈要以测量数据为准，通过反馈数据优化改进系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理三：持续试验和学习的文化 (Culture of Continual Experimentation And Learning)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在企业管理文化层面强调勇于试错和持续试验、学习和改进的文化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;康威法则给我们的启示：系统架构和组织架构之间有隐含的映射关系，你不能单方面改变一方的结构，调整时必须两边联动。系统架构如果是耦合的，就很难组织分散式的团队结构，两边映射不起来，团队之间容易摩擦导致生产率下降。所以一般先按业务边界对单块应用进行解耦拆分，同时做相应的团队拆分，使两边可以映射，每个团队可以独立开发、测试和部署各自的微服务，进而提升生产率。这就是近年流行的微服务架构背后的组织原则。详见我之前发表的文章《企业的组织架构是如何影响技术架构的》[附录 6]。&lt;/li&gt;
&lt;li&gt;系统思考要求我们加强团队合作，培养流式思维和瓶颈约束思维，找出瓶颈并针对性地优化。在研发型组织中，常见的系统瓶颈如运维机器资源提供 (Provisioning) 缓慢，发布流程繁琐容易出错，开发 / 测试／UAT 环境缺失或不完善，遗留系统耦合历史负担重，基础研发平台薄弱等等。这些瓶颈点特别需要关注优化。&lt;/li&gt;
&lt;li&gt;反馈原理要求我们关注基于数据的反馈，技术上的手段包括大数据分析和系统各个层次的测量监控。没有测量就没有反馈，没有反馈就没有提升。&lt;/li&gt;
&lt;li&gt;在管理文化层面：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;管理层要承认企业内部近 50% 的创新或流程改进项目是有可能失败的，即使失败，员工不会受到责罚，鼓励持续的试验和从中学习；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;管理层要有技术偿债意识，勿追求 100% 员工利用率，要预留 20%~30% 的时间给员工做创新和系统改进提升项目&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>秒杀系统优化思路</title>
        <link>https://lxb.wiki/bcca3074/</link>
        <pubDate>Tue, 26 Feb 2019 22:13:12 +0000</pubDate>
        
        <guid>https://lxb.wiki/bcca3074/</guid>
        <description>&lt;h3 id=&#34;一秒杀业务为什么难做&#34;&gt;一、秒杀业务为什么难做&lt;/h3&gt;
&lt;p&gt;1）im系统，例如qq或者微博，每个人都读自己的数据（好友列表、群列表、个人信息）； 2）微博系统，每个人读你关注的人的数据，一个人读多个人的数据； 3）秒杀系统，库存只有一份，所有人会在集中的时间读和写这些数据，多个人读一个数据。&lt;/p&gt;
&lt;p&gt;例如：小米手机每周二的秒杀，可能手机只有1万部，但瞬时进入的流量可能是几百几千万。 又例如：12306抢票，票是有限的，库存一份，瞬时流量非常多，都读相同的库存。读写冲突，锁非常严重，这是秒杀业务难的地方。那我们怎么优化秒杀业务的架构呢？&lt;/p&gt;
&lt;h3 id=&#34;二优化方向&#34;&gt;二、优化方向&lt;/h3&gt;
&lt;p&gt;优化方向有两个（今天就讲这两个点）： （1）将请求尽量拦截在系统上游（不要让锁冲突落到数据库上去）。传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小。以12306为例，一趟火车其实只有2000张票，200w个人来买，基本没有人能买成功，请求有效率为0。&lt;/p&gt;
&lt;p&gt;（2）充分利用缓存，秒杀买票，这是一个典型的读多写少的应用场景，大部分请求是车次查询，票查询，下单和支付才是写请求。一趟火车其实只有2000张票，200w个人来买，最多2000个人下单成功，其他人都是查询库存，写比例只有0.1%，读比例占99.9%，非常适合使用缓存来优化。好，后续讲讲怎么个“将请求尽量拦截在系统上游”法，以及怎么个“缓存”法，讲讲细节。&lt;/p&gt;
&lt;h3 id=&#34;三常见秒杀架构&#34;&gt;三、常见秒杀架构&lt;/h3&gt;
&lt;p&gt;（1）浏览器端，最上层，会执行到一些JS代码 （2）站点层，这一层会访问后端数据，拼html页面返回给浏览器 （3）服务层，向上游屏蔽底层数据细节，提供数据访问 （4）数据层，最终的库存是存在这里的，mysql是一个典型（当然还有会缓存）&lt;/p&gt;
&lt;h3 id=&#34;四各层次优化细节&#34;&gt;四、各层次优化细节&lt;/h3&gt;
&lt;h4 id=&#34;第一层客户端怎么优化浏览器层app层&#34;&gt;第一层，客户端怎么优化（浏览器层，APP层）&lt;/h4&gt;
&lt;p&gt;微信的摇一摇抢红包，每次摇一摇，就会往后端发送请求么？下单抢票的场景，点击了“查询”按钮之后，系统那个卡呀，进度条涨的慢呀，作为用户，我会不自觉的再去点击“查询”，对么？继续点，继续点，点点点。。。有用么？平白无故的增加了系统负载，一个用户点5次，80%的请求是这么多出来的，怎么整？&lt;/p&gt;
&lt;p&gt;（a）产品层面，用户点击“查询”或者“购票”后，按钮置灰，禁止用户重复提交请求； （b）JS层面，限制用户在x秒之内只能提交一次请求；&lt;/p&gt;
&lt;p&gt;APP层面，可以做类似的事情，虽然你疯狂的在摇微信，其实x秒才向后端发起一次请求。这就是所谓的“将请求尽量拦截在系统上游”，越上游越好，浏览器层，APP层就给拦住，这样就能挡住80%+的请求，这种办法只能拦住普通用户（但99%的用户是普通用户）对于群内的高端程序员是拦不住的。firebug一抓包，http长啥样都知道，js是万万拦不住程序员写for循环，调用http接口的，这部分请求怎么处理？&lt;/p&gt;
&lt;h4 id=&#34;第二层站点层面的请求拦截&#34;&gt;第二层，站点层面的请求拦截&lt;/h4&gt;
&lt;p&gt;怎么拦截？怎么防止程序员写for循环调用，有去重依据么？ip？cookie-id？…想复杂了，这类业务都需要登录，用uid即可。在站点层面，对uid进行请求计数和去重，甚至不需要统一存储计数，直接站点层内存存储（这样计数会不准，但最简单）。一个uid，5秒只准透过1个请求，这样又能拦住99%的for循环请求。&lt;/p&gt;
&lt;p&gt;5s只透过一个请求，其余的请求怎么办？缓存，页面缓存，同一个uid，限制访问频度，做页面缓存，x秒内到达站点层的请求，均返回同一页面。同一个item的查询，例如车次，做页面缓存，x秒内到达站点层的请求，均返回同一页面。如此限流，既能保证用户有良好的用户体验（没有返回404）又能保证系统的健壮性（利用页面缓存，把请求拦截在站点层了）。&lt;/p&gt;
&lt;p&gt;页面缓存不一定要保证所有站点返回一致的页面，直接放在每个站点的内存也是可以的。优点是简单，坏处是http请求落到不同的站点，返回的车票数据可能不一样，这是站点层的请求拦截与缓存优化。&lt;/p&gt;
&lt;p&gt;好，这个方式拦住了写for循环发http请求的程序员，有些高端程序员（黑客）控制了10w个肉鸡，手里有10w个uid，同时发请求（先不考虑实名制的问题，小米抢手机不需要实名制），这下怎么办，站点层按照uid限流拦不住了。&lt;/p&gt;
&lt;h4 id=&#34;第三层-服务层来拦截反正就是不要让请求落到数据库上去&#34;&gt;第三层 服务层来拦截（反正就是不要让请求落到数据库上去）&lt;/h4&gt;
&lt;p&gt;服务层怎么拦截？大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透10w个请求去数据库有什么意义呢？没错，请求队列！&lt;/p&gt;
&lt;p&gt;对于写请求，做请求队列，每次只透有限的写请求去数据层（下订单，支付这样的写业务）&lt;/p&gt;
&lt;p&gt;1w部手机，只透1w个下单请求去db&lt;/p&gt;
&lt;p&gt;3k张火车票，只透3k个下单请求去db&lt;/p&gt;
&lt;p&gt;如果均成功再放下一批，如果库存不够则队列里的写请求全部返回“已售完”。&lt;/p&gt;
&lt;p&gt;对于读请求，怎么优化？cache抗，不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题的。如此限流，只有非常少的写请求，和非常少的读缓存mis的请求会透到数据层去，又有99.9%的请求被拦住了。&lt;/p&gt;
&lt;p&gt;当然，还有业务规则上的一些优化。回想12306所做的，分时分段售票，原来统一10点卖票，现在8点，8点半，9点，&amp;hellip;每隔半个小时放出一批：将流量摊匀。&lt;/p&gt;
&lt;p&gt;其次，数据粒度的优化：你去购票，对于余票查询这个业务，票剩了58张，还是26张，你真的关注么，其实我们只关心有票和无票？流量大的时候，做一个粗粒度的“有票”“无票”缓存即可。&lt;/p&gt;
&lt;p&gt;第三，一些业务逻辑的异步：例如下单业务与 支付业务的分离。这些优化都是结合 业务 来的，我之前分享过一个观点“一切脱离业务的架构设计都是耍流氓”架构的优化也要针对业务。&lt;/p&gt;
&lt;h4 id=&#34;第四层-最后是数据库层&#34;&gt;第四层 最后是数据库层&lt;/h4&gt;
&lt;p&gt;浏览器拦截了80%，站点层拦截了99.9%并做了页面缓存，服务层又做了写请求队列与数据缓存，每次透到数据库层的请求都是可控的。db基本就没什么压力了，闲庭信步，单机也能扛得住，还是那句话，库存是有限的，小米的产能有限，透这么多请求来数据库没有意义。&lt;/p&gt;
&lt;p&gt;全部透到数据库，100w个下单，0个成功，请求有效率0%。透3k个到数据，全部成功，请求有效率100%。&lt;/p&gt;
&lt;h3 id=&#34;五总结&#34;&gt;五、总结&lt;/h3&gt;
&lt;p&gt;上文应该描述的非常清楚了，没什么总结了，对于秒杀系统，再次重复下我个人经验的两个架构优化思路： （1）尽量将请求拦截在系统上游（越上游越好）； （2）读多写少的常用多使用缓存（缓存抗读压力）；&lt;/p&gt;
&lt;p&gt;浏览器和APP：做限速&lt;/p&gt;
&lt;p&gt;站点层：按照uid做限速，做页面缓存&lt;/p&gt;
&lt;p&gt;服务层：按照业务做写请求队列控制流量，做数据缓存&lt;/p&gt;
&lt;p&gt;数据层：闲庭信步&lt;/p&gt;
&lt;p&gt;并且：结合业务做优化&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
